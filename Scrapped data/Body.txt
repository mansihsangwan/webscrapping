





Skip to content. |

  Skip to navigation


Personal tools


Log in






Search Site





                only in current section
            






            Advanced Search…
        




Navigation
HomeLearn moreNewsStories






You
are here:

Home





Info





                    Get the Python Brochure Vol.1 as download!
                


      
      by
      Armin C. Stross-Radschinski
      
         —
    


      last modified
    
    Jan 30, 2019 01:34 PM
  



                   The very successful printed version is finally out of stock since 2018.
                




The first run of the printed edition was successfully released in 2014 at the PyCon in Montreal. After that we distributed this excellent showcase of Python to major computing conferences around the world. We were proud to offer to ship the second print run until end of 2016. We have send all our copies to your local events and shows around Python over the whole world. Since then it is still a growing technology that powers the web and science & engineering in both education and production.
Get the PDF file as download!
You can download the Python brochure as the latest updated screen resolution PDF suitable for electronic distribution and is well suited for low resolution printing on A4 as a A5 folded brochure booklet. The original printed issue was 32 pages, A4, full-color.
Quick Read of License and redistribution rules of this PDF: 

You are free to redistribute this PDF to your peers and local community, but please share unchanged copies if possible. See why in the license text on p.30 .
All the text and most images are CC3.0 BY-SA except some images and brands mentioned in the legal text on p.30. 
Update your local PDF files if you are using a version older than the current Release 107 – Thank you. 

 Get the PDF file
 

 
Let's make Python strengths and quality more visible for new audiences!
The Python Software Foundation (PSF) has collected success stories and case studies over the last two years and we've created a beautiful, professional quality printed brochure to promote the usage of Python to audiences which we are currently not reaching well.
We cover business, science, industry, education, media, government, public sector and charity stories.
Our target groups are CIOs and chief developers, scientists and programmers, university lecturers, teachers and students, customers, clients, managers and employees.
We are out of stock after 10,000 printed copies distributed worldwide in the last years.
Until a new edition is planned, you can still get the PDF file as download.
We thank all our Sponsors who make this finally happen!


















           Discover the Brochure
        




 









News




            
            Newsletter #9:  PSF Python Brochure: Get your free copy at PyCon 2015
         
Apr 09, 2015



            
            Newsletter #8: PSF Python Brochure "sold out" - help us kick start the second print run !
         
Feb 04, 2015



            
            Newsletter #7: The Python Brochure is out – Get your copy in Montreal!
         
Apr 10, 2014



            
            Newsletter #6: PSF Python Brochure – Last call for Ad Sponsors
         
Feb 11, 2014



            
            Newsletter #5 – Python Brochure available as PDF preview. Last chance to order your ad!
         
Mar 15, 2013




          More news…
        









           Keep Informed
        



 RSS news feed
 Twitter @pythonbrochure
or subscribe to our email newsletter














Python Software Foundation

Foundation at Python.org





Currently available Releases

PSF Python Brochure Vol. I final Download



Pre Release Media

PyCon US 2011 Flyer


PyCon US 2012 Teaser Booklet





Success Stories

Listing on python.org


Example: ILM



Resources

pythonology.org







Keep Informed

RSS news feed


Follow us on Twitter @pythonbrochure


Feedburner











      Powered by Plone & Python





Site Map
Accessibility
Contact
Imprint











Search:






<!--// Initialize search form
var f = document.getElementById('searchform');
f.getElementsByTagName('label')[0].style.display = 'none';
var e = document.getElementById('searchinput');
searchChange(e);
searchBlur(e);
//-->




Languages



Languages







FrontPageRecentChangesFindPageHelpContentsLanguages



Page
Immutable PageCommentsInfoAttachments


More Actions:

Raw Text
Print View
Delete Cache
------------------------
Check Spelling
Like Pages
Local Site Map
------------------------
Rename Page
Delete Page
------------------------
------------------------
Remove Spam
Revert to this revision
------------------------
SlideShow




<!--// Init menu
actionsMenuInit('More Actions:');
//-->





User
Login




Attempt to have languages and links listed in the native tongue of the user. 2009-09-01 This page's links go to the various languages' pages, most of which have been copied from the other set of language pages, with a few updates.  Ideally, all the pages should be like the Polish or Turkish pages - all native language, only the necessary English. There are some groundrules, some laid down by the site admins, some my suggestions: Pages must be named in ASCII and English (PolishLanguage) Pages must have an explanation in English at the top (Links to Python information in <language X>) (my suggestion) We probably want to limit invites to edit the pages to people we know well, or Pythonistas with a track record.  Hopefully this is inclusive enough without opening the site up to a spam flood and vandalismfest. Where these pages really need help: check links, remove broken ones. add new links that are quality Python information and active. some care for languages that have next to nothing, but do have people in the Python community - even a link to the Wikipedia page for Python, in that language, is a start (Some are pretty complete and of high quality - the Russian language Wikipedia page for Python, for instance, packs a lot in). 
Languages
AfrikaansLanguage Afrikaans AlbanianLanguage Shqip AmharicLanguage አማርኛ ArabicLanguage العربية ArmenianLanguage Հայերեն AssameseLanguage অসমীয়া AzerbaijaniLanguage Azərbaycan dili BelorussianLanguage Беларуская мова BengaliLanguage বাংলা BodoLanguage बड़ो BosnianLanguage bosanski BulgarianLanguage български език BurmeseLanguage မြန်မာဘာသာ CatalanLanguage català ChineseLanguage 漢語 CroatianLanguage hrvatski CzechLanguage čeština DanishLanguage dansk DogriLanguage डोगरी  Devanagari script DutchLanguage Nederlands EsperantoLanguage Esperanto EstonianLanguage eesti keel FinnishLanguage suomi FrenchLanguage français GeorgianLanguage ქართული ენა GermanLanguage Deutsch GreekLanguage Νέα Ελληνικά GujaratiLanguage ગુજરાતી HausaLanguage Hausa HebrewLanguage עִבְרִית HindiLanguage हिन्दी HungarianLanguage magyar nyelv IndonesianLanguage Bahasa Indonesia IcelandicLanguage íslenska IgboLanguage Asụsụ Igbo ItalianLanguage italiano JapaneseLanguage 日本語 KannadaLanguage ಕನ್ನಡ KashmiriLanguage कॉशुर (Koshur) KazakhLanguage Қазақ тілі KhmerLanguage ភាសាខ្មែរ KonkaniLanguage कोंकणी Devangari script KoreanLanguage 한국어/조선말 LaoLanguage ພາສາລາວ LatvianLanguage latviešu valoda LithuanianLanguage lietuvių kalba MalayLanguage Bahasa Melayu MalayalamLanguage മലയാളം MarathiLanguage मराठी MongolianLanguage Монгол хэл NepaliLanguage नेपाली NorwegianLanguage norsk OriyaLanguage ଓଡ଼ିଆ PersianLanguage فارسی PolishLanguage język polski PortugueseLanguage português PunjabiLanguage ਪੰਜਾਬੀ WesternPunjabiLanguage پنجابی RomanianLanguage limba română RussianLanguage русский язык SanskritLanguage संस्कृत SlovakLanguage slovenský jazyk SloveneLanguage slovenščina SerbianLanguage Српски SinhalaLanguage සිංහල SpanishLanguage español SwahiliLanguage Kiswahili SwedishLanguage svenska TagalogLanguage Wikang Tagalog TamilLanguage தமிழ TeluguLanguage తెలుగు ThaiLanguage ภาษาไทย TigrinyaLanguage ትግርኛ TurkishLanguage Türkçe UkranianLanguage украї́нська мо́ва UrduLanguage اُردوُ UzbekLanguage O‘zbek tili VietnameseLanguage tiếng Việt XhosaLanguage isiXhosa ZuluLanguage isiZulu CategoryLanguage CategoryUnicode Languages  (last edited 2014-03-23 04:24:49 by DaleAthanasias)




MoinMoin PoweredPython PoweredGPL licensedValid HTML 4.01


Unable to edit the page? See the FrontPage for instructions.



Notice: While Javascript is not essential for this website, your interaction with the content will be limited. Please turn Javascript on for the full experience. 






Skip to content


▼ Close
                


Python


PSF


Docs


PyPI


Jobs


Community



▲ The Python Network
                









Donate

≡ Menu


Search This Site


                                    GO
                                





A A

Smaller
Larger
Reset






Socialize

Facebook
Twitter
Chat on IRC










About

Applications
Quotes
Getting Started
Help
Python Brochure



Downloads

All releases
Source code
Windows
Mac OS X
Other Platforms
License
Alternative Implementations



Documentation

Docs
Audio/Visual Talks
Beginner's Guide
Developer's Guide
FAQ
Non-English Docs
PEP Index
Python Books
Python Essays



Community

Community Survey
Diversity
Mailing Lists
IRC
Forums
Python Conferences
Special Interest Groups
Python Logo
Python Wiki
Merchandise
Community Awards
Code of Conduct



Success Stories

Arts
Business
Education
Engineering
Government
Scientific
Software Development



News

Python News
Community News
PSF News
PyCon News



Events

Python Events
User Group Events
Python Events Archive
User Group Events Archive
Submit an Event




 









Python>>>


Python Developer's Guide>>>


PEP Index>>>

PEP 0 -- Index of Python Enhancement Proposals (PEPs)


   .pep-page pre {
        padding: .5em;
        background: inherit;
        border-left: 0px;
        -webkit-box-shadow: 0 0 0 0;
        -moz-box-shadow: 0 0 0 0;
        box-shadow: 0 0 0 0;
   }
   .pep-page pre.literal-block {
       background-color: #e6e8ea;
       border: 1px solid #ddd;
       padding: 1em;
       -webkit-box-shadow: 0 0 1em rgba( 0, 0, 0, 0.2 );
       -moz-box-shadow: 0 0 1em rgba( 0, 0, 0, 0.2 );
       box-shadow: 0 0 1em rgba( 0, 0, 0, 0.2 );
   }



PEP 0 -- Index of Python Enhancement Proposals (PEPs)





PEP:0

Title:Index of Python Enhancement Proposals (PEPs)

Last-Modified:2019-04-15

Author:python-dev <python-dev at python.org>

Status:Active

Type:Informational

Created:13-Jul-2000





Contents

Introduction
Index by Category
Meta-PEPs (PEPs about PEPs or Processes)
Other Informational PEPs
Provisional PEPs (provisionally accepted; interface may still change)
Accepted PEPs (accepted; may not be implemented yet)
Open PEPs (under consideration)
Finished PEPs (done, with a stable interface)
Historical Meta-PEPs and Informational PEPs
Deferred PEPs (postponed pending further research or updates)
Abandoned, Withdrawn, and Rejected PEPs


Numerical Index
Reserved PEP Numbers
PEP Types Key
PEP Status Key
Authors/Owners
References



Introduction
This PEP contains the index of all Python Enhancement Proposals,
known as PEPs.  PEP numbers are assigned by the PEP editors, and
once assigned are never changed [1].  The version control history [2] of
the PEP texts represent their historical record.


Index by Category

Meta-PEPs (PEPs about PEPs or Processes)










PEP
PEP Title
PEP Author(s)



P
1
PEP Purpose and Guidelines
Warsaw, Hylton, Goodger, Coghlan

P
4
Deprecation of Standard Modules
Cannon, von Löwis

P
5
Guidelines for Language Evolution
Prescod

P
6
Bug Fix Releases
Aahz, Baxter

P
7
Style Guide for C Code
GvR, Warsaw

P
8
Style Guide for Python Code
GvR, Warsaw, Coghlan

P
10
Voting Guidelines
Warsaw

P
11
Removing support for little used platforms
von Löwis, Cannon

P
12
Sample reStructuredText PEP Template
Goodger, Warsaw





Other Informational PEPs










PEP
PEP Title
PEP Author(s)



I
13
Python Language Governance
and community

I
20
The Zen of Python
Peters

I
101
Doing Python Releases 101
Warsaw, GvR

IF
247
API for Cryptographic Hash Functions
Kuchling

IF
248
Python Database API Specification v1.0
Lemburg

IF
249
Python Database API Specification v2.0
Lemburg

I
257
Docstring Conventions
Goodger, GvR

IF
272
API for Block Encryption Algorithms v1.0
Kuchling

I
287
reStructuredText Docstring Format
Goodger

I
290
Code Migration and Modernization
Hettinger

IF
291
Backward Compatibility for the Python 2 Standard ...
Norwitz

IF
333
Python Web Server Gateway Interface v1.0
Eby

I
373
Python 2.7 Release Schedule
Peterson

I
394
The "python" Command on Unix-Like Systems
Staley, Coghlan, Warsaw, Viktorin

IF
399
Pure Python/C Accelerator Module Compatibility ...
Cannon

IF
404
Python 2.8 Un-release Schedule
Warsaw

I
411
Provisional packages in the Python standard library
Coghlan, Bendersky

I
429
Python 3.4 Release Schedule
Hastings

IF
430
Migrating to Python 3 as the default online ...
Coghlan

I
434
IDLE Enhancement Exception for All Branches
Rovito, Reedy

I
440
Version Identification and Dependency Specification
Coghlan, Stufft

IF
452
API for Cryptographic Hash Functions v2.0
Kuchling, Heimes

I
478
Python 3.5 Release Schedule
Hastings

IF
483
The Theory of Type Hints
GvR, Levkivskyi

I
494
Python 3.6 Release Schedule
Deily

IA
503
Simple Repository API
Stufft

I
508
Dependency specification for Python Software Packages
Collins

I
513
A Platform Tag for Portable Linux Built Distributions
McGibbon, Smith

I
514
Python registration in the Windows registry
Dower

I
537
Python 3.7 Release Schedule
Deily

I
571
The manylinux2010 Platform Tag
Williams, Thomas, Kluyver

IF
3333
Python Web Server Gateway Interface v1.0.1
Eby

I
8000
Python Language Governance Proposal Overview
Warsaw

I
8002
Open Source Governance Survey
Warsaw, Langa, Pitrou, Hellmann, Willing

IA
8016
The Steering Council Model
Smith, Stufft

I
8100
January 2019 steering council election
Smith, III





Provisional PEPs (provisionally accepted; interface may still change)










PEP
PEP Title
PEP Author(s)



SP
484
Type Hints
GvR, Lehtosalo, Langa

SP
517
A build-system independent format for source trees
Smith, Kluyver

SP
518
Specifying Minimum Build System Requirements for ...
Cannon, Smith, Stufft





Accepted PEPs (accepted; may not be implemented yet)










PEP
PEP Title
PEP Author(s)



SA
557
Data Classes
Smith

SA
560
Core support for typing module and generic types
Levkivskyi

SA
561
Distributing and Packaging Type Information
Smith

SA
563
Postponed Evaluation of Annotations
Langa

SA
570
Python Positional-Only Parameters
Hastings, Galindo, Corchero, Weele

SA
572
Assignment Expressions
Angelico, Peters, GvR

SA
3121
Extension Module Initialization and Finalization
von Löwis





Open PEPs (under consideration)










PEP
PEP Title
PEP Author(s)



P
387
Backwards Compatibility Policy
Peterson

S
432
Restructuring the CPython startup sequence
Coghlan

I
457
Syntax For Positional-Only Parameters
Hastings

S
467
Minor API improvements for binary sequences
Coghlan, Furman

I
482
Literature Overview for Type Hints
Langa

P
497
A standard mechanism for backward compatibility
Schofield

S
499
python -m foo should bind ...
Simpson, Angelico, Jevnik

S
533
Deterministic cleanup for iterators
Smith

S
534
Improved Errors for Missing Standard Library Modules
Orsava, Viktorin, Coghlan

S
543
A Unified TLS API for Python
Benfield, Heimes

S
544
Protocols: Structural subtyping (static duck typing)
Levkivskyi, Lehtosalo, Langa

I
551
Security transparency in the Python runtime
Dower

S
554
Multiple Interpreters in the Stdlib
Snow

S
558
Defined semantics for locals()
Coghlan

I
569
Python 3.8 Release Schedule
Langa

S
573
Module State Access from C Extension Methods
Viktorin, Coghlan, Snow, Plch

S
574
Pickle protocol 5 with out-of-band data
Pitrou

S
578
Python Runtime Audit Hooks
Dower

I
579
Refactoring C functions and methods
Demeyer

S
580
The C call protocol
Demeyer

P
581
Using GitHub Issues for CPython
Wijaya

S
582
Python local packages directory
Das, Dower, Stufft, Coghlan

S
584
Add + and - operators to the built-in dict class.
D'Aprano

S
585
Type Hinting Usability Conventions
Langa

S
586
Literal Types
Lee, Levkivskyi, Lehtosalo

S
587
Python Initialization Configuration
Coghlan, Stinner

I
588
Reserved
Warsaw, Mariatta

S
589
TypedDict: Type Hints for Dictionaries with a Fixed ...
Lehtosalo

S
590
Vectorcall: A new calling convention for CPython
Shannon

S
591
Adding a final qualifier to typing
Sullivan, Levkivskyi

I
801
Reserved
Warsaw





Finished PEPs (done, with a stable interface)










PEP
PEP Title
PEP Author(s)



SF
100
Python Unicode Integration
Lemburg

SF
201
Lockstep Iteration
Warsaw

SF
202
List Comprehensions
Warsaw

SF
203
Augmented Assignments
Wouters

SF
205
Weak References
Drake

SF
207
Rich Comparisons
GvR, Ascher

SF
208
Reworking the Coercion Model
Schemenauer, Lemburg

SF
214
Extended Print Statement
Warsaw

SF
217
Display Hook for Interactive Use
Zadka

SF
218
Adding a Built-In Set Object Type
Wilson, Hettinger

SF
221
Import As
Wouters

SF
223
Change the Meaning of \x Escapes
Peters

SF
227
Statically Nested Scopes
Hylton

SF
229
Using Distutils to Build Python
Kuchling

SF
230
Warning Framework
GvR

SF
232
Function Attributes
Warsaw

SF
234
Iterators
Yee, GvR

SF
235
Import on Case-Insensitive Platforms
Peters

SF
236
Back to the __future__
Peters

SF
237
Unifying Long Integers and Integers
Zadka, GvR

SF
238
Changing the Division Operator
Zadka, GvR

SF
241
Metadata for Python Software Packages
Kuchling

SF
250
Using site-packages on Windows
Moore

SF
252
Making Types Look More Like Classes
GvR

SF
253
Subtyping Built-in Types
GvR

SF
255
Simple Generators
Schemenauer, Peters, Hetland

SF
260
Simplify xrange()
GvR

SF
261
Support for "wide" Unicode characters
Prescod

SF
263
Defining Python Source Code Encodings
Lemburg, von Löwis

SF
264
Future statements in simulated shells
Hudson

SF
273
Import Modules from Zip Archives
Ahlstrom

SF
274
Dict Comprehensions
Warsaw

SF
277
Unicode file name support for Windows NT
Hodgson

SF
278
Universal Newline Support
Jansen

SF
279
The enumerate() built-in function
Hettinger

SF
282
A Logging System
Sajip, Mick

SF
285
Adding a bool type
GvR

SF
289
Generator Expressions
Hettinger

SF
292
Simpler String Substitutions
Warsaw

SF
293
Codec Error Handling Callbacks
Dörwald

SF
301
Package Index and Metadata for Distutils
Jones

SF
302
New Import Hooks
JvR, Moore

SF
305
CSV File API
Altis, Cole, McNamara, Montanaro, Wells

SF
307
Extensions to the pickle protocol
GvR, Peters

SF
308
Conditional Expressions
GvR, Hettinger

SF
309
Partial Function Application
Harris

SF
311
Simplified Global Interpreter Lock Acquisition for ...
Hammond

SF
314
Metadata for Python Software Packages v1.1
Kuchling, Jones

SF
318
Decorators for Functions and Methods
Smith

SF
322
Reverse Iteration
Hettinger

SF
324
subprocess - New process module
Astrand

SF
327
Decimal Data Type
Batista

SF
328
Imports: Multi-Line and Absolute/Relative
Aahz

SF
331
Locale-Independent Float/String Conversions
Reis

SF
338
Executing modules as scripts
Coghlan

SF
341
Unifying try-except and try-finally
Brandl

SF
342
Coroutines via Enhanced Generators
GvR, Eby

SF
343
The "with" Statement
GvR, Coghlan

SF
345
Metadata for Python Software Packages 1.2
Jones

SF
352
Required Superclass for Exceptions
Cannon, GvR

SF
353
Using ssize_t as the index type
von Löwis

SF
357
Allowing Any Object to be Used for Slicing
Oliphant

SF
358
The "bytes" Object
Schemenauer, GvR

SF
362
Function Signature Object
Cannon, Seo, Selivanov, Hastings

SF
366
Main module explicit relative imports
Coghlan

SF
370
Per user site-packages directory
Heimes

SF
371
Addition of the multiprocessing package to the ...
Noller, Oudkerk

SF
372
Adding an ordered dictionary to collections
Ronacher, Hettinger

SF
376
Database of Installed Python Distributions
Ziadé

SF
378
Format Specifier for Thousands Separator
Hettinger

SF
380
Syntax for Delegating to a Subgenerator
Ewing

SF
383
Non-decodable Bytes in System Character Interfaces
v. Löwis

SF
384
Defining a Stable ABI
v. Löwis

SF
389
argparse - New Command Line Parsing Module
Bethard

SF
391
Dictionary-Based Configuration For Logging
Sajip

SF
393
Flexible String Representation
v. Löwis

SF
397
Python launcher for Windows
Hammond, v. Löwis

SF
405
Python Virtual Environments
Meyer

SF
409
Suppressing exception context
Furman

SF
412
Key-Sharing Dictionary
Shannon

SF
414
Explicit Unicode Literal for Python 3.3
Ronacher, Coghlan

SF
415
Implement context suppression with exception attributes
Peterson

SF
417
Including mock in the Standard Library
Foord

SF
418
Add monotonic time, performance counter, and ...
Simpson, Jewett, Turnbull, Stinner

SF
420
Implicit Namespace Packages
Smith

SF
421
Adding sys.implementation
Snow

SF
424
A method for exposing a length hint
Gaynor

SF
425
Compatibility Tags for Built Distributions
Holth

SF
427
The Wheel Binary Package Format 1.0
Holth

SF
428
The pathlib module -- object-oriented filesystem paths
Pitrou

SF
435
Adding an Enum type to the Python standard library
Warsaw, Bendersky, Furman

SF
436
The Argument Clinic DSL
Hastings

SF
441
Improving Python ZIP Application Support
Holth, Moore

SF
442
Safe object finalization
Pitrou

SF
443
Single-dispatch generic functions
Langa

SF
445
Add new APIs to customize Python memory allocators
Stinner

SF
446
Make newly created file descriptors non-inheritable
Stinner

SF
448
Additional Unpacking Generalizations
Landau

SF
450
Adding A Statistics Module To The Standard Library
D'Aprano

SF
451
A ModuleSpec Type for the Import System
Snow

SF
453
Explicit bootstrapping of pip in Python installations
Stufft, Coghlan

SF
454
Add a new tracemalloc module to trace Python memory ...
Stinner

SF
456
Secure and interchangeable hash algorithm
Heimes

SF
461
Adding % formatting to bytes and bytearray
Furman

SF
465
A dedicated infix operator for matrix multiplication
Smith

SF
466
Network Security Enhancements for Python 2.7.x
Coghlan

SF
468
Preserving the order of **kwargs in a function.
Snow

SF
471
os.scandir() function -- a better and faster ...
Hoyt

SF
475
Retry system calls failing with EINTR
Natali, Stinner

SF
476
Enabling certificate verification by default for ...
Gaynor

SF
477
Backport ensurepip (PEP 453) to Python 2.7
Stufft, Coghlan

SF
479
Change StopIteration handling inside generators
Angelico, GvR

SF
485
A Function for testing approximate equality
Barker

SF
486
Make the Python Launcher aware of virtual environments
Moore

SF
487
Simpler customisation of class creation
Teichmann

SF
488
Elimination of PYO files
Cannon

SF
489
Multi-phase extension module initialization
Viktorin, Behnel, Coghlan

SF
492
Coroutines with async and await syntax
Selivanov

SF
493
HTTPS verification migration tools for Python 2.7
Coghlan, Kuska, Lemburg

SF
495
Local Time Disambiguation
Belopolsky, Peters

SF
498
Literal String Interpolation
Smith

SF
506
Adding A Secrets Module To The Standard Library
D'Aprano

SF
509
Add a private version to dict
Stinner

SF
515
Underscores in Numeric Literals
Brandl, Storchaka

SF
519
Adding a file system path protocol
Cannon, Zevenhoven

SF
520
Preserving Class Attribute Definition Order
Snow

SF
523
Adding a frame evaluation API to CPython
Cannon, Viehland

SF
524
Make os.urandom() blocking on Linux
Stinner

SF
525
Asynchronous Generators
Selivanov

SF
526
Syntax for Variable Annotations
Gonzalez, House, Levkivskyi, Roach, GvR

SF
528
Change Windows console encoding to UTF-8
Dower

SF
529
Change Windows filesystem encoding to UTF-8
Dower

SF
530
Asynchronous Comprehensions
Selivanov

SF
538
Coercing the legacy C locale to a UTF-8 based locale
Coghlan

SF
539
A New C-API for Thread-Local Storage in CPython
Bray, Yamamoto

SF
540
Add a new UTF-8 Mode
Stinner

SF
552
Deterministic pycs
Peterson

SF
553
Built-in breakpoint()
Warsaw

SF
562
Module __getattr__ and __dir__
Levkivskyi

SF
564
Add new time functions with nanosecond resolution
Stinner

SF
565
Show DeprecationWarning in __main__
Coghlan

SF
566
Metadata for Python Software Packages 2.1
Ingram

SF
567
Context Variables
Selivanov

SF
628
Add math.tau
Coghlan

SF
3101
Advanced String Formatting
Talin

SF
3102
Keyword-Only Arguments
Talin

SF
3104
Access to Names in Outer Scopes
Yee

SF
3105
Make print a function
Brandl

SF
3106
Revamping dict.keys(), .values() and .items()
GvR

SF
3107
Function Annotations
Winter, Lownds

SF
3108
Standard Library Reorganization
Cannon

SF
3109
Raising Exceptions in Python 3000
Winter

SF
3110
Catching Exceptions in Python 3000
Winter

SF
3111
Simple input built-in in Python 3000
Roberge

SF
3112
Bytes literals in Python 3000
Orendorff

SF
3113
Removal of Tuple Parameter Unpacking
Cannon

SF
3114
Renaming iterator.next() to iterator.__next__()
Yee

SF
3115
Metaclasses in Python 3000
Talin

SF
3116
New I/O
Stutzbach, GvR, Verdone

SF
3118
Revising the buffer protocol
Oliphant, Banks

SF
3119
Introducing Abstract Base Classes
GvR, Talin

SF
3120
Using UTF-8 as the default source encoding
von Löwis

SF
3123
Making PyObject_HEAD conform to standard C
von Löwis

SF
3127
Integer Literal Support and Syntax
Maupin

SF
3129
Class Decorators
Winter

SF
3131
Supporting Non-ASCII Identifiers
von Löwis

SF
3132
Extended Iterable Unpacking
Brandl

SF
3134
Exception Chaining and Embedded Tracebacks
Yee

SF
3135
New Super
Spealman, Delaney, Ryan

SF
3137
Immutable Bytes and Mutable Buffer
GvR

SF
3138
String representation in Python 3000
Ishimoto

SF
3141
A Type Hierarchy for Numbers
Yasskin

SF
3144
IP Address Manipulation Library for the Python ...
Moody

SF
3147
PYC Repository Directories
Warsaw

SF
3148
futures - execute computations asynchronously
Quinlan

SF
3149
ABI version tagged .so files
Warsaw

SF
3151
Reworking the OS and IO exception hierarchy
Pitrou

SF
3154
Pickle protocol version 4
Pitrou

SF
3155
Qualified name for classes and functions
Pitrou

SF
3156
Asynchronous IO Support Rebooted: the "asyncio" Module
GvR





Historical Meta-PEPs and Informational PEPs










PEP
PEP Title
PEP Author(s)



PF
2
Procedure for Adding New Modules
Faassen

IF
160
Python 1.6 Release Schedule
Drake

IF
200
Python 2.0 Release Schedule
Hylton

IF
226
Python 2.1 Release Schedule
Hylton

IF
251
Python 2.2 Release Schedule
Warsaw, GvR

IF
283
Python 2.3 Release Schedule
GvR

IF
320
Python 2.4 Release Schedule
Warsaw, Hettinger, Baxter

PF
347
Migrating the Python CVS to Subversion
von Löwis

IF
356
Python 2.5 Release Schedule
Norwitz, GvR, Baxter

PF
360
Externally Maintained Packages
Cannon

IF
361
Python 2.6 and 3.0 Release Schedule
Norwitz, Warsaw

PF
374
Choosing a distributed VCS for the Python project
Cannon, Turnbull, Vassalotti, Warsaw, Ochtman

IF
375
Python 3.1 Release Schedule
Peterson

PF
385
Migrating from Subversion to Mercurial
Ochtman, Pitrou, Brandl

IF
392
Python 3.2 Release Schedule
Brandl

IF
398
Python 3.3 Release Schedule
Brandl

PS
438
Transitioning to release-file hosting on PyPI
Krekel, Meyer

PF
449
Removal of the PyPI Mirror Auto Discovery and ...
Stufft

PF
464
Removal of the PyPI Mirror Authenticity API
Stufft

PF
470
Removing External Hosting Support on PyPI
Stufft

PF
512
Migrating from hg.python.org to GitHub
Cannon

PA
527
Removing Un(der)used file types/extensions on PyPI
Stufft

PF
541
Package Index Name Retention
Langa

PF
545
Python Documentation Translations
Palard, Naoki, Stinner

PF
3000
Python 3000
GvR

PF
3002
Procedure for Backwards-Incompatible Changes
Bethard

PF
3003
Python Language Moratorium
Cannon, Noller, GvR

PF
3099
Things that will Not Change in Python 3000
Brandl

PF
3100
Miscellaneous Python 3.0 Plans
Cannon

PA
8001
Python Governance Voting Process
Cannon, Heimes, Stufft, Snow, Smith, Langa, Wijaya, Smith, Salgado, Hettinger, Einat, Peters, Ware





Deferred PEPs (postponed pending further research or updates)










PEP
PEP Title
PEP Author(s)



SD
213
Attribute Access Handlers
Prescod

SD
219
Stackless Python
McMillan

SD
222
Web Library Enhancements
Kuchling

SD
233
Python Online Help
Prescod

SD
262
A Database of Installed Python Packages
Kuchling

SD
267
Optimized Access to Module Namespaces
Hylton

SD
269
Pgen Module for Python
Riehl

SD
280
Optimizing access to globals
GvR

SD
286
Enhanced Argument Tuples
von Löwis

SD
312
Simple Implicit Lambda
Suzi, Martelli

SD
316
Programming by Contract for Python
Way

SD
323
Copyable Iterators
Martelli

SD
337
Logging Usage in the Standard Library
Dubner

SD
349
Allow str() to return unicode strings
Schemenauer

SD
368
Standard image protocol and class
Mastrodomenico

ID
396
Module Version Numbers
Warsaw

SD
400
Deprecate codecs.StreamReader and codecs.StreamWriter
Stinner

SD
403
General purpose decorator clause (aka "@in" clause)
Coghlan

PD
407
New release cycle and introducing long-term support ...
Pitrou, Brandl, Warsaw

SD
419
Protecting cleanup statements from interruptions
Colomiets

ID
423
Naming conventions and recipes related to packaging
Bryon

ID
444
Python Web3 Interface
McDonough, Ronacher

SD
447
Add __getdescriptor__ method to metaclass
Oussoren

SD
458
Surviving a Compromise of PyPI
Kuppusamy, Diaz, Stufft, Cappos

SD
480
Surviving a Compromise of PyPI: The Maximum ...
Kuppusamy, Diaz, Stufft, Cappos

SD
491
The Wheel Binary Package Format 1.9
Holth

SD
501
General purpose string interpolation
Coghlan

SD
505
None-aware operators
Haase, Dower

SD
532
A circuit breaking protocol and binary operators
Coghlan, Haase

SD
535
Rich comparison chaining
Coghlan

SD
536
Final Grammar for Literal String Interpolation
Angerer

SD
547
Running extension modules using the -m option
Plch, Viktorin

SD
556
Threaded garbage collection
Pitrou

SD
568
Generator-sensitivity for Context Variables
Smith

SD
3124
Overloading, Generic Functions, Interfaces, and ...
Eby

SD
3143
Standard daemon process library
Finney

SD
3150
Statement local namespaces (aka "given" clause)
Coghlan





Abandoned, Withdrawn, and Rejected PEPs










PEP
PEP Title
PEP Author(s)



PW
3
Guidelines for Handling Bug Reports
Hylton

PW
9
Sample Plaintext PEP Template
Warsaw

PR
42
Feature Requests
Hylton

IS
102
Doing Python Micro Releases
Baxter, Warsaw, GvR

IW
103
Collecting information about git
Broytman

SR
204
Range Literals
Wouters

IW
206
Python Advanced Library
Kuchling

SW
209
Multi-dimensional Arrays
Barrett, Oliphant

SR
210
Decoupling the Interpreter Loop
Ascher

SR
211
Adding A New Outer Product Operator
Wilson

SR
212
Loop Counter Iteration
Schneider-Kamp

SS
215
String Interpolation
Yee

IR
216
Docstring Format
Zadka

IR
220
Coroutines, Generators, Continuations
McMillan

SR
224
Attribute Docstrings
Lemburg

SR
225
Elementwise/Objectwise Operators
Zhu, Lielens

SW
228
Reworking Python's Numeric Model
Zadka, GvR

SR
231
__findattr__()
Warsaw

SR
239
Adding a Rational Type to Python
Craig, Zadka

SR
240
Adding a Rational Literal to Python
Craig, Zadka

SR
242
Numeric Kinds
Dubois

SW
243
Module Repository Upload Mechanism
Reifschneider

SR
244
The directive statement
von Löwis

SR
245
Python Interface Syntax
Pelletier

SR
246
Object Adaptation
Martelli, Evans

SR
254
Making Classes Look More Like Types
GvR

SR
256
Docstring Processing System Framework
Goodger

SR
258
Docutils Design Specification
Goodger

SR
259
Omit printing newline after newline
GvR

SR
265
Sorting Dictionaries by Value
Griffin

SW
266
Optimizing Global Variable/Attribute Access
Montanaro

SR
268
Extended HTTP functionality and WebDAV
Stein

SR
270
uniq method for list objects
Petrone

SR
271
Prefixing sys.path by command line option
Giacometti

SR
275
Switching on Multiple Values
Lemburg

SR
276
Simple Iterator for ints
Althoff

SR
281
Loop Counter Iteration with range and xrange
Hetland

SR
284
Integer for-loops
Eppstein, Ewing

SW
288
Generators Attributes and Exceptions
Hettinger

SR
294
Type Names in the types Module
Tirosh

SR
295
Interpretation of multiline string constants
Koltsov

SW
296
Adding a bytes Object Type
Gilbert

SR
297
Support for System Upgrades
Lemburg

SW
298
The Locked Buffer Interface
Heller

SR
299
Special __main__() function in modules
Epler

SR
303
Extend divmod() for Multiple Divisors
Bellman

SW
304
Controlling Generation of Bytecode Files
Montanaro

IW
306
How to Change Python's Grammar
Hudson, Diederich, Coghlan, Peterson

SR
310
Reliable Acquisition/Release Pairs
Hudson, Moore

SR
313
Adding Roman Numeral Literals to Python
Meyer

SR
315
Enhanced While Loop
Hettinger, Carroll

SR
317
Eliminate Implicit Exception Instantiation
Taschuk

SR
319
Python Synchronize/Asynchronize Block
Pelletier

SW
321
Date/Time Parsing and Formatting
Kuchling

SR
325
Resource-Release Support for Generators
Pedroni

SR
326
A Case for Top and Bottom Values
Carlson, Reedy

SR
329
Treating Builtins as Constants in the Standard Library
Hettinger

SR
330
Python Bytecode Verification
Pelletier

SR
332
Byte vectors and String/Unicode Unification
Montanaro

SW
334
Simple Coroutines via SuspendIteration
Evans

SR
335
Overloadable Boolean Operators
Ewing

SR
336
Make None Callable
McClelland

IW
339
Design of the CPython Compiler
Cannon

SR
340
Anonymous Block Statements
GvR

SS
344
Exception Chaining and Embedded Tracebacks
Yee

SW
346
User Defined ("with") Statements
Coghlan

SR
348
Exception Reorganization for Python 3.0
Cannon

IR
350
Codetags
Elliott

SR
351
The freeze protocol
Warsaw

SS
354
Enumerations in Python
Finney

SR
355
Path - Object oriented filesystem paths
Lindqvist

SW
359
The "make" Statement
Bethard

SR
363
Syntax For Dynamic Attribute Access
North

SW
364
Transitioning to the Py3K Standard Library
Warsaw

SR
365
Adding the pkg_resources module
Eby

SS
367
New Super
Spealman, Delaney

SW
369
Post import hooks
Heimes

SR
377
Allow __enter__() methods to skip the statement body
Coghlan

SW
379
Adding an Assignment Expression
Whitley

SW
381
Mirroring infrastructure for PyPI
Ziadé, v. Löwis

SR
382
Namespace Packages
v. Löwis

SS
386
Changing the version comparison module in Distutils
Ziadé

SR
390
Static metadata for Distutils
Ziadé

SW
395
Qualified Names for Modules
Coghlan

PR
401
BDFL Retirement
Warsaw, Cannon

SR
402
Simplified Package Layout and Partitioning
Eby

SW
406
Improved Encapsulation of Import State
Coghlan, Slodkowicz

SR
408
Standard library __preview__ package
Coghlan, Bendersky

SR
410
Use decimal.Decimal type for timestamps
Stinner

PW
413
Faster evolution of the Python Standard Library
Coghlan

SR
416
Add a frozendict builtin type
Stinner

SW
422
Simpler customisation of class creation
Coghlan, Urban

IW
426
Metadata for Python Software Packages 2.0
Coghlan, Holth, Stufft

SW
431
Time zone support improvements
Regebro

SS
433
Easier suppression of file descriptor inheritance
Stinner

SR
437
A DSL for specifying signatures, annotations and ...
Krah

SR
439
Inclusion of implicit pip bootstrap in Python ...
Jones

SR
455
Adding a key-transforming dictionary to collections
Pitrou

SW
459
Standard Metadata Extensions for Python Software ...
Coghlan

SW
460
Add binary interpolation and formatting
Pitrou

PW
462
Core development workflow automation for CPython
Coghlan

SR
463
Exception-catching expressions
Angelico

SW
469
Migration of dict iteration code to Python 3
Coghlan

SR
472
Support for indexing with keyword arguments
Borini, Martinot-Lagarde

SR
473
Adding structured data to built-in exceptions
Kreft

PW
474
Creating forge.python.org
Coghlan

PW
481
Migrate CPython to Git, Github, and Phabricator
Stufft

SR
490
Chain exceptions at C level
Stinner

IR
496
Environment Markers
Polley

SR
500
A protocol for delegating datetime methods to their ...
Belopolsky, Peters

IR
502
String Interpolation - Extended Discussion
Miller

SW
504
Using the System RNG by default
Coghlan

PR
507
Migrate CPython to Git and GitLab
Warsaw

SR
510
Specialize functions with guards
Stinner

SR
511
API for code transformers
Stinner

SR
516
Build system abstraction for pip/conda etc
Collins, Smith

SW
521
Managing global context via 'with' blocks in ...
Smith

SR
522
Allow BlockingIOError in security sensitive APIs
Coghlan, Smith

SW
531
Existence checking operators
Coghlan

SR
542
Dot Notation Assignment In Function Header
Meskanen

SR
546
Backport ssl.MemoryBIO and ssl.SSLObject to Python 2.7
Stinner, Benfield

SR
548
More Flexible Loop Control
Murray

SR
549
Instance Descriptors
Hastings

SW
550
Execution Context
Selivanov, Pranskevichus

SW
555
Context-local variables (contextvars)
Zevenhoven

SR
559
Built-in noop()
Warsaw

SW
575
Unifying function/method classes
Demeyer

SW
576
Rationalize Built-in function classes
Shannon

SW
577
Augmented Assignment Expressions
Coghlan

IW
583
A Concurrency Memory Model for Python
Yasskin

SR
666
Reject Foolish Indentation
Creighton

SR
754
IEEE 754 Floating Point Special Values
Warnes

PW
3001
Procedure for reviewing and improving standard ...
Brandl

SR
3103
A Switch/Case Statement
GvR

SR
3117
Postfix type declarations
Brandl

SR
3122
Delineation of the main module
Cannon

SR
3125
Remove Backslash Continuation
Jewett

SR
3126
Remove Implicit String Concatenation
Jewett, Hettinger

SR
3128
BList: A Faster List-like Type
Stutzbach

SR
3130
Access to Current Module/Class/Function
Jewett

SR
3133
Introducing Roles
Winter

SR
3136
Labeled break and continue
Chisholm

SR
3139
Cleaning out sys and the "interpreter" module
Peterson

SR
3140
str(container) should call str(item), not repr(item)
Broytman, Jewett

SR
3142
Add a "while" clause to generator expressions
Britton

SW
3145
Asynchronous I/O For subprocess.Popen
Pruitt, McCreary, Carlson

SW
3146
Merging Unladen Swallow into CPython
Winter, Yasskin, Kleckner

SR
3152
Cofunctions
Ewing

SS
3153
Asynchronous IO support
Houtven

IR
8010
The Technical Leader Governance Model
Warsaw

IR
8011
Python Governance Model Lead by Trio of Pythonistas
Wijaya, Warsaw

IR
8012
The Community Governance Model
Langa

IR
8013
The External Council Governance Model
Dower

IR
8014
The Commons Governance Model
Jansen

IR
8015
Organization of the Python community
Stinner






Numerical Index










PEP
PEP Title
PEP Author(s)



P
1
PEP Purpose and Guidelines
Warsaw, Hylton, Goodger, Coghlan

PF
2
Procedure for Adding New Modules
Faassen

PW
3
Guidelines for Handling Bug Reports
Hylton

P
4
Deprecation of Standard Modules
Cannon, von Löwis

P
5
Guidelines for Language Evolution
Prescod

P
6
Bug Fix Releases
Aahz, Baxter

P
7
Style Guide for C Code
GvR, Warsaw

P
8
Style Guide for Python Code
GvR, Warsaw, Coghlan

PW
9
Sample Plaintext PEP Template
Warsaw

P
10
Voting Guidelines
Warsaw

P
11
Removing support for little used platforms
von Löwis, Cannon

P
12
Sample reStructuredText PEP Template
Goodger, Warsaw

I
13
Python Language Governance
and community

I
20
The Zen of Python
Peters

PR
42
Feature Requests
Hylton

SF
100
Python Unicode Integration
Lemburg

I
101
Doing Python Releases 101
Warsaw, GvR

IS
102
Doing Python Micro Releases
Baxter, Warsaw, GvR

IW
103
Collecting information about git
Broytman

IF
160
Python 1.6 Release Schedule
Drake

IF
200
Python 2.0 Release Schedule
Hylton

SF
201
Lockstep Iteration
Warsaw

SF
202
List Comprehensions
Warsaw

SF
203
Augmented Assignments
Wouters

SR
204
Range Literals
Wouters

SF
205
Weak References
Drake

IW
206
Python Advanced Library
Kuchling

SF
207
Rich Comparisons
GvR, Ascher

SF
208
Reworking the Coercion Model
Schemenauer, Lemburg

SW
209
Multi-dimensional Arrays
Barrett, Oliphant

SR
210
Decoupling the Interpreter Loop
Ascher

SR
211
Adding A New Outer Product Operator
Wilson

SR
212
Loop Counter Iteration
Schneider-Kamp

SD
213
Attribute Access Handlers
Prescod

SF
214
Extended Print Statement
Warsaw

SS
215
String Interpolation
Yee

IR
216
Docstring Format
Zadka

SF
217
Display Hook for Interactive Use
Zadka

SF
218
Adding a Built-In Set Object Type
Wilson, Hettinger

SD
219
Stackless Python
McMillan

IR
220
Coroutines, Generators, Continuations
McMillan

SF
221
Import As
Wouters

SD
222
Web Library Enhancements
Kuchling

SF
223
Change the Meaning of \x Escapes
Peters

SR
224
Attribute Docstrings
Lemburg

SR
225
Elementwise/Objectwise Operators
Zhu, Lielens

IF
226
Python 2.1 Release Schedule
Hylton

SF
227
Statically Nested Scopes
Hylton

SW
228
Reworking Python's Numeric Model
Zadka, GvR

SF
229
Using Distutils to Build Python
Kuchling

SF
230
Warning Framework
GvR

SR
231
__findattr__()
Warsaw

SF
232
Function Attributes
Warsaw

SD
233
Python Online Help
Prescod

SF
234
Iterators
Yee, GvR

SF
235
Import on Case-Insensitive Platforms
Peters

SF
236
Back to the __future__
Peters

SF
237
Unifying Long Integers and Integers
Zadka, GvR

SF
238
Changing the Division Operator
Zadka, GvR

SR
239
Adding a Rational Type to Python
Craig, Zadka

SR
240
Adding a Rational Literal to Python
Craig, Zadka

SF
241
Metadata for Python Software Packages
Kuchling

SR
242
Numeric Kinds
Dubois

SW
243
Module Repository Upload Mechanism
Reifschneider

SR
244
The directive statement
von Löwis

SR
245
Python Interface Syntax
Pelletier

SR
246
Object Adaptation
Martelli, Evans

IF
247
API for Cryptographic Hash Functions
Kuchling

IF
248
Python Database API Specification v1.0
Lemburg

IF
249
Python Database API Specification v2.0
Lemburg

SF
250
Using site-packages on Windows
Moore

IF
251
Python 2.2 Release Schedule
Warsaw, GvR

SF
252
Making Types Look More Like Classes
GvR

SF
253
Subtyping Built-in Types
GvR

SR
254
Making Classes Look More Like Types
GvR

SF
255
Simple Generators
Schemenauer, Peters, Hetland

SR
256
Docstring Processing System Framework
Goodger

I
257
Docstring Conventions
Goodger, GvR

SR
258
Docutils Design Specification
Goodger

SR
259
Omit printing newline after newline
GvR

SF
260
Simplify xrange()
GvR

SF
261
Support for "wide" Unicode characters
Prescod

SD
262
A Database of Installed Python Packages
Kuchling

SF
263
Defining Python Source Code Encodings
Lemburg, von Löwis

SF
264
Future statements in simulated shells
Hudson

SR
265
Sorting Dictionaries by Value
Griffin

SW
266
Optimizing Global Variable/Attribute Access
Montanaro

SD
267
Optimized Access to Module Namespaces
Hylton

SR
268
Extended HTTP functionality and WebDAV
Stein

SD
269
Pgen Module for Python
Riehl

SR
270
uniq method for list objects
Petrone

SR
271
Prefixing sys.path by command line option
Giacometti

IF
272
API for Block Encryption Algorithms v1.0
Kuchling

SF
273
Import Modules from Zip Archives
Ahlstrom

SF
274
Dict Comprehensions
Warsaw

SR
275
Switching on Multiple Values
Lemburg

SR
276
Simple Iterator for ints
Althoff

SF
277
Unicode file name support for Windows NT
Hodgson

SF
278
Universal Newline Support
Jansen

SF
279
The enumerate() built-in function
Hettinger

SD
280
Optimizing access to globals
GvR

SR
281
Loop Counter Iteration with range and xrange
Hetland

SF
282
A Logging System
Sajip, Mick

IF
283
Python 2.3 Release Schedule
GvR

SR
284
Integer for-loops
Eppstein, Ewing

SF
285
Adding a bool type
GvR

SD
286
Enhanced Argument Tuples
von Löwis

I
287
reStructuredText Docstring Format
Goodger

SW
288
Generators Attributes and Exceptions
Hettinger

SF
289
Generator Expressions
Hettinger

I
290
Code Migration and Modernization
Hettinger

IF
291
Backward Compatibility for the Python 2 Standard ...
Norwitz

SF
292
Simpler String Substitutions
Warsaw

SF
293
Codec Error Handling Callbacks
Dörwald

SR
294
Type Names in the types Module
Tirosh

SR
295
Interpretation of multiline string constants
Koltsov

SW
296
Adding a bytes Object Type
Gilbert

SR
297
Support for System Upgrades
Lemburg

SW
298
The Locked Buffer Interface
Heller

SR
299
Special __main__() function in modules
Epler

SF
301
Package Index and Metadata for Distutils
Jones

SF
302
New Import Hooks
JvR, Moore

SR
303
Extend divmod() for Multiple Divisors
Bellman

SW
304
Controlling Generation of Bytecode Files
Montanaro

SF
305
CSV File API
Altis, Cole, McNamara, Montanaro, Wells

IW
306
How to Change Python's Grammar
Hudson, Diederich, Coghlan, Peterson

SF
307
Extensions to the pickle protocol
GvR, Peters

SF
308
Conditional Expressions
GvR, Hettinger

SF
309
Partial Function Application
Harris

SR
310
Reliable Acquisition/Release Pairs
Hudson, Moore

SF
311
Simplified Global Interpreter Lock Acquisition for ...
Hammond

SD
312
Simple Implicit Lambda
Suzi, Martelli

SR
313
Adding Roman Numeral Literals to Python
Meyer

SF
314
Metadata for Python Software Packages v1.1
Kuchling, Jones

SR
315
Enhanced While Loop
Hettinger, Carroll

SD
316
Programming by Contract for Python
Way

SR
317
Eliminate Implicit Exception Instantiation
Taschuk

SF
318
Decorators for Functions and Methods
Smith

SR
319
Python Synchronize/Asynchronize Block
Pelletier

IF
320
Python 2.4 Release Schedule
Warsaw, Hettinger, Baxter

SW
321
Date/Time Parsing and Formatting
Kuchling

SF
322
Reverse Iteration
Hettinger

SD
323
Copyable Iterators
Martelli

SF
324
subprocess - New process module
Astrand

SR
325
Resource-Release Support for Generators
Pedroni

SR
326
A Case for Top and Bottom Values
Carlson, Reedy

SF
327
Decimal Data Type
Batista

SF
328
Imports: Multi-Line and Absolute/Relative
Aahz

SR
329
Treating Builtins as Constants in the Standard Library
Hettinger

SR
330
Python Bytecode Verification
Pelletier

SF
331
Locale-Independent Float/String Conversions
Reis

SR
332
Byte vectors and String/Unicode Unification
Montanaro

IF
333
Python Web Server Gateway Interface v1.0
Eby

SW
334
Simple Coroutines via SuspendIteration
Evans

SR
335
Overloadable Boolean Operators
Ewing

SR
336
Make None Callable
McClelland

SD
337
Logging Usage in the Standard Library
Dubner

SF
338
Executing modules as scripts
Coghlan

IW
339
Design of the CPython Compiler
Cannon

SR
340
Anonymous Block Statements
GvR

SF
341
Unifying try-except and try-finally
Brandl

SF
342
Coroutines via Enhanced Generators
GvR, Eby

SF
343
The "with" Statement
GvR, Coghlan

SS
344
Exception Chaining and Embedded Tracebacks
Yee

SF
345
Metadata for Python Software Packages 1.2
Jones

SW
346
User Defined ("with") Statements
Coghlan

PF
347
Migrating the Python CVS to Subversion
von Löwis

SR
348
Exception Reorganization for Python 3.0
Cannon

SD
349
Allow str() to return unicode strings
Schemenauer

IR
350
Codetags
Elliott

SR
351
The freeze protocol
Warsaw

SF
352
Required Superclass for Exceptions
Cannon, GvR

SF
353
Using ssize_t as the index type
von Löwis

SS
354
Enumerations in Python
Finney

SR
355
Path - Object oriented filesystem paths
Lindqvist

IF
356
Python 2.5 Release Schedule
Norwitz, GvR, Baxter

SF
357
Allowing Any Object to be Used for Slicing
Oliphant

SF
358
The "bytes" Object
Schemenauer, GvR

SW
359
The "make" Statement
Bethard

PF
360
Externally Maintained Packages
Cannon

IF
361
Python 2.6 and 3.0 Release Schedule
Norwitz, Warsaw

SF
362
Function Signature Object
Cannon, Seo, Selivanov, Hastings

SR
363
Syntax For Dynamic Attribute Access
North

SW
364
Transitioning to the Py3K Standard Library
Warsaw

SR
365
Adding the pkg_resources module
Eby

SF
366
Main module explicit relative imports
Coghlan

SS
367
New Super
Spealman, Delaney

SD
368
Standard image protocol and class
Mastrodomenico

SW
369
Post import hooks
Heimes

SF
370
Per user site-packages directory
Heimes

SF
371
Addition of the multiprocessing package to the ...
Noller, Oudkerk

SF
372
Adding an ordered dictionary to collections
Ronacher, Hettinger

I
373
Python 2.7 Release Schedule
Peterson

PF
374
Choosing a distributed VCS for the Python project
Cannon, Turnbull, Vassalotti, Warsaw, Ochtman

IF
375
Python 3.1 Release Schedule
Peterson

SF
376
Database of Installed Python Distributions
Ziadé

SR
377
Allow __enter__() methods to skip the statement body
Coghlan

SF
378
Format Specifier for Thousands Separator
Hettinger

SW
379
Adding an Assignment Expression
Whitley

SF
380
Syntax for Delegating to a Subgenerator
Ewing

SW
381
Mirroring infrastructure for PyPI
Ziadé, v. Löwis

SR
382
Namespace Packages
v. Löwis

SF
383
Non-decodable Bytes in System Character Interfaces
v. Löwis

SF
384
Defining a Stable ABI
v. Löwis

PF
385
Migrating from Subversion to Mercurial
Ochtman, Pitrou, Brandl

SS
386
Changing the version comparison module in Distutils
Ziadé

P
387
Backwards Compatibility Policy
Peterson

SF
389
argparse - New Command Line Parsing Module
Bethard

SR
390
Static metadata for Distutils
Ziadé

SF
391
Dictionary-Based Configuration For Logging
Sajip

IF
392
Python 3.2 Release Schedule
Brandl

SF
393
Flexible String Representation
v. Löwis

I
394
The "python" Command on Unix-Like Systems
Staley, Coghlan, Warsaw, Viktorin

SW
395
Qualified Names for Modules
Coghlan

ID
396
Module Version Numbers
Warsaw

SF
397
Python launcher for Windows
Hammond, v. Löwis

IF
398
Python 3.3 Release Schedule
Brandl

IF
399
Pure Python/C Accelerator Module Compatibility ...
Cannon

SD
400
Deprecate codecs.StreamReader and codecs.StreamWriter
Stinner

PR
401
BDFL Retirement
Warsaw, Cannon

SR
402
Simplified Package Layout and Partitioning
Eby

SD
403
General purpose decorator clause (aka "@in" clause)
Coghlan

IF
404
Python 2.8 Un-release Schedule
Warsaw

SF
405
Python Virtual Environments
Meyer

SW
406
Improved Encapsulation of Import State
Coghlan, Slodkowicz

PD
407
New release cycle and introducing long-term support ...
Pitrou, Brandl, Warsaw

SR
408
Standard library __preview__ package
Coghlan, Bendersky

SF
409
Suppressing exception context
Furman

SR
410
Use decimal.Decimal type for timestamps
Stinner

I
411
Provisional packages in the Python standard library
Coghlan, Bendersky

SF
412
Key-Sharing Dictionary
Shannon

PW
413
Faster evolution of the Python Standard Library
Coghlan

SF
414
Explicit Unicode Literal for Python 3.3
Ronacher, Coghlan

SF
415
Implement context suppression with exception attributes
Peterson

SR
416
Add a frozendict builtin type
Stinner

SF
417
Including mock in the Standard Library
Foord

SF
418
Add monotonic time, performance counter, and ...
Simpson, Jewett, Turnbull, Stinner

SD
419
Protecting cleanup statements from interruptions
Colomiets

SF
420
Implicit Namespace Packages
Smith

SF
421
Adding sys.implementation
Snow

SW
422
Simpler customisation of class creation
Coghlan, Urban

ID
423
Naming conventions and recipes related to packaging
Bryon

SF
424
A method for exposing a length hint
Gaynor

SF
425
Compatibility Tags for Built Distributions
Holth

IW
426
Metadata for Python Software Packages 2.0
Coghlan, Holth, Stufft

SF
427
The Wheel Binary Package Format 1.0
Holth

SF
428
The pathlib module -- object-oriented filesystem paths
Pitrou

I
429
Python 3.4 Release Schedule
Hastings

IF
430
Migrating to Python 3 as the default online ...
Coghlan

SW
431
Time zone support improvements
Regebro

S
432
Restructuring the CPython startup sequence
Coghlan

SS
433
Easier suppression of file descriptor inheritance
Stinner

I
434
IDLE Enhancement Exception for All Branches
Rovito, Reedy

SF
435
Adding an Enum type to the Python standard library
Warsaw, Bendersky, Furman

SF
436
The Argument Clinic DSL
Hastings

SR
437
A DSL for specifying signatures, annotations and ...
Krah

PS
438
Transitioning to release-file hosting on PyPI
Krekel, Meyer

SR
439
Inclusion of implicit pip bootstrap in Python ...
Jones

I
440
Version Identification and Dependency Specification
Coghlan, Stufft

SF
441
Improving Python ZIP Application Support
Holth, Moore

SF
442
Safe object finalization
Pitrou

SF
443
Single-dispatch generic functions
Langa

ID
444
Python Web3 Interface
McDonough, Ronacher

SF
445
Add new APIs to customize Python memory allocators
Stinner

SF
446
Make newly created file descriptors non-inheritable
Stinner

SD
447
Add __getdescriptor__ method to metaclass
Oussoren

SF
448
Additional Unpacking Generalizations
Landau

PF
449
Removal of the PyPI Mirror Auto Discovery and ...
Stufft

SF
450
Adding A Statistics Module To The Standard Library
D'Aprano

SF
451
A ModuleSpec Type for the Import System
Snow

IF
452
API for Cryptographic Hash Functions v2.0
Kuchling, Heimes

SF
453
Explicit bootstrapping of pip in Python installations
Stufft, Coghlan

SF
454
Add a new tracemalloc module to trace Python memory ...
Stinner

SR
455
Adding a key-transforming dictionary to collections
Pitrou

SF
456
Secure and interchangeable hash algorithm
Heimes

I
457
Syntax For Positional-Only Parameters
Hastings

SD
458
Surviving a Compromise of PyPI
Kuppusamy, Diaz, Stufft, Cappos

SW
459
Standard Metadata Extensions for Python Software ...
Coghlan

SW
460
Add binary interpolation and formatting
Pitrou

SF
461
Adding % formatting to bytes and bytearray
Furman

PW
462
Core development workflow automation for CPython
Coghlan

SR
463
Exception-catching expressions
Angelico

PF
464
Removal of the PyPI Mirror Authenticity API
Stufft

SF
465
A dedicated infix operator for matrix multiplication
Smith

SF
466
Network Security Enhancements for Python 2.7.x
Coghlan

S
467
Minor API improvements for binary sequences
Coghlan, Furman

SF
468
Preserving the order of **kwargs in a function.
Snow

SW
469
Migration of dict iteration code to Python 3
Coghlan

PF
470
Removing External Hosting Support on PyPI
Stufft

SF
471
os.scandir() function -- a better and faster ...
Hoyt

SR
472
Support for indexing with keyword arguments
Borini, Martinot-Lagarde

SR
473
Adding structured data to built-in exceptions
Kreft

PW
474
Creating forge.python.org
Coghlan

SF
475
Retry system calls failing with EINTR
Natali, Stinner

SF
476
Enabling certificate verification by default for ...
Gaynor

SF
477
Backport ensurepip (PEP 453) to Python 2.7
Stufft, Coghlan

I
478
Python 3.5 Release Schedule
Hastings

SF
479
Change StopIteration handling inside generators
Angelico, GvR

SD
480
Surviving a Compromise of PyPI: The Maximum ...
Kuppusamy, Diaz, Stufft, Cappos

PW
481
Migrate CPython to Git, Github, and Phabricator
Stufft

I
482
Literature Overview for Type Hints
Langa

IF
483
The Theory of Type Hints
GvR, Levkivskyi

SP
484
Type Hints
GvR, Lehtosalo, Langa

SF
485
A Function for testing approximate equality
Barker

SF
486
Make the Python Launcher aware of virtual environments
Moore

SF
487
Simpler customisation of class creation
Teichmann

SF
488
Elimination of PYO files
Cannon

SF
489
Multi-phase extension module initialization
Viktorin, Behnel, Coghlan

SR
490
Chain exceptions at C level
Stinner

SD
491
The Wheel Binary Package Format 1.9
Holth

SF
492
Coroutines with async and await syntax
Selivanov

SF
493
HTTPS verification migration tools for Python 2.7
Coghlan, Kuska, Lemburg

I
494
Python 3.6 Release Schedule
Deily

SF
495
Local Time Disambiguation
Belopolsky, Peters

IR
496
Environment Markers
Polley

P
497
A standard mechanism for backward compatibility
Schofield

SF
498
Literal String Interpolation
Smith

S
499
python -m foo should bind ...
Simpson, Angelico, Jevnik

SR
500
A protocol for delegating datetime methods to their ...
Belopolsky, Peters

SD
501
General purpose string interpolation
Coghlan

IR
502
String Interpolation - Extended Discussion
Miller

IA
503
Simple Repository API
Stufft

SW
504
Using the System RNG by default
Coghlan

SD
505
None-aware operators
Haase, Dower

SF
506
Adding A Secrets Module To The Standard Library
D'Aprano

PR
507
Migrate CPython to Git and GitLab
Warsaw

I
508
Dependency specification for Python Software Packages
Collins

SF
509
Add a private version to dict
Stinner

SR
510
Specialize functions with guards
Stinner

SR
511
API for code transformers
Stinner

PF
512
Migrating from hg.python.org to GitHub
Cannon

I
513
A Platform Tag for Portable Linux Built Distributions
McGibbon, Smith

I
514
Python registration in the Windows registry
Dower

SF
515
Underscores in Numeric Literals
Brandl, Storchaka

SR
516
Build system abstraction for pip/conda etc
Collins, Smith

SP
517
A build-system independent format for source trees
Smith, Kluyver

SP
518
Specifying Minimum Build System Requirements for ...
Cannon, Smith, Stufft

SF
519
Adding a file system path protocol
Cannon, Zevenhoven

SF
520
Preserving Class Attribute Definition Order
Snow

SW
521
Managing global context via 'with' blocks in ...
Smith

SR
522
Allow BlockingIOError in security sensitive APIs
Coghlan, Smith

SF
523
Adding a frame evaluation API to CPython
Cannon, Viehland

SF
524
Make os.urandom() blocking on Linux
Stinner

SF
525
Asynchronous Generators
Selivanov

SF
526
Syntax for Variable Annotations
Gonzalez, House, Levkivskyi, Roach, GvR

PA
527
Removing Un(der)used file types/extensions on PyPI
Stufft

SF
528
Change Windows console encoding to UTF-8
Dower

SF
529
Change Windows filesystem encoding to UTF-8
Dower

SF
530
Asynchronous Comprehensions
Selivanov

SW
531
Existence checking operators
Coghlan

SD
532
A circuit breaking protocol and binary operators
Coghlan, Haase

S
533
Deterministic cleanup for iterators
Smith

S
534
Improved Errors for Missing Standard Library Modules
Orsava, Viktorin, Coghlan

SD
535
Rich comparison chaining
Coghlan

SD
536
Final Grammar for Literal String Interpolation
Angerer

I
537
Python 3.7 Release Schedule
Deily

SF
538
Coercing the legacy C locale to a UTF-8 based locale
Coghlan

SF
539
A New C-API for Thread-Local Storage in CPython
Bray, Yamamoto

SF
540
Add a new UTF-8 Mode
Stinner

PF
541
Package Index Name Retention
Langa

SR
542
Dot Notation Assignment In Function Header
Meskanen

S
543
A Unified TLS API for Python
Benfield, Heimes

S
544
Protocols: Structural subtyping (static duck typing)
Levkivskyi, Lehtosalo, Langa

PF
545
Python Documentation Translations
Palard, Naoki, Stinner

SR
546
Backport ssl.MemoryBIO and ssl.SSLObject to Python 2.7
Stinner, Benfield

SD
547
Running extension modules using the -m option
Plch, Viktorin

SR
548
More Flexible Loop Control
Murray

SR
549
Instance Descriptors
Hastings

SW
550
Execution Context
Selivanov, Pranskevichus

I
551
Security transparency in the Python runtime
Dower

SF
552
Deterministic pycs
Peterson

SF
553
Built-in breakpoint()
Warsaw

S
554
Multiple Interpreters in the Stdlib
Snow

SW
555
Context-local variables (contextvars)
Zevenhoven

SD
556
Threaded garbage collection
Pitrou

SA
557
Data Classes
Smith

S
558
Defined semantics for locals()
Coghlan

SR
559
Built-in noop()
Warsaw

SA
560
Core support for typing module and generic types
Levkivskyi

SA
561
Distributing and Packaging Type Information
Smith

SF
562
Module __getattr__ and __dir__
Levkivskyi

SA
563
Postponed Evaluation of Annotations
Langa

SF
564
Add new time functions with nanosecond resolution
Stinner

SF
565
Show DeprecationWarning in __main__
Coghlan

SF
566
Metadata for Python Software Packages 2.1
Ingram

SF
567
Context Variables
Selivanov

SD
568
Generator-sensitivity for Context Variables
Smith

I
569
Python 3.8 Release Schedule
Langa

SA
570
Python Positional-Only Parameters
Hastings, Galindo, Corchero, Weele

I
571
The manylinux2010 Platform Tag
Williams, Thomas, Kluyver

SA
572
Assignment Expressions
Angelico, Peters, GvR

S
573
Module State Access from C Extension Methods
Viktorin, Coghlan, Snow, Plch

S
574
Pickle protocol 5 with out-of-band data
Pitrou

SW
575
Unifying function/method classes
Demeyer

SW
576
Rationalize Built-in function classes
Shannon

SW
577
Augmented Assignment Expressions
Coghlan

S
578
Python Runtime Audit Hooks
Dower

I
579
Refactoring C functions and methods
Demeyer

S
580
The C call protocol
Demeyer

P
581
Using GitHub Issues for CPython
Wijaya

S
582
Python local packages directory
Das, Dower, Stufft, Coghlan

IW
583
A Concurrency Memory Model for Python
Yasskin

S
584
Add + and - operators to the built-in dict class.
D'Aprano

S
585
Type Hinting Usability Conventions
Langa

S
586
Literal Types
Lee, Levkivskyi, Lehtosalo

S
587
Python Initialization Configuration
Coghlan, Stinner

I
588
Reserved
Warsaw, Mariatta

S
589
TypedDict: Type Hints for Dictionaries with a Fixed ...
Lehtosalo

S
590
Vectorcall: A new calling convention for CPython
Shannon

S
591
Adding a final qualifier to typing
Sullivan, Levkivskyi

SF
628
Add math.tau
Coghlan

SR
666
Reject Foolish Indentation
Creighton

SR
754
IEEE 754 Floating Point Special Values
Warnes

I
801
Reserved
Warsaw

PF
3000
Python 3000
GvR

PW
3001
Procedure for reviewing and improving standard ...
Brandl

PF
3002
Procedure for Backwards-Incompatible Changes
Bethard

PF
3003
Python Language Moratorium
Cannon, Noller, GvR

PF
3099
Things that will Not Change in Python 3000
Brandl

PF
3100
Miscellaneous Python 3.0 Plans
Cannon

SF
3101
Advanced String Formatting
Talin

SF
3102
Keyword-Only Arguments
Talin

SR
3103
A Switch/Case Statement
GvR

SF
3104
Access to Names in Outer Scopes
Yee

SF
3105
Make print a function
Brandl

SF
3106
Revamping dict.keys(), .values() and .items()
GvR

SF
3107
Function Annotations
Winter, Lownds

SF
3108
Standard Library Reorganization
Cannon

SF
3109
Raising Exceptions in Python 3000
Winter

SF
3110
Catching Exceptions in Python 3000
Winter

SF
3111
Simple input built-in in Python 3000
Roberge

SF
3112
Bytes literals in Python 3000
Orendorff

SF
3113
Removal of Tuple Parameter Unpacking
Cannon

SF
3114
Renaming iterator.next() to iterator.__next__()
Yee

SF
3115
Metaclasses in Python 3000
Talin

SF
3116
New I/O
Stutzbach, GvR, Verdone

SR
3117
Postfix type declarations
Brandl

SF
3118
Revising the buffer protocol
Oliphant, Banks

SF
3119
Introducing Abstract Base Classes
GvR, Talin

SF
3120
Using UTF-8 as the default source encoding
von Löwis

SA
3121
Extension Module Initialization and Finalization
von Löwis

SR
3122
Delineation of the main module
Cannon

SF
3123
Making PyObject_HEAD conform to standard C
von Löwis

SD
3124
Overloading, Generic Functions, Interfaces, and ...
Eby

SR
3125
Remove Backslash Continuation
Jewett

SR
3126
Remove Implicit String Concatenation
Jewett, Hettinger

SF
3127
Integer Literal Support and Syntax
Maupin

SR
3128
BList: A Faster List-like Type
Stutzbach

SF
3129
Class Decorators
Winter

SR
3130
Access to Current Module/Class/Function
Jewett

SF
3131
Supporting Non-ASCII Identifiers
von Löwis

SF
3132
Extended Iterable Unpacking
Brandl

SR
3133
Introducing Roles
Winter

SF
3134
Exception Chaining and Embedded Tracebacks
Yee

SF
3135
New Super
Spealman, Delaney, Ryan

SR
3136
Labeled break and continue
Chisholm

SF
3137
Immutable Bytes and Mutable Buffer
GvR

SF
3138
String representation in Python 3000
Ishimoto

SR
3139
Cleaning out sys and the "interpreter" module
Peterson

SR
3140
str(container) should call str(item), not repr(item)
Broytman, Jewett

SF
3141
A Type Hierarchy for Numbers
Yasskin

SR
3142
Add a "while" clause to generator expressions
Britton

SD
3143
Standard daemon process library
Finney

SF
3144
IP Address Manipulation Library for the Python ...
Moody

SW
3145
Asynchronous I/O For subprocess.Popen
Pruitt, McCreary, Carlson

SW
3146
Merging Unladen Swallow into CPython
Winter, Yasskin, Kleckner

SF
3147
PYC Repository Directories
Warsaw

SF
3148
futures - execute computations asynchronously
Quinlan

SF
3149
ABI version tagged .so files
Warsaw

SD
3150
Statement local namespaces (aka "given" clause)
Coghlan

SF
3151
Reworking the OS and IO exception hierarchy
Pitrou

SR
3152
Cofunctions
Ewing

SS
3153
Asynchronous IO support
Houtven

SF
3154
Pickle protocol version 4
Pitrou

SF
3155
Qualified name for classes and functions
Pitrou

SF
3156
Asynchronous IO Support Rebooted: the "asyncio" Module
GvR

IF
3333
Python Web Server Gateway Interface v1.0.1
Eby

I
8000
Python Language Governance Proposal Overview
Warsaw

PA
8001
Python Governance Voting Process
Cannon, Heimes, Stufft, Snow, Smith, Langa, Wijaya, Smith, Salgado, Hettinger, Einat, Peters, Ware

I
8002
Open Source Governance Survey
Warsaw, Langa, Pitrou, Hellmann, Willing

IR
8010
The Technical Leader Governance Model
Warsaw

IR
8011
Python Governance Model Lead by Trio of Pythonistas
Wijaya, Warsaw

IR
8012
The Community Governance Model
Langa

IR
8013
The External Council Governance Model
Dower

IR
8014
The Commons Governance Model
Jansen

IR
8015
Organization of the Python community
Stinner

IA
8016
The Steering Council Model
Smith, Stufft

I
8100
January 2019 steering council election
Smith, III





Reserved PEP Numbers










PEP
PEP Title
PEP Author(s)





801
RESERVED
Warsaw





PEP Types Key

I - Informational PEP
P - Process PEP
S - Standards Track PEP



PEP Status Key

A - Accepted (Standards Track only) or Active proposal
D - Deferred proposal
F - Final proposal
P - Provisional proposal
R - Rejected proposal
S - Superseded proposal
W - Withdrawn proposal



Authors/Owners






Name
Email Address



Aahz
aahz at pythoncraft.com

Ahlstrom, James C.
jim at interet.com

Althoff, Jim
james_althoff at i2.com

Altis, Kevin
altis at semi-retired.com

and community, The Python core team
 

Angelico, Chris
rosuav at gmail.com

Angerer, Philipp
phil.angerer at gmail.com

Ascher, David
davida at activestate.com

Astrand, Peter
astrand at lysator.liu.se

Banks, Carl
pythondev at aerojockey.com

Barker, Christopher
chris.barker at noaa.gov

Barrett, Paul
barrett at stsci.edu

Batista, Facundo
facundo at taniquetil.com.ar

Baxter, Anthony
anthony at interlink.com.au

Behnel, Stefan
stefan_ml at behnel.de

Bellman, Thomas
bellman+pep-divmod at lysator.liu.se

Belopolsky, Alexander
alexander.belopolsky at gmail.com

Bendersky, Eli
eliben at gmail.com

Benfield, Cory
cory at lukasa.co.uk

Bethard, Steven
steven.bethard at gmail.com

Borini, Stefano
 

Brandl, Georg
georg at python.org

Bray, Erik M.
 

Britton, Gerald
gerald.britton at gmail.com

Broytman, Oleg
phd at phdru.name

Bryon, Benoit
benoit at marmelune.net

Cannon, Brett
brett at python.org

Cappos, Justin
jcappos at nyu.edu

Carlson, Josiah
jcarlson at uci.edu

Carroll, W Isaac
icarroll at pobox.com

Chisholm, Matt
matt-python at theory.org

Coghlan, Nick
ncoghlan at gmail.com

Cole, Dave
djc at object-craft.com.au

Collins, Robert
rbtcollins at hp.com

Colomiets, Paul
paul at colomiets.name

Corchero, Mario
mariocj89 at gmail.com

Craig, Christopher A.
python-pep at ccraig.org

Creighton, Laura
lac at strakt.com

D'Aprano, Steven
steve at pearwood.info

Das, Kushal
mail at kushaldas.in

Deily, Ned
nad at python.org

Delaney, Tim
timothy.c.delaney at gmail.com

Demeyer, Jeroen
j.demeyer at ugent.be

Diaz, Vladimir
vladimir.diaz at nyu.edu

Diederich, Jack
jackdied at gmail.com

Dörwald, Walter
walter at livinglogic.de

Dower, Steve
steve.dower at python.org

Drake, Fred L., Jr.
fred at fdrake.net

Dubner, Michael P.
dubnerm at mindless.com

Dubois, Paul F.
paul at pfdubois.com

Eby, Phillip J.
pje at telecommunity.com

Eby, P.J.
pje at telecommunity.com

Einat, Tal
taleinat at gmail.com

Elliott, Micah
mde at tracos.org

Epler, Jeff
jepler at unpythonic.net

Eppstein, David
eppstein at ics.uci.edu

Evans, Clark C.
cce at clarkevans.com

Ewing, Greg
greg.ewing at canterbury.ac.nz

Ewing, Gregory
greg.ewing at canterbury.ac.nz

Faassen, Martijn
faassen at infrae.com

Finney, Ben
ben+python at benfinney.id.au

Foord, Michael
michael at python.org

Furman, Ethan
ethan at stoneleaf.us

Galindo, Pablo
pablogsal at gmail.com

Gaynor, Alex
alex.gaynor at gmail.com

Giacometti, Frédéric B.
fred at arakne.com

Gilbert, Scott
xscottg at yahoo.com

Gonzalez, Ryan
rymg19 at gmail.com

Goodger, David
goodger at python.org

Griffin, Grant
g2 at iowegian.com

Haase, Mark E.
mehaase at gmail.com

Hammond, Mark
mhammond at skippinet.com.au

Harris, Peter
scav at blueyonder.co.uk

Hastings, Larry
larry at hastings.org

Heimes, Christian
christian at python.org

Heller, Thomas
theller at python.net

Hellmann, Doug
doug at doughellmann.com

Hetland, Magnus Lie
magnus at hetland.org

Hettinger, Raymond
python at rcn.com

Hodgson, Neil
neilh at scintilla.org

Holth, Daniel
dholth at gmail.com

House, Philip
phouse512 at gmail.com

Houtven, Laurens Van
_ at lvh.cc

Hoyt, Ben
benhoyt at gmail.com

Hudson, Michael
mwh at python.net

Hylton, Jeremy
jeremy at alum.mit.edu

III, Ernest W. Durbin
ewdurbin at gmail.com

Ingram, Dustin
di at di.codes

Ishimoto, Atsuo
ishimoto--at--gembook.org

Jansen, Jack
jack at cwi.nl

Jevnik, Joseph
joejev at gmail.com

Jewett, Jim
jimjjewett at gmail.com

Jewett, Jim J.
jimjjewett at gmail.com

Jones, Richard
richard at python.org

Kleckner, Reid
rnk at mit.edu

Kluyver, Thomas
thomas at kluyver.me.uk

Koltsov, Stepan
yozh at mx1.ru

Krah, Stefan
skrah at bytereef.org

Kreft, Sebastian
skreft at deezer.com

Krekel, Holger
holger at merlinux.eu

Kuchling, A.M.
amk at amk.ca

Kuppusamy, Trishank Karthik
trishank at nyu.edu

Kuska, Robert
rkuska at redhat.com

Landau, Joshua
joshua at landau.ws

Langa, Łukasz
lukasz at python.org

Lee, Michael
michael.lee.0x2a at gmail.com

Lehtosalo, Jukka
jukka.lehtosalo at iki.fi

Lemburg, Marc-André
mal at lemburg.com

Levkivskyi, Ivan
levkivskyi at gmail.com

Lielens, Gregory
gregory.lielens at fft.be

Lindqvist, Björn
bjourne at gmail.com

von Löwis, Martin
martin at v.loewis.de

v. Löwis, Martin
martin at v.loewis.de

Lownds, Tony
tony at lownds.com

Mariatta
mariatta at python.org

Martelli, Alex
aleaxit at gmail.com

Martinot-Lagarde, Joseph
 

Mastrodomenico, Lino
l.mastrodomenico at gmail.com

Maupin, Patrick
pmaupin at gmail.com

McClelland, Andrew
eternalsquire at comcast.net

McCreary, Charles R.
 

McDonough, Chris
chrism at plope.com

McGibbon, Robert T.
rmcgibbo at gmail.com

McMillan, Gordon
gmcm at hypernet.com

McNamara, Andrew
andrewm at object-craft.com.au

Meskanen, Markus
markusmeskanen at gmail.com

Meyer, Mike
mwm at mired.org

Meyer, Carl
carl at oddbird.net

Mick, Trent
trentm at activestate.com

Miller, Mike G.
 

Montanaro, Skip
skip at pobox.com

Moody, Peter
pmoody at google.com

Moore, Paul
p.f.moore at gmail.com

Murray, R David
 

Naoki,         Inada
songofacandy at gmail.com

Natali, Charles-François
cf.natali at gmail.com

Noller, Jesse
jnoller at gmail.com

North, Ben
ben at redfrontdoor.org

Norwitz, Neal
nnorwitz at gmail.com

Ochtman, Dirkjan
dirkjan at ochtman.nl

Oliphant, Travis
oliphant at ee.byu.edu

Orendorff, Jason
jason.orendorff at gmail.com

Orsava, Tomáš
tomas.n at orsava.cz

Oudkerk, Richard
r.m.oudkerk at googlemail.com

Oussoren, Ronald
ronaldoussoren at mac.com

Palard, Julien
julien at palard.fr

Pedroni, Samuele
pedronis at python.org

Pelletier, Michel
michel at users.sourceforge.net

Peters, Tim
tim.peters at gmail.com

Peterson, Benjamin
benjamin at python.org

Petrone, Jason
jp at demonseed.net

Pitrou, Antoine
solipsis at pitrou.net

Plch, Marcel
gmarcel.plch at gmail.com

Polley, James
jp at jamezpolley.com

Pranskevichus, Elvis
elvis at magic.io

Prescod, Paul
paul at prescod.net

Pruitt, (James) Eric
 

Quinlan, Brian
brian at sweetapp.com

Reedy, Terry
tjreedy at udel.edu

Regebro, Lennart
regebro at gmail.com

Reifschneider, Sean
jafo-pep at tummy.com

Reis, Christian R.
kiko at async.com.br

Riehl, Jonathan
jriehl at spaceship.com

Roach, Lisa
lisaroach14 at gmail.com

Roberge, Andre
andre.roberge at gmail.com

Ronacher, Armin
armin.ronacher at active-4.com

van Rossum, Guido (GvR)
guido at python.org

van Rossum, Just (JvR)
just at letterror.com

Rovito, Todd
rovitotv at gmail.com

Ryan, Lie
lie.1296 at gmail.com

Sajip, Vinay
vinay_sajip at red-dove.com

Salgado, Pablo Galindo
pablogsal at gmail.com

Schemenauer, Neil
nas at arctrix.com

Schneider-Kamp, Peter
nowonder at nowonder.de

Schofield, Ed
ed at pythoncharmers.com

Selivanov, Yury
yury at magic.io

Seo, Jiwon
seojiwon at gmail.com

Shannon, Mark
mark at hotpy.org

Simpson, Cameron
cs at cskk.id.au

Slodkowicz, Greg
jergosh at gmail.com

Smith, Kevin D.
kevin.smith at themorgue.org

Smith, Eric V.
eric at trueblade.com

Smith, Nathaniel J.
njs at pobox.com

Smith, Nathaniel
njs at pobox.com

Smith, Ethan
ethan at ethanhs.me

Smith, Gregory P.
greg at krypto.org

Snow, Eric
ericsnowcurrently at gmail.com

Spealman, Calvin
ironfroggy at gmail.com

Staley, Kerrick
mail at kerrickstaley.com

Stein, Greg
gstein at lyra.org

Stinner, Victor
vstinner at redhat.com

Storchaka, Serhiy
 

Stufft, Donald
donald at stufft.io

Stutzbach, Daniel
daniel at stutzbachenterprises.com

Sullivan, Michael J.
sully at msully.net

Suzi, Roman
rnd at onego.ru

Talin
viridia at gmail.com

Taschuk, Steven
staschuk at telusplanet.net

Teichmann, Martin
lkb.teichmann at gmail.com

Thomas, Geoffrey
geofft at ldpreload.com

Tirosh, Oren
oren at hishome.net

Turnbull, Stephen J.
stephen at xemacs.org

Urban, Daniel
urban.dani+py at gmail.com

Vassalotti, Alexandre
alexandre at peadrop.com

Verdone, Mike
mike.verdone at gmail.com

Viehland, Dino
dinov at microsoft.com

Viktorin, Petr
encukou at gmail.com

Ware, Zachary
zachary.ware at gmail.com

Warnes, Gregory R.
gregory_r_warnes at groton.pfizer.com

Warsaw, Barry
barry at python.org

Way, Terence
terry at wayforward.net

Weele, Eric N. Vander
ericvw at gmail.com

Wells, Cliff
logiplexsoftware at earthlink.net

Whitley, Jervis
jervisau at gmail.com

Wijaya, Mariatta
mariatta at python.org

Williams, Mark
mrw at enotuniq.org

Willing, Carol
willingc at gmail.com

Wilson, Greg
gvwilson at ddj.com

Winter, Collin
collinwinter at google.com

Wouters, Thomas
thomas at python.org

Yamamoto, Masayuki
 

Yasskin, Jeffrey
jyasskin at google.com

Yee, Ka-Ping
ping at zesty.ca

Zadka, Moshe
moshez at zadka.site.co.il

Zevenhoven, Koos
k7hoven at gmail.com

Zhu, Huaiyu
hzhu at users.sourceforge.net

Ziadé, Tarek
tarek at ziade.org





References



[1]PEP 1: PEP Purpose and Guidelines





[2]View PEP history online: https://github.com/python/peps








Tweets by @ThePSF
!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+"://platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");


The PSF
The Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission. 








▲ Back to Top


About

Applications
Quotes
Getting Started
Help
Python Brochure



Downloads

All releases
Source code
Windows
Mac OS X
Other Platforms
License
Alternative Implementations



Documentation

Docs
Audio/Visual Talks
Beginner's Guide
Developer's Guide
FAQ
Non-English Docs
PEP Index
Python Books
Python Essays



Community

Community Survey
Diversity
Mailing Lists
IRC
Forums
Python Conferences
Special Interest Groups
Python Logo
Python Wiki
Merchandise
Community Awards
Code of Conduct



Success Stories

Arts
Business
Education
Engineering
Government
Scientific
Software Development



News

Python News
Community News
PSF News
PyCon News



Events

Python Events
User Group Events
Python Events Archive
User Group Events Archive
Submit an Event



Contributing

Developer's Guide
Issue Tracker
python-dev list
Core Mentorship
Report a Security Issue



▲ Back to Top

 



Help & General Contact
Diversity Initiatives
Submit Website Bug

Status 




Copyright ©2001-2019.
                             Python Software Foundation
                             Legal Statements
                             Privacy Policy
                             Powered by Heroku







window.jQuery || document.write('<script src="/static/js/libs/jquery-1.8.2.min.js"><\/script>')
















Planet Python
Last update: April 15, 2019 01:48 PM UTC





April 15, 2019
Reinout van Rees
Summaries of the Python meetup in Amsterdam


I've made notes again at the 2019-04-11 Amsterdam Python meetup in the byte office. Here are the summaries.

Ethics in IT - Nick Groenen
Computer systems are taking over the world. They're influencing everything. A
lot of good has come out of this. But there's also a downside.
We're talking (at meetups like this, for instance) mostly about tech, not
about the people that build it or the people affected by it. Nick Groenen calls that an ethics problem.
As an example, Uber's "greyball" that was originally written for a good
purpose but that was later used to mislead governments. Same with
Volkswagen's diesel emissions scandal: detecting when there's an official test
and adjusting the motor parameters to seem more environmentally friendly.
How ethical is it to work on something like that?
The above examples are of big companies. But what about working for smaller
companies? You have the same ethical challenges there. What are you doing with
your logfiles? How much information do you mine about your customers? Do you
give customers' data to your boss when he asks about it even though it isn't
allowed by your privacy policy?
And how do you treat new programmers? Is there budget for training? How do you
treat interns? That's also an ethical question.
A good first step would be to actually acknowledge the problem in our IT
industry.
Ethics... we didn't learn for that. There are some pointers to get you started:

https://www.ieee.org/about/corporate/governance/p7-8.html
https://ethics.acm.org
Talk to other departments in your organisation, like the legal
department. Or your local UX designer.
Try to apply ethics during design and code review.
Design for evil. Try to abuse what you're building. It is actually quite a
funny exercise!
Understand the communication and decision-making structure of your
company. Who do you have to talk to? Who makes the actual decisions?



We need a better testing framework - Noam Tenne
Noam Tenne works at Van Moof, a bicycle company.
He made his own testing framework, Nimoy, named after the actor who
played Spock.
TDD ought to be a given now. It isn't always, but it ought to be. Test Driven
Development.
What about BDD: Behaviour Driven Development? A test for a feature is
written like this:

SCENARIO some description
GIVEN some starting point
WHEN some action
THEN some expected result

You can do it with the python behave
library. It works with one file per scenario with decorators inside
them. Which is a bit cumbersome. And not business-people-friendly.
Nimoy goes back to the old way. One test method per feature. The steps
("given", "when") are indicated by using the with statement:

from nimoy.specification import Specification

class ExampleSpec(Specification):

    def example_feature(self):
        with setup:
            a = 5
        with when:
            a += 1
        with expect:
            a == 6  # Look! No

It functions like a DSL (domain specific language) this way. It isn't real
regular python code, but it uses python syntax in a specific way. (Note by
Reinout: I suspected he was using metaclasses behind the scenes to adjust the
way python treats keywords and variables within the Specification classes, but
he later mentioned he used the AST (python's Abstract Syntax Tree
module). ast.NoteTransformer and so.).
And DDT? Data Driven Testing? There's support in nimoy for parametrizing
existing data (for instance from a file or database) and to use that in the
tests.
Nimoy has some nice syntactic sugar for using mock classes. Easy to specify
expected output, for instance.
He's got a series of blog posts
on how/why he created Nimoy.
He showed some internal code examples afterwards. Including Nimoy tests for
nimoy itself. Looked nice.



April 15, 2019 07:04 AM UTC

codingdirectional
Count the number of occurrences of each character and return it as a list of tuples in order of appearance

In this example we are going to create a function which will count the number of occurrences of each character and return it as a list of tuples in order of appearance. For example, 

ordered_count("abracadabra") == [('a', 5), ('b', 2), ('r', 2), ('c', 1), ('d', 1)]

The above is a 7 kyu question on CodeWars, this is the only question I can solve today after the first two fail attempts.


I am supposed to start the Blender project today but because I want to write a post for your people I have spent nearly an hour and a half working on those three python questions on CodeWars, I hope you people will really appreciate my effort and will share this post to help this website to grown.

def ordered_count(input):

    already = []
    input_list = list(input)
    return_list = []
    for word in input_list:
        if(word not in already):
            return_list.append((word, input_list.count(word)))
            already.append(word)

    return return_list

The solution above is short and solid, hope you like it.

April 15, 2019 05:08 AM UTC

Mike Driscoll
PyDev of the Week: Pierre Denis

This week we welcome Pierre Denis as our PyDev of the Week! Pierre is the creator of Lea, a probabilistic programming package in Python. He can be found on LinkedIn where you can see his CV and learn more about some of the things he is up to. Let’s take a few moments to get to know Pierre better! 
Can you tell us a little about yourself (hobbies, education, etc): 
I’ve a Master in Computer Science from UCL Louvain-la-Neuve, Belgium, where I reside. I’m working since 20 years as software engineer in [Spacebel](http://www.spacebel.be), a company developing systems for Space. Basically, I like everything creative and elegant. Beside arts, music, literature, I ‘m looking for this in physics, algorithmic, GUI and mathematics. I love programming, especially in Python. So far, I have initiated three open-source Python projects: UFOPAX (textual virtual universe), Unum (quantities with unit consistency) and Lea (probabilistic programming). For these developments, I tend to be perfectionist and consequently slow: I’m the kind of guy that re-write the same program ten times, just for the sake of inner beauty!
Beside programming, I’m doing research in number theory (twin primes conjecture). Also, I’m writing short stories in French, my mother tongue, with some reference to the ‘Pataphysics of Alfred Jarry and a lot of nonsense. Incidentally and fortunately, programs can be good for producing nonsense, as I showed in my bullshit generator!
Why did you start using Python? 
One day, a colleague showed me very interesting things he made with that language, completely unknown for me. It was Python 1.5, in 1999! At that time, I was much in favor of statically-typed languages (C++, Java, Ada, …). Intrigued, I read “Whetting your appetite” of G. van Rossum, then I swallowed the wonderful “Learning Python” book of M. Lutz and D. Asher. I was quickly conquered by the clarity, the conciseness, the beauty of the language. So, I started Python basically because it was so appealing: having the simplicity of an interpreted language with built-in containers, exceptions, OO, operator overloading, and many, many more. I became soon a zealous advocate of Python in my company.
What other programming languages do you know and which is your favorite? 
Well, I’ve practiced Pascal, Ada, C, C++, Smalltalk, Java, Prolog, Scala and a few others. Python is my favorite one, by far. Now, if I had to award a silver medal, this would be Scala. Actually, my programming experience with Scala changed a bit the way I program in Python: I smoothly shifted to a more functional style, in particular, preferring immutable objects to mutable ones. Beside this choice, I’ve to mention that C, Smalltalk and Prolog have been very influential for me.
What projects are you working on now?
For my company, I’ve worked recently on the qualification of MicroPython, the awesome project of Damien George, for Flight onboard software (for short, Python running on a spacecraft!). Independently, I’m now contributing to a revamp of our workflow execution engine. This uses Python, RabbitMQ, Open API, MongoDB as well as Angular for the GUI. As for the previous version, this will be used in satellite operations centers (e.g. switch on antenna and perform uplink/downlink at satellite passes).
On the side of personal Python projects, I’m maintaining Lea, in particular for extending its ML abilities. Also, I’m working on SiriusBee, a videogame prototype using PyQt, where you drive a spacecraft through alien caves. As a longer background task, I’m still in search of a proof to twin prime conjecture…
Which Python libraries are your favorite (core or 3rd party)?
Oh, so many of them are just great! In the standard Python modules, I like ast, functools, datetime, json, bisect, just to name a few that I used recently. In my experience, bisect is not very much known, probably due to its cryptic and unappealing name. I advised it several times to people needing to do efficient “range” lookups (they usually started first implementing by themselves).
For 3rd party ones, I do like PyQt, which I’ve used a lot. BTW, I’m coauthor of an introductory book on PyQt in French. SymPy also is really impressive, even if I’m acquainted only with the symbolic computation part. This allowed Lea producing probability formulae, like p**5 * (1 – q)**3, instead of numbers. To my surprise, this was done almost for free, without changing a single line of Lea’s core algorithm. The magic of Python and duck-typing!
What is the Lea package? 
In essence, Lea allows you playing with probabilities in a simple way. You can define discrete random variables (RV) as dictionaries of objects with given probabilities. Then, Lea allows you combining these random variables, mostly as you would do for usual (deterministic) objects: typically, using particular arithmetic and comparison operators. You then obtain a new RV that you may query to get the calculated probabilities. An important concept is that the dependencies you define between RV’s are kept internally. Think of that as some kind of “lazy evaluation”. This allows conditioning and Bayesian reasoning (What is the probability of a hypothesis H given observation X?). Lea fits very well in the field of Probabilistic Programming Language (PPL). Several packages, in Python and others, provide similar functionalities but, from the feedbacks I received, I honestly think that Lea is among the most intuitive and easy to use.
On the design side, the package is made of few building blocks that can combine together to make complex probabilistic models. These are processed by an original inference algorithm in which Python generators play a key role. These building blocks are subclasses of “Lea”, the root abstract class, and are named “Alea”, “Blea”, “Flea”, “Clea”, etc.. I know that this may sound odd but having such short names helped me to reason; these are like members of a fairy family, whom I can summon so they converse together and… play Statues (the game that inspired the algorithm’s name). Needless to say, Lea is the programming thing that I’m the most proud of!
What have you learned creating Python packages? 
One lesson I learned is that any new function that you program requires much efforts downstream: documentation, formal tests and tutorial updates. I spent many more time for these activities than for the programming itself. In Lea code, you may find one-liner methods having 20 lines long docstrings!
Also, I must confess that, for my personal projects, I had an inclination to work alone. I’ve learned however that there are several people, highly skilled, ready to help by evolution propositions or direct contributions. What is great with open-source is that there seems to be always someone, somewhere, who can fulfill your lacks on any topic. I think especially to Chris MacLeod, who took over the maintenance of Unum, as well as Paul Moore and Nicky van Foreest, who made great contributions on Lea for optimization, test suite and packaging. Also, I’ve many examples of open discussions I had with knowledgeable persons, which lead to new important ideas. I strongly believe in the virtues of cross-fertilization and serendipity.
Is there anything else you’d like to say? 
Last week, my son has written a Python script implementing a genetic algorithm. Basically, individuals learn by evolution/selection how to follow a given road to reach a target zone. After some tuning, his program works very fine. He programmed everything without any third-party library, except PyGame for the display. I’m very impressed and proud of him.


April 15, 2019 05:05 AM UTC

April 14, 2019
Catalin George Festila
Using the python module music21.

What is music21?
Music21 is a set of tools for helping scholars and other active listeners answer questions about music quickly and simply. If you’ve ever asked yourself a question like, “I wonder how often Bach does that” or “I wish I knew which band was the first to use these chords in this order,” or “I’ll bet we’d know more about Renaissance counterpoint (or Indian ragas or post-tonal pitch

April 14, 2019 02:42 PM UTC

Abhijeet Pal
The Ultimate Visual Studio Code Setup For Django Developers

Visual Studio the text editor is known as Visual Studio Code is Microsoft’s free text editor that runs on Windows, Linux, and macOS. It’s a recent entrant to the market; Microsoft released the product as a public preview at the end of 2015, posting the open source code to Github, before making it available as a general release in April 2016.
Despite its newbie status, Visual Studio Code has rapidly gained popularity among developers. Some may argue that it is not a real IDE, but merely an advanced text editor. But in my opinion, after installing a number of extensions, it becomes almost a full-fledged IDE with very rich functionality.
Additionally, despite being an Electron-based application, it is quite lightweight and responsive (in contrast to for example Atom, which is very slow and resource intensive).
This tutorial will go through Installation and setup of the VS code for Python and Django projects on your machine.
Installing Visual Studio Code
Visual Studio Code is a free text editor so to download it you just have to visit their official site and download the file depending on your operating system. So visit Vscode’s-website and download the latest stable build for your OS and once the download is finished install the editor and launch the app.

The best thing about VScode is that it comes with a built-in terminal which comes handy for Django projects press Ctrl+Shift+` to invoke the terminal.

Note that in windows powershell may seem weird for new users it is recommended to use Python debug console or CMD.
Configuring Python
To enjoy Pythonic features such as Linting, Debugging (multi-threaded, remote), Intellisense, code formatting, refactoring, unit tests, snippets, and more you need to install Python extension for Vscode.
To install an extension press Ctrl+Shift+x or click the extension icon.

Now search for Python and install the one published by Microsoft.

Adding Extension For Django
Search for Djaneiro this extension provides a collection of snippets for Django templates, models, views, fields & forms ported from Djaneiro for SublimeText.
Selecting Python Environment
Press CTRL+SHIFT+P(CMD+SHIFT+P for MacOS) and type Python: Select Interpreter and select the environment for your project. You can see the active environment at the bottom left of the editor.

Installing Theme
The default Vscode theme is great in itself however there are plenty for fabulous free theme available for download. My favorite one is Ayu Mirage.
To install or change a theme go to, file>Preference> color theme

And select Ayu mirage or any other theme that you prefer.

Notice below color theme there is an option for file icon theme click on that and select Ayu this will give different file icons for your project which will help you in distinguishing between them.

After that restart VS code to activate the extensions. Now open any of your Django project you should get this beautiful view.

Font’s look a bit small you can increase them in workspace setting I usually keep it to 19. To change the font size got to file>Prefernce> Settings then change the font size in workspace settings.

Configuring  Additional Useful Settings
Go to file> preferece> settings then open settings.json from there.

In USER SETTINGS inside the curly braces { } add the following Settings.
// my custom settings
    "editor.formatOnSave": true,
    "editor.rulers": [
        80,
        120
    ],
    "files.exclude": {
        "**/.git": true,
        "**/.svn": true,
        "**/.hg": true,
        "**/CVS": true,
        "**/.DS_Store": true,
        ".vscode": true,
        "**/*.pyc": true,
    },
    "workbench.editor.enablePreview": false,
    "files.autoSave": "afterDelay",
    "files.autoSaveDelay": 500,
    "editor.minimap.enabled": false,

To use the above features, the editor will prompt you to install pylint and autopep8, or you can install them directly in the virtual environment.
pip install autopep8
pip install pylint

The post The Ultimate Visual Studio Code Setup For Django Developers appeared first on Django Central.

April 14, 2019 12:54 PM UTC

Talk Python to Me
#207 Parallelizing computation with Dask

What if you could write standard numpy and pandas code but have it run on a distributed computing grid for incredible parallel processing right from Python? How about just splitting it across multiprocessing to escape the limitations of the GIL on your local machine? That's what Dask was built to do.

April 14, 2019 08:00 AM UTC

April 13, 2019
Weekly Python StackOverflow Report
(clxxiii) stackoverflow python report

These are the ten most rated questions at Stack Overflow last week.Between brackets: [question score / answers count]Build date: 2019-04-13 20:50:39 GMTWhy can I use a list index as an indexing variable in a for loop? - [72/6]How to use Pandas to get the count of every combination inclusive - [10/4]Define a list range inside a list - [10/4]"is" operation returns false even though two objects have same id - [10/2]Detect if an image is upside down - [10/0]Django - how to visualize signals and save overrides? - [9/3]Pandas: get the min value between 2 dataframe columns - [9/1]Compute the product of 3 dictionaries and concatenate keys and values - [8/4]How to extract consecutive elements from an array containing NaN - [8/2]Python: next in for loop - [8/1]

April 13, 2019 08:50 PM UTC

Codementor
Two new video series

Introducing two new video series in industrial controls/IoT development and Python programming.

April 13, 2019 04:47 PM UTC

codingdirectional
How to use the reverse method of a list in python

Most of the time a python programmer will need to reverse the order of the entire python list’s elements so a program can loop through those elements in the list starting from the end instead of from the beginning. Below is an example which we will use the python list’s reverse method to reverse the order of the list before using it.
Wolves have been reintroduced to Great Britain. You are a sheep farmer and are now plagued by wolves which pretend to be sheep.  Fortunately, you are good at spotting them. 
Warn the sheep in front of the wolf that it is about to be eaten. Remember that you are standing at the front of the queue which is at the end of the array:

[sheep, sheep, sheep, sheep, sheep, wolf, sheep, sheep]      (YOU ARE HERE AT THE FRONT OF THE QUEUE)
   7      6      5      4      3            2      1

If the wolf is the closest animal to you, return "Pls go away and stop eating my sheep". Otherwise, return "Oi! Sheep number N! You are about to be eaten by a wolf!" where N is the sheep’s position in the queue.
Note: there will always be exactly one wolf in the array!
Examples:

warn_the_sheep(["sheep", "sheep", "sheep", "wolf", "sheep"]) == 'Oi! Sheep number 1! You are about to be eaten by a wolf!'

warn_the_sheep(['sheep', 'sheep', 'wolf']) == 'Pls go away and stop eating my sheep'

Before we solve the above problem, we need to reverse the order of the list using the below method.

queue.reverse()

Here is the entire solution.

def warn_the_sheep(queue):
    queue.reverse()
    the_wolf_position = queue.index("wolf")
    if(the_wolf_position == 0):
        return 'Pls go away and stop eating my sheep'
    else:
        return "Oi! Sheep number " + str(the_wolf_position) + "! You are about to be eaten by a wolf!"



A simple solution indeed, in the meantime I feel really shocked that the animals (both the wolf and the sheep) in Great Britain knows English so well! Like, share or follow me on Twitter.

April 13, 2019 12:21 PM UTC

Python Bytes
#125 Will you conquer the deadlock empire?



April 13, 2019 08:00 AM UTC

April 12, 2019
Bruno Rocha
from dynaconf import settings

Often when starting a new Python project we need to spend some time thinking about how to manage the settings, decide on which module the configuration manager will be written, decide which name to give to this module, create a class or function to store the configuration keys, create the conditions for multiple environments and still need to worry about where these keys will be stored and in which file format?
No more! now you have Dynaconf!
Spend your precious time developing your application, run pip install dynaconf and let Dynaconf take care of your settings.
Quick start.
from dynaconf import settings

And that's it!
That is the only line of code you need, no complicated boilerplate, no hadouken-ifs, no need to maintain config classes.
You must be wondering - "What magic is this? Where does the setting values come from?"
Well, there is no magic, and the values can come from wherever you want, by default and following the recommendations of the 12 factor apps Dynaconf has preference for environment variables.
# optionally you can save it in .env file
export DYNACONF_DEBUG=true
export DYNACONF_NAME=Bruno

# app.py
from dynaconf import settings
if settings.DEBUG is True:
    print(settings.NAME)

$ python3 app.py
Bruno

And the environment variables for Dynaconf are typed using the toml format sotrue has been evaluated to boolean True and this makes it possible to export lists, dictionaries, floats, booleans, and so on.

Read more about envvars
More than environment variables
Well, that's cool, but your project will not have settings coming from just the environment variables, I'm sure you want to have a settings file where you can set  default values.
Dynaconf can read multiple file formats, out of the box it supports .py, .toml, .ini and .json. If PyYAML is installed then it will also support .yaml and you don't have to take care of finding and opening the files. The preferred format is .toml because it is currently the best configuration format, widely addopted, and you can use whatever file format you want.
# settings.toml
[default]
name = "Bruno"

[development]
debug = true

[production]
debug = false

# app.py
from dynaconf import settings
if settings.DEBUG is True:
    print(settings.NAME)

$ python3 app.py
Bruno

And as you can see now using settings. file we can have separate [environments] by default dynaconf will always work on [development] which means only [default] and [development] variables will be loaded. At any time you can do export ENV_FOR_DYNACONF=production and then it starts using the values from [production] environment.
If you don't want to have that separation by environment, you can simply put everything under [default] section.

Read more about environments and settings file
Some values are secrets
A good practice is to not store your secrets like passwords and tokens directly on settings files, because you can make a mistake and commit that to a public git repository, so there are some alternatives to store secrets
Environment Variables
Not recommended

There are some people who disagrees and it is really a point of security failure. However, if you are sure that your machine is protected, you can leave the secrets in the variables, at your own risk, Dynaconf can read it normally.
Secret files
This is a simple level of security for keeping secrets, and it is specially useful to keep development secrets. That token you use to access the development API etc.
It is very simple, together with your normal settings.toml you put a new file called .secrets.toml and store your sensitive data there. Dynaconf will read it after the read of the settings.toml
Wait.. how does it solve my security problem?
Well it does not (yet) but it make your life easier in 2 ways.

Put .secrets.* in your ~/.gitignore so you will never commit the mistake of sending that data to a public git repository.
Dynaconf can output debug information when DEBUG_LEVEL_FOR_DYNACON=DEBUG is exported, all loaded values are printed but if the values comes from a .secrets.* file, then only the key is printed and the value is masked. It is useful to use on public CI.
You can setup a step on your Ansible deployment playbook that will safely copy or generate the secrets file to store there on your production environment.

You can also tell Dynaconf to load that file from somewhere else export SECRETS_FOR_DYNACONF=/path/to/secrets/location/.secrets.yaml (very useful for CI like Jenkins)
Vault Project from Hashicorp
Recommended!

Now we are really talking about true security
Using Vault is the better way to protect your secrets dynaconf has built-in support:
export VAULT_ENABLED_FOR_DYNACONF=true
export VAULT_URL_FOR_DYNACONF=https://..../
export OTHER_VAULT_CONFIGS

And then if have for example the TOKEN stores on your vault server you can simply do:
from dynaconf import settings
perform_your_authentication(settings.TOKEN)

Vault has lots of features like leases and sealed vaults.
Read More
Are you using Django or Flask?
Dynaconf provides extensions for those 2 frameworks, with 2 lines of code you enable it and then your framework will start reading settings from Dynaconf.
Django
# settings.py
import dynaconf  # noqa
settings = dynaconf.DjangoDynaconf(__name__, **options)

Now you if you do export DJANGO_FOO=BAR you can access inside your app via django.conf.settings.FOO
read more
Flask
# app.py
from dynaconf import FlaskDynaconf
FlaskDynaconf(app, **options)

Now you if you do export FLASK_FOO=BAR you can access inside your app via app.config['FOO']
read more
What if you are using a different settings file format? a different framework and a different external storage?
You can extend Dynaconf adding new loaders!

Dynaconf already provides loaders for:

.py
.json
.yaml
.toml
.ini
Redis Server
Vault Server
.env files
Environment variables

But if this is not a fit for your project you can still create your own loader
Conclusion
Dynaconf is the only thing you need to manage your settings!


Well tested
Trusted by companies like Red Hat, Seek, Catho and others
Well tested both on Linux and Windows environment
Strict separation of settings from code (following 12-factor applications Guide).
Define comprehensive default values.
Store parameters in multiple file formats (.toml, .json, .yaml, .ini and .py).
Sensitive secrets like tokens and passwords can be stored in safe places like .secrets file or vault server.
Parameters can optionally be stored in external services like Redis server.
Simple feature flag system.
Layered [environment] system.
Environment variables can be used to override parameters.
Support for .env files to automate the export of environment variables.
Correct data types (even for environment variables).
Have only one canonical settings module to rule all your instances.
Drop in extension for Flask app.config object.
Drop in extension for Django conf.settings object.
Powerful $ dynaconf CLI to help you manage your settings via console.
Customizable Validation System to ensure correct config parameters.
Allow the change of dynamic parameters on the fly without the need to redeploy your application.

Read the docs
Settings are simple but Dynaconf provides even more features like Feature Flags, Settings Context Managers, Plugin Settings etc..

Documentation: http://dynaconf.readthedocs.io/
Dynaconf is waiting for your feedback and Contribution
:)
from dynaconf import settings
settings.THANKS_FOR_READING


April 12, 2019 02:38 PM UTC

PyCon
PyCon 2019 close to sell out!

We are all very excited that, once again, PyCon will sell out.  Time is running out so act fast if you are planning to attend, there are 60 tickets left as of April 12th at 11:00am central time. Time is moving fast!Things to remember:Hotels:PyCon Hotel Blocks are sold out, we suggest using online hotel booking sites to search for the best options near the Huntington Convention CenterHotel changes and cancellations should be made by contacting the hotels directly.  Hotel cancellations should be made directly with the individual properties 48 hours prior to arrival to avoid a one night cancellation chargeDietary Restrictions:If you indicated 'dietary allergy' when registering and have not provided specifics, please email pycon-reg@python.org with your dietary restrictions.Registration Cancellation Deadline:April 19th is the final date to submit an email requesting a conference registration cancellation for the $50.00 ($25.00 for students) cancellation fee.April 20th and after there will be no refunds for cancellations.  You will, however, be able to transfer the registration to another person after that date.  Further details can be found here.We are looking forward to seeing everyone in Cleveland!PyCon 2019 Staff

April 12, 2019 12:48 PM UTC

Catalin George Festila
Using pytineye to automate searching for images.

The TinEye API is ideally suited for image and profile verification, UGC moderation, copyright compliance and fraud detection.
Read more about the TinEye API here.
You need to use authentication for this API, read here.
To use the TinEye API you must purchase a search bundle.
The documentation for Python can be found here.
Let's start with the installation.
You need to download the zip file from

April 12, 2019 08:03 AM UTC

April 11, 2019
Continuum Analytics Blog
The Human Element in AI

The over 45 speakers at AnacondaCON 2019 delved into how machine learning, artificial intelligence, enterprise, and open source communities are accomplishing great things with data — from optimizing urban farming to identifying the elements in…
The post The Human Element in AI appeared first on Anaconda.

April 11, 2019 04:24 PM UTC

Real Python
Python String Formatting Tips & Best Practices

Learn the four main approaches to string formatting in Python, as well as their strengths and weaknesses. You’ll also get a simple rule of thumb for how to pick the best general purpose string formatting approach in your own programs.

[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short & sweet Python Trick delivered to your inbox every couple of days. >> Click here to learn more and see examples ]

April 11, 2019 02:00 PM UTC

Mike Driscoll
Python Used to Take Photo of Black Hole

Scientists have used a new algorithm to take a photo of a black hole. One of the most exciting parts about it to me is that they used a lot of Python libraries to do the magic. 
Here’s a list mentioned in their paper:

Numpy (van der Walt et al. 2011)
Scipy (Jones et al. 2001)
Pandas (McKinney 2010)
Jupyter (Kluyver et al. 2016)
Matplotlib (Hunter 2007).
Astropy (The Astropy Collaboration et al. 2013, 2018)

They also used their own custom Python code which is available on Github
If you’re interested in a more laymen’s explanation of the ideas behind taking the photo, there’s a nice TED talk on it from one of the researchers:


Related Links

Reddit Python group discussing these developments
A Photo of the researcher
 that appears to show Matplotlib running.



April 11, 2019 01:41 PM UTC

Made With Mu
Crossing the River by Feeling the Stones

The story I’m about to tell celebrates an epic adventure in making stuff work.

Just over a week ago Warren Hardy turned up
on our discussion channel to report
problems when trying to install Mu. He was working on an ARM based
single board computer (SBC).
The most famous SBC is, of course, the Raspberry Pi,
but there are many alternatives, each with their own different strengths and
areas of focus. Warren explained that his aim was, “to build a $99 less
complete SBC/computer, that can run YouTube, basic office software and be used
to tinker”.
The problem is Mu relies on other projects and some of this software doesn’t
work on all platforms. For example, Mu uses the
PyQt5 library to
draw and control its user interface. However, the folks who make PyQt only
release versions built for Windows, Mac and a limited number of Linux versions
running on an even more limited selection of hardware. It soon became clear
that Warren’s SBC wasn’t a supported platform.
Here’s where Warren demonstrated epic technical problem-solving skills.
Over the course of a few days he patiently, diligently and indomitably worked
through a series of over obscure problems and trials to achieve success which
he celebrated with a tweet
and photographic proof.

As you’ll see below, this took a huge amount of work.
So why the mention of crossing rivers in the blog title?
The Chinese leader, Deng XiaoPing
described his economic reforms as, “摸着石头，过河” (crossing the river by
feeling the stones). This is a wonderful characterisation of what it feels like
when trying to achieve a difficult task for the first time without any help or
guidance. The important thing is to be determined, pragmatic and careful to
ensure you take the right steps to reach your goal. These attributes, along
with an obvious technical talent, allowed Warren to cross the river to a
working version of Mu.
I mentioned to Warren that other people trying to make PyQt5 work on different
platforms would probably appreciated a description of the steps he took to
achieve a successful build. I offered to blog these steps if he shared them,
and being a generous soul, Warren emailed me the steps yesterday.
So, without further ado… here are Warren’s notes for future reference. Thank
you for all the hard work Warren..!
These notes should work on any Debian/Ubuntu platform. If you have any
questions please email Warren (who
gave me permission to add his email details to this blog post).
Note: always sudo make install when make install is required.
Setup basic tools and libraries
sudo apt-get install build-essential qt5-default git python3-distutils python3-pip python3-dev libxmlsec1-dev libxml2 libxml2-dev libsdl1.2-dev python3-setuptools python3-numpy python3-opengl libsdl-image1.2-dev libsdl-mixer1.2-dev libsdl-ttf2.0-dev libsmpeg-dev libsdl1.2-dev libportmidi-dev libswscale-dev libavformat-dev libavcodec-dev libtiff5-dev libx11-6 libx11-dev fluid-soundfont-gm timgm6mb-soundfont xfonts-base xfonts-100dpi xfonts-75dpi xfonts-cyrillic fontconfig fonts-freefont-ttf libfreetype6-dev libqt5charts5 libqt5charts5-dev libffi-dev python3-gpiozero virtualenv libqt5serialport5-devlibqt5serialport5 libqt5svg5 libqt5svg5-dev libqt5serialport5-dev

DO NOT INSTALL python3-pyqt5 python3-pyqt5.qsci python3-pyqt5.qtserialport
python3-pyqt5.qtsvg.
Required Python Packages
wget https://pypi.python.org/packages/48/69/d87c60746b393309ca30761f8e2b49473d43450b150cb08f3c6df5c11be5/appdirs-1.4.3.tar.gz
gunzip appdirs-1.4.3.tar.gz
tar -xvf appdirs-1.4.3.tar
cd appdirs-1.4.3
sudo python setup.py install
cd ..

pip3 install pycodestyle
pip3 install pyflakes
pip3 install serial
pip3 install pyserial

git clone https://github.com/k-bx/python-semver
cd python-semver
sudo python3 setup.py install
cd ..

Setup SIP (needed by PyQt5)
wget https://www.riverbankcomputing.com/static/Downloads/sip/4.19.15/sip-4.19.15.tar.gz
gunzip sip-4.19.15.tar.gz
tar -xvf sip-4.19.15.tar
cd sip-4.19.15
python3 configure.py
make
sudo make install
python3 configure.py --sip-module PyQt5.sip --no-dist-info --no-tools
cd ..

Setup PyQt5
wget https://www.riverbankcomputing.com/static/Downloads/PyQt5/5.12.1/PyQt5_gpl-5.12.1.tar.gz
tar -xzvf PyQt5_gpl-5.12.1.tar.gz
cd PyQt5_gpl-5.12.1
python3 configure.py
make -j 4 # (the -j x, is number of cores on the processer, speeds up compiling)
sudo make install
cd ..

Setup QScintilla
wget https://www.riverbankcomputing.com/static/Downloads/QScintilla/2.11.1/QScintilla_gpl-2.11.1.tar.gz
tar -xzvf QScintilla_gpl-2.11.1.tar.gz
cd QScintilla_gpl-2.11.1//Qt4Qt5
qmake
make -j 4 (the -j x, is number of cores on the processer, speeds up compiling)
sudo make install
cd Python
python3 configure.py --pyqt=PyQt5
make
sudo make install
cd ../..

Setup PyQtChart
wget https://www.riverbankcomputing.com/static/Downloads/PyQtChart/5.12/PyQtChart_gpl-5.12.tar.gz
tar -xzvf PyQtChart_gpl-5.12.tar.gz
cd PyQtChart_gpl-5.12
python3 configure.py
cd ..

Setup PyGame
wget https://files.pythonhosted.org/packages/71/4f/b3a521bb4db6ef696bcffca58b833aa2e84f7e7c142951d506d840ced57a/pygame-1.9.5.tar.gz
tar -xzvf pygame-1.9.5.tar.gz
cd pygame-1.9.5
sudo python3 setup.py
cd ..

Setup Cryptography Library
sudo pip3 install cryptography --no-binary cryptography

Install and Configure Mu
virtualenv -p /usr/bin/python3 --system-site-packages ~/mu-venv
source ~/mu-venv/bin/activate
git clone https://github.com/mu-editor/mu.git ~/mu-source
cd ~/mu-source
pip3 install -r requirements.txt

Edit the setup.py file so the install_requires section looks like this:

install_requires = ['pycodestyle==2.4.0', 'pyflakes==2.0.0',
                    'pyserial==3.4', 'pyqt5==5.12.1', 'qscintilla==2.11.1',
                    'qtconsole==4.3.1', 'matplotlib==2.2.2',
                    'pgzero==1.2', 'PyQtChart==5.12', 'appdirs>=1.4.3',
                    'gpiozero>=1.4.1', 'guizero>=0.5.2',
                    'pigpio>=1.40.post1', 'Pillow>=5.2.0',
                    'requests>=2.19.1', 'semver>=2.8.0', 'nudatus>=0.0.3',
                    "black>=18.9b0; python_version > '3.5'"]

Now type sudo python3 setup.py install to install Mu!
Finally, there needs to be some post-install configuration:
cd /usr/share/applications

Change the mu.editor.desktop file found in the /usr/share/applications
directory to:
[Desktop Entry]
Name=mu-editor
Comment=Simple Python editor
Exec=mu-editor
Icon=/usr/share/pixmaps/mu.png
Terminal=false
Type=Application
MimeType=text/plain
Categories=GTK;Development;TextEditor;
Keywords=Python;text;editor;
InitialPreference=6

Download the icon.
cd /usr/share/pixmaps
sudo wget https://codewith.mu/img/brand.png
sudo mv brand.png mu.png

That’s it..!

April 11, 2019 01:15 PM UTC

Caktus Consulting Group
We&#39;re Eagerly Preparing for PyCon 2019!

Pictured: The final rush is on! Staff quickly check materials for our PyCon booth. 
PyCon 2019 is almost here, and we’re excited to continue to sponsor this premier Python event, which takes place in Cleveland, OH, from May 1 - 9. PyCon attracts attendees from around the world, and for the first time, the conference will include a track of Spanish talks.  
Caktus at PyCon
Connecting with the Python community is one of our favorite parts of participating in PyCon. We love to catch up with people we’ve met before and see new faces, too! We’ll be in the Exhibit Hall at booth 645 on May 2 - 4, where we’ll have swag, games, and giveaways. 

Some of you may remember our Ultimate Tic Tac Toe game from previous years. Only a few committed players were able to beat the AI opponent last year. This year, any (human) champions will earn a Caktus hoodie and be entered into a drawing to win a Google AIY Vision Kit and a Google AIY Voice Kit.
Must-See Talks & Events
PyCon consistently attracts top-notch speakers who present on a variety of informative topics. Our team is especially looking forward to the following:

Releasing the World's Largest Python Site Every 7 Minutes by Shuhong Wong
Engineering Ethics and Open Source Software by Hayley Denbraver 
A New Era in Python Governance by Shauna Gordon-McKeon 
Migrating Pinterest from Python2 to Python3 by Jordan Adler and Joe Gordon 
Assets in Django without losing your hair by Jacob Kaplan-Moss
How to Think about Data Visualization by Jake VanderPlas

Check out the full schedule of talks. Some of these will likely appear in our follow-up PyCon Must-See Talks series, so if you can’t make it to the event, check back in June for our top picks. 
Open Spaces: Beyond the scheduled talks, our Technology Support Specialist Scott Morningstar is looking forward to the Open Spaces sessions, which are self-organizing, meetup-like events. Scott plans to run a game of WINTERHORN during one of the open spaces times. The live-action game allows players to reflect on the government and opportunities for activism. “I’m not sure if playing WINTERHORN will make you a better developer, but it may make you a better citizen, or at least better informed about what is happening in the world,” Scott said. 
Arts Festival: This year, PyCon includes a mini arts festival called The Art of Python, which will “showcase novel art that helps us share our emotionally charged experiences of programming (particularly in Python).” With his background in STEAM education (STEM + the Arts), account executive Tim Scales is particularly excited about the arts festival, which will provide a creative complement to the technical presentations and lectures.

Job Fair Open to Public
Are you a sharp Django web developer searching for your next opportunity? Good news — we’re hiring! View the spec and apply from our Careers page. We’ll also be at table 34 during the PyCon job fair on May 5, which is open to the public, so come meet the hiring manager and learn more about what it’s like to work at Caktus.
Don’t be a Stranger!
Come see us at our booth, look for members of the Caktus team in our T-shirts during the event, or go ahead and schedule a meeting with us. 
Whether you’ll be at PyCon or following along from home, we’ll tweet from @CaktusGroup. Be sure to follow us for the latest updates from the event.

April 11, 2019 01:00 PM UTC

codingdirectional
Anata wa hontōni sorera no kaidan o noboru koto ga dekimasu ka?

Hello and welcome back to another easy solution posted on Codewars. In this chapter, we need to solve the below problem.
Suzuki is a monk who climbs a large staircase to the monastery as part of a ritual. Some days he climbs more stairs than others depending on the number of students he must train in the morning. He is curious how many stairs might be climbed over the next 20 years and has spent a  year marking down his daily progress. 
The sum of all the stairs logged in a year will then be used for estimating the number he might climb in 20. 
20_year_estimate = one_year_total * 20
You will receive the following data structure representing the stairs
 Suzuki logged in a year. You will have all data for the entire year so 
regardless of how it is logged the problem should be simple to solve.

stairs = [sunday,monday,tuesday,wednesday,thursday,friday,saturday]

Make sure your solution takes into account all of the nesting within the stairs array.
Each weekday in the stairs array is an array.

sunday = [6737, 7244, 5776, 9826, 7057, 9247, 5842, 5484, 6543, 5153, 6832, 8274, 7148, 6152, 5940, 8040, 9174, 7555, 7682, 5252, 8793, 8837, 7320, 8478, 6063, 5751, 9716, 5085, 7315, 7859, 6628, 5425, 6331, 7097, 6249, 8381, 5936, 8496, 6934, 8347, 7036, 6421, 6510, 5821, 8602, 5312, 7836, 8032, 9871, 5990, 6309, 7825]

Your function should return the 20 year estimate of the stairs climbed using the formula above. 
You might feel confused at the beginning what does the author of this question actually wants but that is how all the questions on Codewars appear to be because they are from people around the world whose language is not English. While you try to figure it out what this question actually means, below is the entire solution written in python.

def stairs_in_20(stairs):
    total = 0
    for stair in stairs:
        for number in stair:
            total += number
    return total * 20

Do enjoy and hope you like this post.

April 11, 2019 09:18 AM UTC

Artem Rys
Python Functions Defaults Explained

I have been on the several Python interviews again and have passed an Upwork Python test. And I have noticed that the interviewers like using task as the following one.Photo by Joanna Kosinska on Unsplashdef f(x, l=[]):    for i in range(x):        l.append(i * i)    return l>>> f(2)>>> f(3, [0, 1, 2])>>> f(3)Question: what is the output of those lines?The output of the first two lines is pretty obvious, but the result of the third line f(3) wasn’t so intuitive for me.So let’s investigate what is going on after the initialization of the f function. I use IPython to run this code.>>> f<function __main__.f(x, l=[])>>>> f.__defaults__([],)The empty list that we see from the f.__defaults__ result is basically the l variable in the function code.>>> f(2)[0, 1]Nothing special.>>> f<function __main__.f(x, l=[0, 1])>>>> f.__defaults__([0, 1],)But! Now, we can see that variable l has a [0, 1] value because of the mutability of the Python list object and passing function arguments as a reference.>>> f(3, [0, 1, 2])[0, 1, 2, 0, 1, 4]>>> f<function __main__.f(x, l=[0, 1])>Nothing special too. Just passing new list object as a l variable.>>> f(3)[0, 1, 0, 1, 4]>>> f<function __main__.f(x, l=[0, 1, 0, 1, 4])>And here comes the most interesting part. When you run f(3), Python doesn’t use the empty list that is defined in function code, it uses the l variable with the values from f.__defaults__ ([0, 1]).P.S.If you want to have a function that uses empty list after each call, you should use something like this (set `l` default value to `None`).def f(x, l=None):    if l is None:        l = []    for i in range(x):        l.append(i * i)    return l>>> f(2)[0, 1]>>> f(3, [0, 1, 2])[0, 1, 2, 0, 1, 4]>>> f(3)[0, 1, 4]FinallyOne of the most popular test question from the Python interview was explained here. So it turns out that you can’t always trust your intuition, at least mine :)Python IO streams in examplesThanks for the attention to the topic, feel free to leave your questions in the comments for discussion.Python Functions Defaults Explained was originally published in python4you on Medium, where people are continuing the conversation by highlighting and responding to this story.

April 11, 2019 06:55 AM UTC

Karim Elghamrawy
Flatten Binary Tree to Linked List (Python In-Depth Explanation)

In this article, I will solve a common Tree data-structure question. This question also appears frequently in coding interviews. In solving this question, I will also teach you the thought process that I go through when I encounter problems like this one so you can solve similar problems on your own if you encounter them. [...]
The post Flatten Binary Tree to Linked List (Python In-Depth Explanation) appeared first on Afternerd.

April 11, 2019 03:30 AM UTC

Wingware Blog
Auto-Editing in Wing Pro (Part 3 of 3)

Wing Pro implements a suite of auto-editing operations that take care of common low-level
editing tasks. In the previous installments of this 3-part Wing Tips series
on Wing Pro's auto-editing features we looked at managing Python code blocks and auto-invocation.
To finish up this series, let's take a look at PEP 8 compliant auto-spacing and a few
less frequently needed but useful operations.

Note: If you have Wing Personal, you don't have the features described here. We'll
return to features that are also present in Wing Personal next time. Or try Wing Pro on a free trial.

Auto-Entering Spaces and PEP 8
Wing Pro can auto-enter spacing as you type, but this operation is off by default since it
may take some getting used to. Once enabled with the Editor > Auto-Editing > Auto-Enter
Spaces preference, you can type x=1 to get x = 1 or i=range(x=0,10) to enter
i = range(x=0, 10).  Spacing is entered in a PEP 8 compliant way.
Shown above: Type "t([1,2,3],y=f)" without any spaces; PEP 8 compliant spacing is auto-entered as needed.Some options for auto-spacing are available on the Editor > Auto-Editing preferences
page, to control whether spaces are auto-entered after unambiguous keyword names are
entered, whether to prevent insertion of spacing that is not PEP 8 compliant, and how to
place spaces in type annotations.

PEP 8 Reformatting:
If you're interested in maintaining strict PEP 8 compliance, you can enable automatic PEP
8 reformatting in the Editor > PEP 8 preferences group.  Reformatting takes place
either after leaving an edited line or for the whole file when it is saved to disk.
Or, trigger reformatting manually from the Source > PEP 8 menu group.


Correcting Out-of-Order Typing
Wing recognizes some types of out-of-order typing and adjusts them automatically, as a way
to save on keystrokes.  Some of the transformations include:






Keys Pressed
Keys Entered



if x(:)
if x(): followed by a new line and indentation

def x(-)
def x() -> for entering a type annotation

x()t
x().t

x(.y)
x().y

x(,)
x(),



Shown above: Type "def x(:)" to start the first def, "def y(a,b-)" for the second, and finally "c=a,x(,)b"

Changing Type of Quotes on a String
When the caret is just after a string and a quote character is pressed, the quotes around
the string are changed to that type of quote. This works with regular and triple-quoted
strings, although it's most useful for regular strings when the string needs to be edited
to contain a quote character.
Shown above: Type 'x = "test"', move caret to right, and then press ' to change to single quotes so the string can contain a double quote
That's it for our three-part Wing Tips series on auto-editing in Wing Pro.
For details on all the available auto-editing operations, see Auto-Editing in the Wing Pro manual.
Auto-editing is just one way in which Wing helps with writing, testing, and debugging
Python code. Next week we'll move on to some of the others.


April 11, 2019 01:00 AM UTC

April 10, 2019
PyCharm
PyCharm Hosts Python Content Creators at Expanded PyCon Booth

Want to meet key podcasters, authors, and teachers at PyCon? This year PyCharm has an expanded booth with space shared by many of the key “Python Content Creators.” Come say hi, watch short talks by them, us, and others in our mini-theater, or schedule one-on-one slots in our seating area.
We have lots more to announce on this in the coming weeks, but let’s lead with a quick overview.
Python Content Creators
We’re happy to be hosting our friends from PyCons past, giving these “Python Content Creators” booth space to talk with their folks:

Michael Kennedy, Talk Python To Me
Brian Okken, Test & Code
Dan Bader, Real Python
Matt Harrison, MetaSnake
Bob Belderbos and Julian Sequeira, PyBites
Cris Medina, tryexceptpass
Miguel Grinberg

How will it work? We will have two stands, with their logos and information on the backstop. They’ll take 2 hours slots rotating through their “booth.” Look for announcements from them about the slots and other activities.
Other Activities, Tell Me More
Our booth has 4 equal parts: an area for PyCharm, an area for the Python Content Creators, a one-on-one place with chairs, and a mini-theater.
The one-on-one place lets the PyCharm development team (yes, the actual people that make PyCharm) or the Python Content Creators pre-arrange or spontaneously do individual discussions. If you want to get your PyCharm configured for your project with a PyCharm developer, this is your chance. Of course you can also debug something, do a deep dive on a topic, solve some problem, get feedback, whatever. Let’s face it, sometimes it’s nice at conferences to sit down and chat.
The mini-theater is the focus. We’ll have a schedule of talks by the PyCharm team, by the Python Content Creators, even by others…for example, Barry Warsaw and I will do a short version of the Python 1994 talk. We jokingly refer to this as the “PyCon Rejects Space.”
“Python Content Creators”…Neat Idea, Where Did It Come From?
Last year we participated in a Humble Bundle with several popular creators of Python training, courses, etc. We did an open space with the “Humble Bundlers” and were surprised by the response. People wanted to talk with us, collectively, as much as individually. And we wanted to talk with each other.
After the session we joked: “PyCharm should get a big ol’ booth next year and host the Humble Bundlers.” And here we are…joke-driven development.
We have much more to announce, so stay tuned to our blog, Twitter, and most importantly each of the Python Content Creators. This is going to be fun.


April 10, 2019 06:39 PM UTC

Stack Abuse
Introduction to the Python lxml Library

lxml is a Python library which allows for easy handling of XML and HTML files, and can also be used for web scraping. There are a lot of off-the-shelf XML parsers out there, but for better results, developers sometimes prefer to write their own XML and HTML parsers. This is when the lxml library comes to play. The key benefits of this library are that it's ease of use, extremely fast when parsing large documents, very well documented, and provides easy conversion of data to Python data types, resulting in easier file manipulation.
In this tutorial, we will deep dive into Python's lxml library, starting with how to set it up for different operating systems, and then discussing its benefits and the wide range of functionalities it offers. 
Installation
There are multiple ways to install lxml on your system. We'll explore some of them below. 
Using Pip
Pip is a Python package manager which is used to download and install Python libraries to your local system with ease i.e. it downloads and installs all the dependencies for the package you're installing, as well.
If you have pip installed on your system, simply run the following command in terminal or command prompt:
$ pip install lxml

Using apt-get
If you're using MacOS or Linux, you can install lxml by running this command in your terminal:
$ sudo apt-get install python-lxml

Using easy_install
You probably won't get to this part, but if none of the above commands works for you for some reason, try using easy_install:
$ easy_install lxml

Note: If you wish to install any particular version of lxml, you can simply state it when you run the command in the command prompt or terminal like this, lxml==3.x.y. 
By now, you should have a copy of the lxml library installed on your local machine. Let's now get our hands dirty and see what cool things can be done using this library. 
Functionality
To be able to use the lxml library in your program, you first need to import it. You can do that by using the following command:
from lxml import etree as et  

This will import the etree module, the module of our interest, from the lxml library.
Creating HTML/XML Documents
Using the etree module, we can create XML/HTML elements and their subelements, which is a very useful thing if we're trying to write or manipulate an HTML or XML file. Let's try to create the basic structure of an HTML file using etree:
root = et.Element('html', version="5.0")

# Pass the parent node, name of the child node,
# and any number of optional attributes
et.SubElement(root, 'head')  
et.SubElement(root, 'title', bgcolor="red", fontsize='22')  
et.SubElement(root, 'body', fontsize="15")  

In the code above, you need to know that the Element function requires at least one parameter, whereas the SubElement function requires at least two. This is because the Element function only 'requires' the name of the element to be created, whereas the SubElement function requires the name of both the root node and the child node to be created.
It's also important to know that both these functions only have a lower bound to the number of arguments they can accept, but no upper bound because you can associate as many attributes with them as you want. To add an attribute to an element, simply add an additional parameter to the (Sub)Element function and specify your attribute in the form of attributeName='attribute value'.
Let's try to run the code we wrote above to gain a better intuition regarding these functions:
# Use pretty_print=True to indent the HTML output
print (et.tostring(root, pretty_print=True).decode("utf-8"))  

Output:
<html version="5.0">  
  <head/>
  <title bgcolor="red" fontsize="22"/>
  <body fontsize="15"/>
</html>  

There's another way to create and organize your elements in a hierarchical manner. Let's explore that as well:
root = et.Element('html')  
root.append(et.SubElement('head'))  
root.append(et.SubElement('body'))  

So in this case whenever we create a new element, we simply append it to the root/parent node. 
Parsing HTML/XML Documents
Until now, we have only considered creating new elements, assigning attributes to them, etc. Let's now see an example where we already have an HTML or XML file, and we wish to parse it to extract certain information. Assuming that we have the HTML file that we created in the first example, let's try to get the tag name of one specific element, followed by printing the tag names of all the elements. 
print(root.tag)  

Output:
html  

Now to iterate through all the child elements in the root node and print their tags:
for e in root:  
    print(e.tag)

Output:
head  
title  
body  

Working with Attributes
Let's now see how we associate attributes to existing elements, as well as how to retrieve the value of a particular attribute for a given element.
Using the same root element as before, try out the following code:
root.set('newAttribute', 'attributeValue') 

# Print root again to see if the new attribute has been added
print(et.tostring(root, pretty_print=True).decode("utf-8"))  

Output:
<html version="5.0" newAttribute="attributeValue">  
  <head/>
  <title bgcolor="red" fontsize="22"/>
  <body fontsize="15"/>
</html>  

Here we can see that the newAttribute="attributeValue" has indeed been added to the root element.
Let's now try to get the values of the attributes we have set in the above code. Here we access a child element using array indexing on the root element, and then use the get() method to retrieve the attribute:
print(root.get('newAttribute'))  
print(root[1].get('alpha')) # root[1] accesses the `title` element  
print(root[1].get('bgcolor'))  

Output:
attributeValue  
None  
red  

Retrieving Text from Elements
Now that we have seen basic functionalities of the etree module, let's try to do some more interesting things with our HTML and XML files. Almost always, these files have some text in between the tags. So, let's see how we can add text to our elements:
# Copying the code from the very first example
root = et.Element('html', version="5.0")  
et.SubElement(root, 'head')  
et.SubElement(root, 'title', bgcolor="red", fontsize="22")  
et.SubElement(root, 'body', fontsize="15")

# Add text to the Elements and SubElements
root.text = "This is an HTML file"  
root[0].text = "This is the head of that file"  
root[1].text = "This is the title of that file"  
root[2].text = "This is the body of that file and would contain paragraphs etc"

print(et.tostring(root, pretty_print=True).decode("utf-8"))  

Output:
<html version="5.0">This is an HTML file<head>This is the head of that file</head><title bgcolor="red" fontsize="22">This is the title of that file</title><body fontsize="15">This is the body of that file and would contain paragraphs etc</body></html>  

Check if an Element has Children
Next, there are two very important things that we should be able to check, as that is required in a lot of web scraping applications for exception handling. First thing we'd like to check is whether or not an element has children, and second is whether or not a node is an Element.
Let's do that for the nodes we created above:
if len(root) > 0:  
    print("True")
else:  
    print("False")

The above code will output "True" since the root node does have child nodes. However, if we check the same thing for the root's child nodes, like in the code below, the output will be "False".
for i in range(len(root)):  
    if (len(root[i]) > 0):
        print("True")
    else:
        print("False")

Output:
False  
False  
False  

Now let's do the same thing to see if each of the nodes is an Element or not:
for i in range(len(root)):  
    print(et.iselement(root[i]))

Output:
True  
True  
True  

The iselement method is helpful for determining if you have a valid Element object, and thus if you can continue traversing it using the methods we've shown here.
Check if an Element has a Parent
Just now, we showed how to go down the hierarchy, i.e. how to check if an element has children or not, and now in this section we will try to go up the hierarchy, i.e. how to check and get the parent of a child node.
print(root.getparent())  
print(root[0].getparent())  
print(root[1].getparent())  

The first line should return nothing (aka None) as the root node itself doesn't have any parent. The other two should both point to the root element i.e. the HTML tag. Let's check the output to see if it is what we expect:
Output:
None  
<Element html at 0x1103c9688>  
<Element html at 0x1103c9688>  

Retrieving Element Siblings
In this section we will learn how to traverse sideways in the hierarchy, which retrieves an element's siblings in the tree. 
Traversing the tree sideways is quite similar to navigating it vertically. For the latter, we used the getparent and the length of the element, for the former, we'll use getnext and getprevious functions. Let's try them on nodes that we previously created to see how they work:
# root[1] is the `title` tag
print(root[1].getnext()) # The tag after the `title` tag  
print(root[1].getprevious()) # The tag before the `title` tag  

Output:
<Element body at 0x10b5a75c8>  
<Element head at 0x10b5a76c8>  

Here you can see that root[1].getnext() retrieved the "body" tag since it was the next element, and root[1].getprevious() retrieved the "head" tag.
Similarly, if we had used the getprevious function on root, it would have returned None, and if we had used the getnext function on root[2], it would also have returned None.
Parsing XML from a String
Moving on, if we have an XML or HTML file and we wish to parse the raw string in order to obtain or manipulate the required information, we can do so by following the example below:
root = et.XML('<html version="5.0">This is an HTML file<head>This is the head of that file</head><title bgcolor="red" fontsize="22">This is the title of that file</title><body fontsize="15">This is the body of that file and would contain paragraphs etc</body></html>')  
root[1].text = "The title text has changed!"  
print(et.tostring(root, xml_declaration=True).decode('utf-8'))  

Output:
<?xml version='1.0' encoding='ASCII'?>  
<html version="5.0">This is an HTML file<head>This is the head of that file</head><title bgcolor="red" fontsize="22">The title text has changed!</title><body fontsize="15">This is the body of that file and would contain paragraphs etc</body></html>  

As you can see, we successfully changed some text in the HTML document. The XML doctype declaration was also automatically added because of the xml_declaration parameter that we passed to the tostring function.
Searching for Elements
The last thing we're going to discuss is quite handy when parsing XML and HTML files. We will be checking ways through which we can see if an Element has any particular type of children, and if it does what do they contain.
This has many practical use-cases, such as finding all of the link elements on a particular web page.
print(root.find('a')) # No <a> tags exist, so this will be `None`  
print(root.find('head').tag)  
print(root.findtext('title')) # Directly retrieve the the title tag's text  

Output:
None  
head  
This is the title of that file  

Conclusion
In the above tutorial, we started with a basic introduction to what lxml library is and what it is used for. After that, we learned how to install it on different environments like Windows, Linux, etc. Moving on, we explored different functionalities that could help us in traversing through the HTML/XML tree vertically as well as sideways. In the end, we also discussed ways to find elements in our tree, and as well as obtain information from them.

April 10, 2019 04:17 PM UTC

Real Python
How to Create an Index in Django Without Downtime

Managing database migrations is a great challenge in any software project. Luckily, as of version 1.7, Django comes with a built-in migration framework. The framework is very powerful and useful in managing change in databases. But the flexibility provided by the framework required some compromises. To understand the limitations of Django migrations, you are going to tackle a well known problem: creating an index in Django with no downtime.
In this tutorial, you’ll learn:

How and when Django generates new migrations
How to inspect the commands Django generates to execute migrations
How to safely modify migrations to fit your needs

This intermediate-level tutorial is designed for readers who are already familiar with Django migrations. For an introduction to that topic, check out Django Migrations: A Primer.
Free Bonus: Click here to get free access to additional Django tutorials and resources you can use to deepen your Python web development skills.
The Problem With Creating an Index in Django Migrations
A common change that usually becomes necessary when the data stored by your application grows is adding an index. Indexes are used to speed up queries and make your app feel fast and responsive.
In most databases, adding an index requires an exclusive lock on the table. An exclusive lock prevents data modification (DML) operations such as UPDATE, INSERT, and DELETE, while the index is created.
Locks are obtained implicitly by the database when executing certain operations. For example, when a user logs into your app, Django will update the last_login field in the auth_user table. To perform the update, the database will first have to obtain a lock on the row. If the row is currently being locked by another connection, then you might get a database exception.
Locking a table might pose a problem when it’s necessary to keep the system available during migrations. The bigger the table, the longer it can take to create the index. The longer it takes to create the index, the longer the system is unavailable or unresponsive to users.
Some database vendors provide a way to create an index without locking the table. For example, to create an index in PostgreSQL without locking a table, you can use the CONCURRENTLY keyword:
CREATE INDEX CONCURRENTLY ix ON table (column);

In Oracle, there is an ONLINE option to allow DML operations on the table while the index is created:
CREATE INDEX ix ON table (column) ONLINE;

When generating migrations, Django will not use these special keywords. Running the migration as is will make the database acquire an exclusive lock on the table and prevent DML operations while the index is created.
Creating an index concurrently has some caveats. It’s important to understand the issues specific to your database backend in advance. For example, one caveat in PostgreSQL is that creating an index concurrently takes longer because it requires an additional table scan.
In this tutorial, you’ll use Django migrations to create an index on a large table, without causing any downtime.

Note: To follow this tutorial, it is recommended that you use a PostgreSQL backend, Django 2.x, and Python 3.
It is possible to follow along with other database backends as well. In places where SQL features unique to PostgreSQL are used, change the SQL to match your database backend.

Setup
You’re going to use a made up Sale model in an app called app. In a real life situation, models such as Sale are the main tables in the database, and they will usually be very big and store a lot of data:
# models.py

from django.db import models

class Sale(models.Model):
    sold_at = models.DateTimeField(
        auto_now_add=True,
    )
    charged_amount = models.PositiveIntegerField()

To create the table, generate the initial migration and apply it:
$ python manage.py makemigrations
Migrations for 'app':
  app/migrations/0001_initial.py
    - Create model Sale

$ python manage migrate
Operations to perform:
  Apply all migrations: app
Running migrations:
  Applying app.0001_initial... OK

After a while, the sales table becomes very big, and users start to complain about slowness. While monitoring the database, you noticed that a lot of queries use the sold_at column. To speed things up, you decide that you need an index on the column.
To add an index on sold_at, you make the following change to the model:
# models.py

from django.db import models

class Sale(models.Model):
    sold_at = models.DateTimeField(
        auto_now_add=True,
        db_index=True,
    )
    charged_amount = models.PositiveIntegerField()

If you run this migration as it is, then Django will create the index on the table, and it will be locked until the index is completed. It can take a while to create an index on a very large table, and you want to avoid downtime.
On a local development environment with a small dataset and very few connections, this migration might feel instantaneous. However, on large datasets with many concurrent connections, obtaining a lock and creating the index can take a while.
In the next steps, you are going to modify migrations created by Django to create the index without causing any downtime.
Fake Migration
The first approach is to create the index manually. You are going to generate the migration, but you are not going to actually let Django apply it. Instead, you will run the SQL manually in the database and then make Django think the migration completed.
First, generate the migration:
$ python manage.py makemigrations --name add_index_fake
Migrations for 'app':
  app/migrations/0002_add_index_fake.py
    - Alter field sold_at on sale

Use the sqlmigrate command to view the SQL Django will use to execute this migration:
$ python manage.py sqlmigrate app 0002

BEGIN;
--
-- Alter field sold_at on sale
--
CREATE INDEX "app_sale_sold_at_b9438ae4" ON "app_sale" ("sold_at");
COMMIT;

You want to create the index without locking the table, so you need to modify the command. Add the CONCURRENTLY keyword and execute in the database:
app=# CREATE INDEX CONCURRENTLY "app_sale_sold_at_b9438ae4"
ON "app_sale" ("sold_at");

CREATE INDEX

Notice that you executed the command without the BEGIN and COMMIT parts. Omitting these keywords will execute the commands without a database transaction. We will discuss database transactions later in the article.
After you executed the command, if you try to apply migrations, then you will get the following error:
$ python manage.py migrate

Operations to perform:
  Apply all migrations: app
Running migrations:
  Applying app.0002_add_index_fake...Traceback (most recent call last):
  File "venv/lib/python3.7/site-packages/django/db/backends/utils.py", line 85, in _execute
    return self.cursor.execute(sql, params)

psycopg2.ProgrammingError: relation "app_sale_sold_at_b9438ae4" already exists

Django complains that the index already exists, so it can’t proceed with the migration. You just created the index directly in the database, so now you need to make Django think that the migration was already applied.
How to Fake a Migration
Django provides a built-in way of marking migrations as executed, without actually executing them. To use this option, set the --fake flag when applying the migration:
$ python manage.py migrate --fake
Operations to perform:
  Apply all migrations: app
Running migrations:
  Applying app.0002_add_index_fake... FAKED

Django didn’t raise an error this time. In fact, Django didn’t really apply any migration. It just marked it as executed (or FAKED).
Here are some issues to consider when faking migrations:


The manual command must be equivalent to the SQL generated by Django: You need to make sure the command you execute is equivalent to the SQL generated by Django. Use sqlmigrate to produce the SQL command. If the commands do not match, then you might end up with inconsistencies between the database and the models state.


Other unapplied migrations will also be faked: When you have multiple unapplied migrations, they will all be faked. Before you apply migrations, it’s important to make sure only the migrations you want to fake are unapplied. Otherwise, you might end up with inconsistencies. Another option is to specify the exact migration you want to fake.


Direct access to the database is required: You need to run the SQL command in the database. This is not always an option. Also, executing commands directly in a production database is dangerous and should be avoided when possible.


Automated deployment processes might need adjustments: If you automated the deployment process (using CI, CD, or other automation tools), then you might need to alter the process to fake migrations. This is not always desirable.


Cleanup
Before moving on to the next section, you need to bring the database back to its state right after the initial migration. To do that, migrate back to the initial migration:
$ python manage.py migrate 0001
Operations to perform:
  Target specific migration: 0001_initial, from app
Running migrations:
  Rendering model states... DONE
  Unapplying app.0002_add_index_fake... OK

Django unapplied the changes made in the second migration, so now it’s safe to also delete the file:
$ rm app/migrations/0002_add_index_fake.py

To make sure you did everything right, inspect the migrations:
$ python manage.py showmigrations app
app
 [X] 0001_initial

The initial migration was applied, and there are no unapplied migrations.
Execute Raw SQL in Migrations
In the previous section, you executed SQL directly in the database and faked the migration. This gets the job done, but there is a better solution.
Django provides a way to execute raw SQL in migrations using RunSQL. Let’s try to use it instead of executing the command directly in the database.
First, generate a new empty migration:
$ python manage.py makemigrations app --empty --name add_index_runsql
Migrations for 'app':
  app/migrations/0002_add_index_runsql.py

Next, edit the migration file and add a RunSQL operation:
# migrations/0002_add_index_runsql.py

from django.db import migrations, models

class Migration(migrations.Migration):
    atomic = False

    dependencies = [
        ('app', '0001_initial'),
    ]

    operations = [
        migrations.RunSQL(
            'CREATE INDEX "app_sale_sold_at_b9438ae4" '
            'ON "app_sale" ("sold_at");',
        ),
    ]

When you run the migration, you will get the following output:
$ python manage.py migrate
Operations to perform:
  Apply all migrations: app
Running migrations:
  Applying app.0002_add_index_runsql... OK

This is looking good, but there is a problem. Let’s try to generate migrations again:
$ python manage.py makemigrations --name leftover_migration
Migrations for 'app':
  app/migrations/0003_leftover_migration.py
    - Alter field sold_at on sale

Django generated the same migration again. Why did it do that?
Cleanup
Before we can answer that question, you need to clean up and undo the changes you made to the database. Start by deleting the last migration. It was not applied, so it’s safe to delete:
$ rm app/migrations/0003_leftover_migration.py

Next, list the migrations for the app app:
$ python manage.py showmigrations app
app
 [X] 0001_initial
 [X] 0002_add_index_runsql

The third migration is gone, but the second is applied. You want to get back to the state right after the initial migration. Try to migrate back to the initial migration as you did in the previous section:
$ python manage.py migrate app 0001
Operations to perform:
  Target specific migration: 0001_initial, from app
Running migrations:
  Rendering model states... DONE
  Unapplying app.0002_add_index_runsql...Traceback (most recent call last):

NotImplementedError: You cannot reverse this operation

Django is unable to reverse the migration.
Reverse Migration Operation
To reverse a migration, Django executes an opposite action for every operation. In this case, the reverse of adding an index is to drop it. As you’ve already seen, when a migration is reversible, you can unapply it. Just like you can use checkout in Git, you can reverse a migration if you execute migrate to an earlier migration.
Many built-in migration operations already define a reverse action. For example, the reverse action for adding a field is to drop the corresponding column. The reverse action for creating a model is to drop the corresponding table.
Some migration operations are not reversible. For example, there is no reverse action for removing a field or deleting a model, because once the migration was applied, the data is gone.
In the previous section, you used the RunSQL operation. When you tried to reverse the migration, you encountered an error. According to the error, one of the operations in the migration cannot be reversed. Django is unable to reverse raw SQL by default. Because Django has no knowledge of what was executed by the operation, it cannot generate an opposite action automatically.
How to Make a Migration Reversible
For a migration to be reversible, all the operations in it must be reversible. It’s not possible to reverse part of a migration, so a single non-reversible operation will make the entire migration non-reversible.
To make a RunSQL operation reversible, you must provide SQL to execute when the operation is reversed. The reverse SQL is provided in the reverse_sql argument.
The opposite action to adding an index is to drop it. To make your migration reversible, provide the reverse_sql to drop the index:
# migrations/0002_add_index_runsql.py

from django.db import migrations, models

class Migration(migrations.Migration):
    atomic = False

    dependencies = [
        ('app', '0001_initial'),
    ]

    operations = [
        migrations.RunSQL(
            'CREATE INDEX "app_sale_sold_at_b9438ae4" '
            'ON "app_sale" ("sold_at");',

            reverse_sql='DROP INDEX "app_sale_sold_at_b9438ae4";',
        ),
    ]

Now try to reverse the migration:
$ python manage.py showmigrations app
app
 [X] 0001_initial
 [X] 0002_add_index_runsql

$ python manage.py migrate app 0001
Operations to perform:
  Target specific migration: 0001_initial, from app
Running migrations:
  Rendering model states... DONE
 Unapplying app.0002_add_index_runsql... OK

$ python manage.py showmigrations app
app
 [X] 0001_initial
 [ ] 0002_add_index_runsql

The second migration was reversed, and the index was dropped by Django. Now it’s safe to delete the migration file:
$ rm app/migrations/0002_add_index_runsql.py

It’s always a good idea to provide reverse_sql. In situations where reversing a raw SQL operation does not require any action, you can mark the operation as reversible using the special sentinel migrations.RunSQL.noop:
migrations.RunSQL(
    sql='...',  # Your forward SQL here
    reverse_sql=migrations.RunSQL.noop,
),

Understand Model State and Database State
In your previous attempt to create the index manually using RunSQL, Django generated the same migration over and over again even though the index was created in the database. To understand why Django did that, you first need to understand how Django decides when to generate new migrations.
When Django Generates a New Migration
In the process of generating and applying migrations, Django syncs between the state of the database and the state of the models. For example, when you add a field to a model, Django adds a column to the table. When you remove a field from the model, Django removes the column from the table.
To sync between the models and the database, Django maintains a state that represents the models. To sync the database with the models, Django generates migration operations. Migration operations translate to a vendor specific SQL that can be executed in the database. When all migration operations are executed, the database and the models are expected to be consistent.
To get the state of the database, Django aggregates the operations from all past migrations. When the aggregated state of the migrations is not consistent with the state of the models, Django generates a new migration.
In the previous example, you created the index using raw SQL. Django did not know you created the index because you didn’t use a familiar migration operation.
When Django aggregated all the migrations and compared them with the state of the models, it found that an index was missing. This is why, even after you created the index manually, Django still thought it was missing and generated a new migration for it.
How to Separate Database and State in Migrations
Since Django is unable to create the index the way you want it to, you want to provide your own SQL but still let Django know you created it.
In other words, you need to execute something in the database and provide Django with the migration operation to sync its internal state. To do that, Django provides us with a special migration operation called SeparateDatabaseAndState. This operation is not well known and should be reserved for special cases such as this one.
It’s much easier to edit migrations than write them from scratch, so start by generating a migration the usual way:
$ python manage.py makemigrations --name add_index_separate_database_and_state

Migrations for 'app':
  app/migrations/0002_add_index_separate_database_and_state.py
    - Alter field sold_at on sale

This is the contents of the migration generated by Django, same as before:
# migrations/0002_add_index_separate_database_and_state.py

from django.db import migrations, models

class Migration(migrations.Migration):

    dependencies = [
        ('app', '0001_initial'),
    ]

    operations = [
        migrations.AlterField(
            model_name='sale',
            name='sold_at',
            field=models.DateTimeField(
                auto_now_add=True,
                db_index=True,
            ),
        ),
    ]

Django generated an AlterField operation on the field sold_at. The operation will create an index and update the state. We want to keep this operation but provide a different command to execute in the database.
Once again, to get the command, use the SQL generated by Django:
$ python manage.py sqlmigrate app 0002
BEGIN;
--
-- Alter field sold_at on sale
--
CREATE INDEX "app_sale_sold_at_b9438ae4" ON "app_sale" ("sold_at");
COMMIT;

Add the CONCURRENTLY keyword in the appropriate place:
CREATE INDEX CONCURRENTLY "app_sale_sold_at_b9438ae4"
ON "app_sale" ("sold_at");

Next, edit the migration file and use SeparateDatabaseAndState to provide your modified SQL command for execution:
# migrations/0002_add_index_separate_database_and_state.py

from django.db import migrations, models

class Migration(migrations.Migration):

    dependencies = [
        ('app', '0001_initial'),
    ]

    operations = [

        migrations.SeparateDatabaseAndState(

            state_operations=[
                migrations.AlterField(
                    model_name='sale',
                    name='sold_at',
                    field=models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                    ),
                ),
            ],

            database_operations=[
                migrations.RunSQL(sql="""
                    CREATE INDEX CONCURRENTLY "app_sale_sold_at_b9438ae4"
                    ON "app_sale" ("sold_at");
                """, reverse_sql="""
                    DROP INDEX "app_sale_sold_at_b9438ae4";
                """),
            ],
        ),

    ],

The migration operation SeparateDatabaseAndState accepts 2 lists of operations:

state_operations are operations to apply on the internal model state. They do not effect the database.
database_operations are operations to apply to the database.

You kept the original operation generated by Django in state_operations. When using SeparateDatabaseAndState, this is what you will usually want to do. Notice that the db_index=True argument is provided to the field. This migration operation will let Django know that there is an index on the field.
You used the SQL generated by Django and added the CONCURRENTLY keyword. You used the special action RunSQL to execute raw SQL in the migration.
If you try to run the migration, you will get the following output:
$ python manage.py migrate app
Operations to perform:
  Apply all migrations: app
Running migrations:
  Applying app.0002_add_index_separate_database_and_state...Traceback (most recent call last):
  File "/venv/lib/python3.7/site-packages/django/db/backends/utils.py", line 83, in _execute
    return self.cursor.execute(sql)
psycopg2.InternalError: CREATE INDEX CONCURRENTLY cannot run inside a transaction block

Non-Atomic Migrations
In SQL, CREATE, DROP, ALTER, and TRUNCATE operations are referred to as Data Definition Language (DDL). In databases that support transactional DDL, such as PostgreSQL, Django executes migrations inside a database transaction by default. However, according to the error above, PostgreSQL cannot create an index concurrently inside a transaction block.
To be able to create an index concurrently within a migration, you need to tell Django to not execute the migration in a database transaction. To do that, you mark the migration as non-atomic by setting atomic to False:
# migrations/0002_add_index_separate_database_and_state.py

from django.db import migrations, models

class Migration(migrations.Migration):
    atomic = False

    dependencies = [
        ('app', '0001_initial'),
    ]

    operations = [

        migrations.SeparateDatabaseAndState(

            state_operations=[
                migrations.AlterField(
                    model_name='sale',
                    name='sold_at',
                    field=models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                    ),
                ),
            ],

            database_operations=[
                migrations.RunSQL(sql="""
                    CREATE INDEX CONCURRENTLY "app_sale_sold_at_b9438ae4"
                    ON "app_sale" ("sold_at");
                """,
                reverse_sql="""
                    DROP INDEX "app_sale_sold_at_b9438ae4";
                """),
            ],
        ),

    ],

After you marked the migration as non-atomic, you can run the migration:
$ python manage.py migrate app
Operations to perform:
  Apply all migrations: app
Running migrations:
  Applying app.0002_add_index_separate_database_and_state... OK

You just executed the migration without causing any downtime.
Here are some issues to consider when you’re using SeparateDatabaseAndState:


Database operations must be equivalent to state operations: Inconsistencies between the database and model state can cause a lot of trouble. A good starting point is to keep the operations generated by Django in state_operations and edit the output of sqlmigrate to use in database_operations.


Non atomic migrations cannot rollback in case of error: If there is an error during the migration, then you won’t be able to rollback. You would have to either rollback the migration or complete it manually. It’s a good idea to keep the operations executed inside a non-atomic migration to a minimum. If you have additional operations in the migration, move them to a new migration.


Migration might be vendor specific: The SQL generated by Django is specific to the database backend used in the project. It might work with other database backends, but that is not guaranteed. If you need to support multiple database backends, you need to make some adjustments to this approach.


Conclusion
You started this tutorial with a large table and a problem. You wanted to make your app faster for your users, and you wanted to do that without causing them any downtime.
By the end of the tutorial, you managed to generate and safely modify a Django migration to achieve this goal. You tackled different problems along the way and managed to overcome them using built-in tools provided by the migrations framework.
In this tutorial, you learned the following:

How Django migrations work internally using model and database state, and when new migrations are generated
How to execute custom SQL in migrations using the RunSQL action
What reversible migrations are, and how to make a RunSQL action reversible
What atomic migrations are, and how to change the default behavior according to your needs
How to safely execute complex migrations in Django

The separation between model and database state is an important concept. Once you understand it, and how to utilize it, you can overcome many limitations of the built-in migration operations. Some use cases that come to mind include adding an index that was already created in the database and providing vendor specific arguments to DDL commands.

[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short & sweet Python Trick delivered to your inbox every couple of days. >> Click here to learn more and see examples ]

April 10, 2019 02:00 PM UTC








RSS feed
Titles Only
Powered by Planet!

Other Python Planets
            
Python Summer of Code
Planet Python Francophone
Planet Python Argentina
Planet Python Japan
Planet Python Brasil
Planet Python Indonesia
Planet Python Poland

Python Libraries
          
PySoy
SciPy
SymPy
Twisted

Python/Web Planets
          
CherryPy
Django Community
Plone
Turbogears

Other Languages
          
Haskell
Lisp
Parrot
Perl
Ruby

Databases
          
MySQL
PostgreSQL


Subscriptions
          
[OPML feed]
"Control F'd"

"Fredrik Håård's Blaag"

"Menno's Musings"

"Michael J.T. O'Kelly"

"Morphex's Blogologue"

"Speno's Pythonic Avocado"

"William's Journal"

2degrees

4teamwork

A. Jesse Jiryu Davis

ABlog for Sphinx

AWeber Engineering

Aahz

Abhijeet Pal

Abu Ashraf Masnun

Adam Pletcher

Agendaless Consulting

Al-Ahmadgaid Asaad

Albert Hopkins

Alec Munro

Alex Clark

Alex Grönholm

Alex Morozov

Alexander Limi

Alexandre Conrad

Alexandre Vassalotti

Alexey Evseev

Allison Kaptur

Amit Saha

Amjith Ramanujam

AmvTek

Anarcat

Anastasios Hatzis

Anatoly Techtonik

Andre Roberge

Andrea Grandi

Andrew Dalke

Andriy Kornatskyy

Andy Dustman

Andy R. Terrel

Ankit Chandawala

Anna Martelli Ravenscroft

Anthony Baxter

Anton Belyaev

Anton Bobrov

Anwesha Das

AppNeta Blog

Armin Ronacher

Arnav Khare

Artem Golubin

Artem Rys

Ashish Vidyarthi

Astro Code School

Atul Varma -- Toolness

Audrey Roy Greenfeld

Automating OSINT

Baiju Muthukadan

Bajusz Tamás

Balthazar Rouberol

BangPypers

BeDjango

Ben Bass

Ben Rousch

Ben Tappin

Benjamin Peterson

Benji York

Bertrand Mathieu

Bhishan Bhandari

Bill Ward / AdminTome

BioPython News

Bit of Cheese

Blue Yonder Tech

BlueBream

Bojan Mihelac

Brad Lucas

Brandon Rhodes

BreadcrumbsCollector

Brendan Scott

Brett Cannon

Brian Harring

Brian Okken

Bruno Oliveira

Bruno Rocha

Caktus Consulting Group

Calvin Cheng

Calvin Spealman

Carl Chenet

Carl Trachte

Carlos Eduardo de Paula

Carlos de la Guardia

Casey Duncan

Catalin George Festila

Catherine Devlin

Checking and Sharing

Chris Hager

Chris Leary

Chris McAvoy

Chris McDonough

Chris Miles

Chris Miller

Chris Mitchell

Chris Moffitt

Chris Rose

Chris Warrick

Christian Barra

Christian Heimes

Christian Scholz

Christoph Zwerschke

Christopher Lenz

Chuck Thier

ClusterHQ

Cobe.io

CodeSnipers

Codementor

Coding Diet

Collin Winter

Continuum Analytics Blog

Continuum Analytics News

Continuum Blog

Core Software

Corey Goldberg

Corey Oordt

Cormoran Project

Craig Kerstiens

Cross-Platform Command Line Tools

CubicWeb

Curtis Miller

DSPIllustrations.com

DaPythonista

Daily Tech Video (Python)

Dalius Dobravolskas

Dallas Fort Worth Pythoneers

Damián Avila

Dan Crosta

Dan Stromberg

Dan Yeaw

Daniel Bader

Daniel Nouri

Daniel Roy Greenfeld

Dariusz Suchojad

Data Community DC

Data School

DataCamp

Dataquest

Dave Beazley

David Goodger

David Grant

David J C Beach

David MacIver

David Malcolm

David Marte

David Stanek

David Szotten

Davide Moro

Davy Mitchell

Davy Wybiral

DeGizmo

Denis Kurov

Derrick Petzold

Dethe Elza

Diego Garcia

Django Weblog

Django Weekly

Djangostars

Doing Math with Python

Doug Hellmann

Doug Latornell

Dougal Matthews

Douglas Napoleone

DreamHost

Duncan McGreggor

Dusty Phillips

EasyGUI

Ed Crewe

Ed Taekema

Edward K. Ream

Eko S. Wibowo

Eli Bendersky

Eniram Ltd.

Enthought

Eray Özkural (examachine)

Eric Holscher

Erik Marsja

Etienne Desautels

EuroPython

EuroPython Society

Even Wiik Thomassen

Evennia

Experienced Django

Fabio Zadrozny

Fazal Majid

Filip Wasilewski

Filipe Saraiva

Flavio Coelho

Flavio Percoco

Floris Bruynooghe

Francisco Souza

Frank Wierzbicki

François Dion

François Marier

Frederik Rietdijk

Fredrik Lundh

From Python Import Podcast

Full Stack Python

Gaël Varoquaux

Gabriel Pettier

Galvanize

Gary Bernhardt

Gary Wilson

Geek Scrap

Georg Brandl

Georges Dubus

Ghaandee on IT

Giampaolo Rodola

Giulio Fidente

Glenn Franxman

Glyph Lefkowitz

Go Deh

GoDjango

Gocept Weblog

Godson Gera

Gonçalo Margalho

Graeme Cross

Graham Dumpleton

Graham Wheeler

Grant Baillie

Grant Rettke

Greg Taylor

Gridarrow

Grig Gheorghiu

Grzegorz Śliwiński

Guido van Rossum

Guilherme Toti

Gustavo Narea

Gustavo Niemeyer

Guyon Moree

Gökhan Sever

Hany Fahim

Hector Garcia

Heikki Toivonen

Hernan Grecco

Hilary Mason

Holger Krekel

Holger Peters

Hynek Schlawack

IO Digital Sec

Ian Ozsvald

Ilian Iliev

Import Python

Intellimath blog

Ionel Cristian Maries

Iraj Jelodari

IronPython-URLs

Ishan Chattopadhyaya

Israel Fruchter

Itamar Turner Trauring

Ivan Krstic

Jack Diederich

Jacob Perkins

Jahongir Rahmonov

Jaime Buelta

Jamal Moir

James Bennett

James Mills

Jan-Carel Brand

Janusworx

Jarrod Millman

Jason Meyers

Jason Webb

Jaysinh Shukla

Jean-Louis Fuchs

Jean-Paul Calderone

Jeethu Rao

Jeff Bisbee

Jeff Bradberry

Jeff Hinrichs

Jeff Knupp

Jeff Shell

Jeremy Epstein

Jeremy Hylton

Jim Fulton

Jim Hughes

Joe Abbate

Joe Pitz

Johan Dahlin

John Anderson

John Burns

John Cook

John Jacobsen

John Paulett

Jon Parise

Jonathan Dobson

Jonathan Ellis

Jonathan Harrington

Jonathan Hartley

Jonathan LaCour

Jonathan Street

Jorge Niedbalski

Jorge Puente Sarrín

Jorgen Schäfer

Juan Manuel Contreras

Juan Rodríguez Monti

Juho Vepsäläinen

Julien Danjou

Julien Palard

Julien Tayon

Juri Pakaste

Just a little Python

Justin Mayer

Kai Lautaportti

Karim Elghamrawy

Kate Editor

Kay Hayen

Kay Schluehr

Kelly Yancey

Kenneth Reitz

Kevin Dahlhausen

Kevin Dangoor

Kiwi PyCon

Kogan Dev

Konrad Delong

Koodaamo

Kracekumar Ramaraju

Kristján Valur Jónsson

Kriti Godey

Kulbir Saini

Kumar McMillan

Kushal Das

Károly Nagy

Laurence Rowe

Laurent Luce

Laurent Szyster

Leigh Honeywell

Lennart Regebro

Leonhard Vogt

Lightning Fast Shop

Lintel Technologies

Lion Kimbro

Lionel Tan

Logilab

Low Kian Seong

Luca Botti

Ludovic Gasc

Ludvig Ericson

Luke Macken

Luke Plant

Maciej Fijalkowsk

Made With Mu

Mahmoud Hashemi

Malthe Borch

Manuel de la Pena Saenz

Marc Garcia

Marc Kerins

Marc Richter

Marc-André Lemburg

Marcos Dione

Marius Gedminas

Mark Dufour

Mark McLoughlin

Mark McMahon

Mark Mruss

Mark Ramm

Marko Samastur

Martijn Faassen

Martijn Pieters

Martin Fitzpatrick

Mathieu Virbel

Mats Kindahl

Matt Harrison

Matt Layman

Matt Reid

Matt Wilkes

Matthew Rocklin

Matthew Rollings

Matthew Wilson

Mattias Brändström

Mauveweb

Max Ischenko

Michael Bayer

Michael Becker

Michael Droettboom

Michael Foord

Michael Hudson

Michael Nelson

Michael Sparks

Michal Kwiatkowski

Michał Bultrowicz

Michele Simionato

Michy Alice

Mike C. Fletcher

Mike Driscoll

Mike Müller

Mikeal Rogers

Mikhail Korobov

Mikko Ohtamaa

Mitch Chapman

Mitchell Garnaat

Mitya Sirenef

Montreal Python User Group

Morten W Petersen

Moshe Zadka

Moya Project

Mozilla Web Development

Muharem Hrnjadovic

Mycli

Nadav Samet

Nadia Alramli

Naomi Ceder

Natan Zabkar

Nathan Lemoine

Neckbeard Republic

Ned Batchelder

Neil Schemenauer

Ng Pheng Siong

Nicholas Amorim

Nick Coghlan

Nick Craig-Wood

Nick Efford

Nick Janetakis

Nicola Iarocci

Nicolas Dumazet

Nicolas Paris

Nigel Babu

Nikola

Nikolaos Diamantis

Not Invented Here

NumFOCUS

Obey the Testing Goat

Ofosos

Oliver Andrich

Omaha Python Users Group

Ondřej Čertík

OpenHatch Python posts

Paolo Melchiorre

Pathwright

Patrice Neff

Patricio Paez

Patrick Kennedy

Patrick Stinson

Paul Bissex

Paul Everitt

Paul Harrison

Paul Redman

Paweł Fertyk

PayPal Engineering Blog

Pedro Lima

Petecode

Peter Bengtsson

Peter Eisentraut

Peter Fankhänel

Peter Harkins

Peter Hoffmann

Phil Hassey

Philip Jenvey

Philip Semanchuk

Philipp von Weitershausen

Philippe Normand

Phillip J. Eby

Pierre Carbonnelle

Podcast.__init__

Polyglot.Ninja()

Possbility and Probability

Pradeep Gowda

Pranav Pandey

Praveen Gollakota

Programando Ciência

Programiz

Programming Ideas With Jake

Przemysław Kołodziejczyk

PyBites

PyCarolinas

PyCharm

PyCoder’s Weekly

PyCon

PyCon Australia

PyCon Pune

PyCon.DE & PyData Karlsruhe

PyPy Development

PyTennessee

PyTexas

Pypix

Python 4 Kids

Python 411 Podcast

Python Advocacy

Python Anywhere

Python Bytes

Python Celery - Weekly Celery Tutorials and How-tos

Python Data

Python Diary

Python Does What?!

Python Engineering at Microsoft

Python Insider

Python Open Mike

Python Piedmont Triad User Group

Python Software Foundation

Python Sweetness

Python Testing Cookbook

Python User Groups

Python on Karan

Python with Myo

Python(x,y) News

PythonClub - A Brazilian collaborative blog about Python

PythonDebugging.com

PythonThreads

Pythonicity

Pythonology

Péter Szabó

Péter Zsoldos

R David Murray

RMOTR

Ralph Bean

Ralph Heinkel

Ram Rachum

Randell Benavidez

Randle Taylor

Randy Zwitch

Raymond Hettinger

Read the Docs

Real Python

Red Hat Developers

Reinout van Rees

Rene Dudfield

Reuven Lerner

Richard Gomes

Richard Jones

Richard Tew

Richard Wall

Rickard Lindberg

Rob Galanakis

Rob Golding

Rob Miller

Robert Brewer

Robert Collins

Robert Zaremba

Roberto Alsina

Robin Parmar

Robin Wilson

Roche Compaan

Rodrigo Araúj

Roman Imankulov

RoseHosting Blog

Ruslan Spivak

Ryan Cox

S. Lott

S. R. Krishnan

SDJournal

SPE Weblog

Salim Fadhley

Salman Haq

Samuel Sutch

Sandipan Dey

Sandro Tosi

Sayan Chowdhury

Scripting the web with Python

Sean McGrath

Selena Deckelmann

Semaphore Community

Senthil Kumaran

Server Density

Shannon -jj Behrens

ShiningPanda

Shopkick Tech Blog

Simeon Franklin

Simeon Visser

Simon

Simon Brunning

Simon Wittber

Simple is Better Than Complex

SoftFormance

Speed Matters

Spike ekipS

Spyder IDE

Stack Abuse

Stacks

Stanislas Morbieu

Starzel.de

Stefan Behnel

Stefan Petrea

Stefan Scherfke

Stein Magnus Jodal

Stephen Ferg

Steve Dower

Steve Holden

Steven Klass

Stijn Debrouwere

Stories in My Pocket

Stuart Gordon Reid

Stéphane Wirtel

Sumana Harihareswara - Cogito, Ergo Sumana

Sumith - Blog about SymPy/Python

Swaroop C H

Swisscom ICT

Sylvain Hellegouarch

Talk Python to Me

Tarek Ziade

Taylor Edmiston

Techiediaries - Django

Ted Leung

Tennessee Leeuwenburg

Terri Oda

Terry Jones

Terry Peppers

Test and Code

The Artificial Intelligence Cookbook

The Code Bits

The Data Scientist

The Digital Cat

The No Title® Tech Blog

The Occasional Occurrence

The Parcon Blog

The Python Papers

The Three of Wands

TheAutomatic.net

Thibauld Nion

Thomas Guest

Thomas Vander Stichele

Thomi Richards

Tiago Montes

Tibo Beijen

Tim Gilbert

Tim Golden

Tim Knapp

Tim Lesher

Tim van der Linden

Tobias Ivarsson

Toes to the Edge

Tom Christie

Tomasz Ducin

Tomasz Früboes

Tomaž Muraus

Tomer Filiba

Tony Breyal

Torsten Engelbrecht

Toshio Kuratomi

Travis Oliphant

Trey Hunner

Troy Melhase

Tryton News

Turnkey Linux

Twisted Matrix Labs

Two Bit Arcade

Uche Ogbuji

United Coders

V.S. Babu

Varun Nischal

Vasudev Ram

Vinay Sajip

Vinay Sajip (Logging)

Vinta Software

Virgil Dupras

Vladimir Iakolev

Vladimir Perić

Wallaroo Labs

Wallix

Wayne Witzel

Weekly Python Chat

Weekly Python StackOverflow Report

Wes Mason

Wesley Chun

Wichert Akkerman

Will Kahn-Greene

Will McGugan

Will Pierce

William Minchin

William Reade

William Thompson

Wingware Blog

Wingware News

Wraithan

Yaco

Yaniv Aknin

Yann Larrivée

Yasoob Khalid

Yuval Greenfield

Zaki Akhmad

Zato Blog

Zero-with-Dot (Oleg Żero)

ZeroDB

bottlepy-dev

codeboje

codingdirectional

eGenix.com

eRambler

gamingdirectional

hypothesis.works articles

kdev-python

leftmouseclickin

meejah.ca

nl-project

pgcli

py.CheckIO

pythonwise

qutebrowser development blog

saaj/recollection

tryexceptpass

Éric Araujo

Łukasz Langa

بايثون العربي



    To request addition or removal:
    Open an issue on github
    or e-mail planet at python.org
    (note, responses can take up to a few days) 
    








    function setAttributeOnload(object, attribute, val) {
      if(window.addEventListener) {
        window.addEventListener('load',
          function(){ object[attribute] = val; }, false);
      } else {
        window.attachEvent('onload', function(){ object[attribute] = val; });
      }
    }
  



      gapi.load("gapi.iframes:gapi.iframes.style.bubble", function() {
        if (gapi.iframes && gapi.iframes.getContext) {
          gapi.iframes.getContext().openChild({
              url: 'https://www.blogger.com/navbar.g?targetBlogID\x3d8520\x26blogName\x3dPython+Software+Foundation+News\x26publishMode\x3dPUBLISH_MODE_BLOGSPOT\x26navbarType\x3dLIGHT\x26layoutType\x3dLAYOUTS\x26searchRoot\x3dhttps://pyfound.blogspot.com/search\x26blogLocale\x3den\x26v\x3d2\x26homepageUrl\x3dhttp://pyfound.blogspot.com/\x26vt\x3d7604251862418772546',
              where: document.getElementById("navbar-iframe-container"),
              id: "navbar-iframe"
          });
        }
      });
    
(function() {
var script = document.createElement('script');
script.type = 'text/javascript';
script.src = '//pagead2.googlesyndication.com/pagead/js/google_top_exp.js';
var head = document.getElementsByTagName('head')[0];
if (head) {
head.appendChild(script);
}})();































































  News from the Python Software Foundation

























































































Thursday, April 04, 2019







Update on the Python in Education Proposal Phase





In January when we launched the Python in Education project, we were a bit too ambitious with our timeline. Due to other commitments, we were not able to stick to the original time frame.

Here is the revised timeline:


April 4 - May 9: Request for Proposals phase

May 10 - May 31: Review process

June 1: Notify the accepted proposals

June-August of 2019: Accepted proposal work begins





We'd also like to take this opportunity to inform everyone interested in submitting a proposal that we selected three categories we'd like to see proposals on. Additionally, we'd like to share the evaluation rubric we will use when reviewing each proposal. 



Proposal categories

After reviewing all of the ideas we received in the first phase of this project, we have narrowed the scope of the proposals to:


resources (curriculums, evaluations, studies, multidisciplinary projects)
localization (translations, global currency, global timestamps, etc)
mobile (development on mobile devices)


We ask that if you are considering submitting a proposal that it fall into one of these broad categories.



Evaluation rubric








Every proposal we receive will be evaluated against this rubric. We are looking for proposals that adhere to the PSF's code of conduct, align with the PSF's mission, have international reach, are feasible, and pertain to underrepresented topics.



If anyone has any questions, please contact us at edu-committee@python.org. 










Posted by



Ewa Jodlowska




at

4/04/2019 03:08:00 PM






























Wednesday, March 27, 2019








PuPPy Presents its 1st Annual Benefit featuring Guido van Rossum







p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; line-height: 19.0px; font: 16.0px 'Times New Roman'; color: #000000; -webkit-text-stroke: #000000}
p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; line-height: 14.0px; font: 12.0px Times; color: #000000; -webkit-text-stroke: #000000; min-height: 14.0px}
p.p3 {margin: 0.0px 0.0px 5.3px 0.0px; line-height: 22.0px; font: 18.7px 'Times New Roman'; color: #000000; -webkit-text-stroke: #000000}
p.p4 {margin: 0.0px 0.0px 2.6px 0.0px; line-height: 19.0px; font: 16.0px 'Times New Roman'; color: #000000; -webkit-text-stroke: #000000}
p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; line-height: 19.0px; font: 16.0px 'Times New Roman'; color: #1155cc; -webkit-text-stroke: #1155cc}
p.p6 {margin: 0.0px 0.0px 5.3px 0.0px; line-height: 22.0px; font: 14.0px Times; color: #000000; -webkit-text-stroke: #000000; min-height: 18.0px}
span.s1 {font-kerning: none}
span.s2 {text-decoration: underline ; font-kerning: none; color: #1155cc; -webkit-text-stroke: 0px #1155cc}
span.s3 {text-decoration: underline ; font-kerning: none}




PuPPy Presents its 1st Annual Benefit



A historic discussion of programming language creators about

the past and future of language design.









April 2, 2019, 5:30 - 9:30 PM

The Collective Seattle

400 Dexter Ave N.

Seattle, WA 98109





Featuring Language Creators

James Gosling - Java

Anders Hejlsberg - Turbo Pascal, C#, TypeScript

Guido van Rossum - Python

Larry Wall - Perl




Summary



PuPPy, Seattle's Puget Sound Programming Python user group, presents its 1st annual charity event. The event will feature the creators of C#, Java, Perl, Python, and TypeScript in a conversation about programming language design. 



The charity event brings together this unique group of computer science pioneers, unlike any event held before. These great minds come together for what will surely be a fantastic night of discussion, as the panel delves into the past and future of programming language creation. The event will attract innovators and engineers from Seattle, the nation’s fastest growing technology hub.



The event is a benefit for CSforALL, a non-profit organization that represents more than 500 members who are educators, content providers, funders and researchers who share a vision for all students in the U.S. to learn computer science. CSforALL provides leadership and guidance that helps the K-12 education community implement computer science initiatives, draw from best practices and connect with national organizations to expand access to all students in the U.S.



The event follows in the spirit and culture of PuPPy, the producers of this benefit, as an inclusive community. The very first PuPPy meeting 54 months ago was a mini-conference that featured discussions on allyship and helping more women join the ranks of software professionals. 



Event tickets and further details are available at: http://bdfl-gift.pspython.com.





Speakers



Cyrus Habib - Washington State Lieutenant Governor - Opening remarks

Cyrus Habib was elected Washington State’s 16th Lieutenant Governor in November 2016 at the age of 35. He had previously been elected to the State House of Representatives in 2012 and the State Senate in 2014, where he was Democratic Whip and a member of the Democratic leadership team. As Lt. Governor, he is President of the State Senate, serves as Acting Governor whenever Governor Inslee leaves the state, and oversees an agency whose key issues include economic development, trade, and higher education.

A three-time cancer survivor, Lt. Governor Habib has been fully blind since age eight. His parents immigrated to the U.S. from Iran before he was born, and he is the first and only Iranian-American to hold statewide elected office in the United States.



Carol Willing - Moderator

Carol Willing serves as a Steering Council member for Project Jupyter. She received the 2017 ACM Software System Award for Jupyter's development. She is also a member of the inaugural Python Steering Council, a Python Software Foundation Fellow and former Director; a core developer on CPython, Jupyter, nteract, AnitaB.org’s open source projects, and PyLadies; a co-organizer of PyLadies San Diego and San Diego Python User Group; an independent developer of hardware and software. Weaving her love of art, music, and nature with wearable soft circuits, she is developing an open hardware project to assist an in-home caregiver with gentle, compassionate support of a loved one with Alzheimer’s.



James Gosling - Java

James A. Gosling, O.C., Ph.D. (born May 19, 1955, near Calgary, Alberta, Canada) is a famous software developer, best known as the father of the Java programming language.



In 1977, James Gosling received a B.Sc in Computer Science from the University of Calgary. In 1983, he earned a Ph.D. in Computer Science from Carnegie Mellon University, and his doctoral thesis was titled "The Algebraic Manipulation of Constraints". While working towards his doctorate, he wrote a version of emacs (gosmacs), and before joining Sun Microsystems he built a multi-processor version of Unix[1] while at Carnegie Mellon University, as well as several compilers and mail systems. Since 1984, Gosling has been with Sun Microsystems.



He is generally credited as the inventor of the Java programming language in 1991. He did the original design of Java and implemented its original compiler and virtual machine. For this achievement, he was elected to the United States National Academy of Engineering. He has also made major contributions to several other software systems, such as NeWS and Gosling Emacs. He also co-wrote the "bundle" program, a utility thoroughly detailed in Brian Kernighan and Rob Pike's book, "The Unix Programming Environment".



Anders Hejlsberg - Turbo Pascal, C#, TypeScript

Anders Hejlsberg is a Microsoft Technical Fellow and has been designing and implementing programming languages and development tools for over 35 years. Anders is the lead architect of the TypeScript open-source project and the original designer of the C# programming language. Before joining Microsoft in 1996, Anders was a Principal Engineer at Borland International. As one of the first employees of Borland, he was the original author of Turbo Pascal and later worked as the Chief Architect of the Delphi product line. Anders studied Engineering at the Technical University of Denmark.



Guido van Rossum - Python

Guido van Rossum is the creator of Python, one of the major programming languages on and off the web. Recently Guido retired as Benevolent Dictator For Life (“BDFL”) of Python, a title seemingly stolen from a Monty Python skit. Details of his decision were featured in an Economist article. Guido thankfully has joined the Python Steering Council. This five-person group will give guidance to the future roadmap of the Python programming language.



Van Rossum moved from the Netherlands to the USA, in 1995. He met his wife after his move. Until July 2003 they lived in the northern Virginia suburbs of Washington, DC with their son Orlijn, who was born in 2001. They then moved to Silicon Valley where Guido worked for a variety of companies including Google in the past and currently at Dropbox (spending 50% of his time on Python!).



Larry Wall - Perl

Larry Wall was educated at various places including the Cornish School of Music, the Seattle Youth Symphony, Seattle Pacific University, Multnomah School of the Bible, SIL International, U.C. Berkeley, and UCLA. Though trained primarily in music, chemistry, and linguistics, Larry has been working with computers for the last 40 years or so. He is most famous for writing rn, patch, and the Perl programming language, but prefers to think of himself as a cultural hacker whose vocation in life is to bring a bit of joy into the dreary existence of programmers. For various definitions of “work for”, Larry has worked for Seattle Pacific, MusiComedy Northwest, System Development Corporation, Burroughs, Unisys, the NSA, Telos, ConTel, GTE, JPL, NetLabs, Seagate, Tim O’Reilly, the Perl Foundation, Broadcom, and himself. He is currently serving as Artist in Residence for Craigslist.



About CSforAll


https://www.csforall.org/media-faq/




CSforALL, shorthand for “Computer Science for All,” is the central hub for the K-12 national computer science education movement. CSforALL is the community organizer of school districts, nonprofits, government agencies and corporations that share the goal of rigorous, inclusive and sustainable CS education in the U.S.



About PuPPy


https://www.pspython.com/app/




PuPPy is a fun and friendly user group dedicated to proliferating a diverse and talented Python community in the Puget Sound region. We are devoted to exploring Python-based programming knowledge, embracing new and experienced members from all walks of life, and helping those members to achieve their professional goals.





Event Leadership





Ruthe Farmer – Event Chair - Chief Evangelist for CSforALL

Carol Willing – Moderator -- Steering Council member and developer for Project Jupyter and Python

Lorena Mesa – Vice Chair -- GitHub Data Engineer - Software Intelligence Systems | PyLadies Chicago Organizer | Python Software Foundation Director

Eloisa Tran -- Fundraising Chair -- Founder of the Women in Data Science WiDS, Data Scientist for City of Bellevue






Posted by



Lorena Mesa




at

3/27/2019 10:00:00 AM
































Older Posts

Home




Subscribe to:
Posts (Atom)
















The mission of the Python Software Foundation is to promote, protect, and advance the Python programming language, and to support and facilitate the growth of a diverse and international community of Python programmers.













Python Software Foundation
Grants Program
Membership
Awards
Meeting Minutes














Tweets by @ThePSF
!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+"://platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");












Blog Archive








        ▼ 
      



2019

(11)





        ▼ 
      



April

(1)

Update on the Python in Education Proposal Phase








        ► 
      



March

(2)







        ► 
      



February

(5)







        ► 
      



January

(3)









        ► 
      



2018

(31)





        ► 
      



December

(5)







        ► 
      



November

(1)







        ► 
      



October

(4)







        ► 
      



September

(1)







        ► 
      



August

(2)







        ► 
      



July

(3)







        ► 
      



June

(3)







        ► 
      



May

(5)







        ► 
      



April

(2)







        ► 
      



March

(2)







        ► 
      



February

(1)







        ► 
      



January

(2)









        ► 
      



2017

(32)





        ► 
      



December

(3)







        ► 
      



November

(2)







        ► 
      



October

(4)







        ► 
      



September

(6)







        ► 
      



August

(2)







        ► 
      



July

(2)







        ► 
      



May

(2)







        ► 
      



April

(3)







        ► 
      



March

(2)







        ► 
      



February

(2)







        ► 
      



January

(4)









        ► 
      



2016

(27)





        ► 
      



December

(2)







        ► 
      



October

(2)







        ► 
      



August

(4)







        ► 
      



July

(1)







        ► 
      



June

(3)







        ► 
      



May

(6)







        ► 
      



April

(4)







        ► 
      



March

(2)







        ► 
      



January

(3)









        ► 
      



2015

(67)





        ► 
      



December

(2)







        ► 
      



November

(4)







        ► 
      



October

(4)







        ► 
      



September

(1)







        ► 
      



August

(2)







        ► 
      



July

(4)







        ► 
      



June

(6)







        ► 
      



May

(4)







        ► 
      



April

(13)







        ► 
      



March

(14)







        ► 
      



February

(9)







        ► 
      



January

(4)









        ► 
      



2014

(14)





        ► 
      



October

(1)







        ► 
      



September

(1)







        ► 
      



August

(2)







        ► 
      



July

(1)







        ► 
      



May

(1)







        ► 
      



April

(1)







        ► 
      



March

(2)







        ► 
      



February

(3)







        ► 
      



January

(2)









        ► 
      



2013

(18)





        ► 
      



November

(1)







        ► 
      



September

(2)







        ► 
      



August

(1)







        ► 
      



July

(1)







        ► 
      



June

(1)







        ► 
      



April

(1)







        ► 
      



March

(5)







        ► 
      



February

(3)







        ► 
      



January

(3)









        ► 
      



2012

(21)





        ► 
      



December

(3)







        ► 
      



November

(2)







        ► 
      



October

(2)







        ► 
      



September

(1)







        ► 
      



August

(1)







        ► 
      



July

(1)







        ► 
      



June

(2)







        ► 
      



May

(4)







        ► 
      



April

(1)







        ► 
      



March

(1)







        ► 
      



January

(3)









        ► 
      



2011

(55)





        ► 
      



December

(2)







        ► 
      



November

(1)







        ► 
      



October

(7)







        ► 
      



September

(5)







        ► 
      



August

(2)







        ► 
      



July

(1)







        ► 
      



June

(3)







        ► 
      



May

(8)







        ► 
      



April

(8)







        ► 
      



March

(13)







        ► 
      



February

(2)







        ► 
      



January

(3)









        ► 
      



2010

(35)





        ► 
      



December

(4)







        ► 
      



November

(1)







        ► 
      



October

(3)







        ► 
      



September

(2)







        ► 
      



August

(1)







        ► 
      



July

(8)







        ► 
      



June

(6)







        ► 
      



May

(2)







        ► 
      



April

(4)







        ► 
      



March

(2)







        ► 
      



January

(2)









        ► 
      



2009

(21)





        ► 
      



December

(1)







        ► 
      



October

(1)







        ► 
      



September

(6)







        ► 
      



August

(4)







        ► 
      



July

(4)







        ► 
      



June

(1)







        ► 
      



May

(2)







        ► 
      



April

(1)







        ► 
      



February

(1)









        ► 
      



2008

(23)





        ► 
      



December

(1)







        ► 
      



November

(1)







        ► 
      



October

(1)







        ► 
      



August

(3)







        ► 
      



July

(1)







        ► 
      



May

(3)







        ► 
      



April

(1)







        ► 
      



March

(5)







        ► 
      



February

(4)







        ► 
      



January

(3)









        ► 
      



2007

(26)





        ► 
      



December

(3)







        ► 
      



November

(2)







        ► 
      



October

(6)







        ► 
      



September

(1)







        ► 
      



August

(1)







        ► 
      



July

(1)







        ► 
      



June

(2)







        ► 
      



May

(1)







        ► 
      



April

(1)







        ► 
      



March

(2)







        ► 
      



February

(3)







        ► 
      



January

(3)









        ► 
      



2006

(39)





        ► 
      



December

(3)







        ► 
      



November

(4)







        ► 
      



October

(5)







        ► 
      



September

(4)







        ► 
      



August

(4)







        ► 
      



July

(3)







        ► 
      



May

(7)







        ► 
      



April

(6)







        ► 
      



March

(3)






































































Simple theme. Powered by Blogger.





























    window.setTimeout(function() {
        document.body.className = document.body.className.replace('loading', '');
      }, 10);
  


window['__wavt'] = 'AOuZoY6rPx9Ej0AbXzgnYZian4URmX9PvA:1555314789624';_WidgetManager._Init('//www.blogger.com/rearrange?blogID\x3d8520','//pyfound.blogspot.com/','8520');
_WidgetManager._SetDataContext([{'name': 'blog', 'data': {'blogId': '8520', 'title': '\x3ca href\x3d\x22http://python.org/psf/\x22\x3ePython Software Foundation\x3c/a\x3e News', 'url': 'http://pyfound.blogspot.com/', 'canonicalUrl': 'http://pyfound.blogspot.com/', 'homepageUrl': 'http://pyfound.blogspot.com/', 'searchUrl': 'http://pyfound.blogspot.com/search', 'canonicalHomepageUrl': 'http://pyfound.blogspot.com/', 'blogspotFaviconUrl': 'http://pyfound.blogspot.com/favicon.ico', 'bloggerUrl': 'https://www.blogger.com', 'hasCustomDomain': false, 'httpsEnabled': true, 'enabledCommentProfileImages': true, 'gPlusViewType': 'FILTERED_POSTMOD', 'adultContent': false, 'analyticsAccountNumber': '', 'encoding': 'UTF-8', 'locale': 'en', 'localeUnderscoreDelimited': 'en', 'languageDirection': 'ltr', 'isPrivate': false, 'isMobile': false, 'isMobileRequest': false, 'mobileClass': '', 'isPrivateBlog': false, 'feedLinks': '\x3clink rel\x3d\x22alternate\x22 type\x3d\x22application/atom+xml\x22 title\x3d\x22Python Software Foundation News - Atom\x22 href\x3d\x22http://pyfound.blogspot.com/feeds/posts/default\x22 /\x3e\n\x3clink rel\x3d\x22alternate\x22 type\x3d\x22application/rss+xml\x22 title\x3d\x22Python Software Foundation News - RSS\x22 href\x3d\x22http://pyfound.blogspot.com/feeds/posts/default?alt\x3drss\x22 /\x3e\n\x3clink rel\x3d\x22service.post\x22 type\x3d\x22application/atom+xml\x22 title\x3d\x22Python Software Foundation News - Atom\x22 href\x3d\x22https://www.blogger.com/feeds/8520/posts/default\x22 /\x3e\n', 'meTag': '', 'adsenseHostId': 'ca-host-pub-1556223355139109', 'adsenseHasAds': false, 'ieCssRetrofitLinks': '\x3c!--[if IE]\x3e\x3cscript type\x3d\x22text/javascript\x22 src\x3d\x22https://www.blogger.com/static/v1/jsbin/1953397912-ieretrofit.js\x22\x3e\x3c/script\x3e\n\x3c![endif]--\x3e', 'view': '', 'dynamicViewsCommentsSrc': '//www.blogblog.com/dynamicviews/4224c15c4e7c9321/js/comments.js', 'dynamicViewsScriptSrc': '//www.blogblog.com/dynamicviews/5d3f379b4eb56506', 'plusOneApiSrc': 'https://apis.google.com/js/plusone.js', 'disableGComments': true, 'sharing': {'platforms': [{'name': 'Get link', 'key': 'link', 'shareMessage': 'Get link', 'target': ''}, {'name': 'Facebook', 'key': 'facebook', 'shareMessage': 'Share to Facebook', 'target': 'facebook'}, {'name': 'BlogThis!', 'key': 'blogThis', 'shareMessage': 'BlogThis!', 'target': 'blog'}, {'name': 'Twitter', 'key': 'twitter', 'shareMessage': 'Share to Twitter', 'target': 'twitter'}, {'name': 'Pinterest', 'key': 'pinterest', 'shareMessage': 'Share to Pinterest', 'target': 'pinterest'}, {'name': 'Email', 'key': 'email', 'shareMessage': 'Email', 'target': 'email'}], 'disableGooglePlus': true, 'googlePlusShareButtonWidth': 300, 'googlePlusBootstrap': '\x3cscript type\x3d\x22text/javascript\x22\x3ewindow.___gcfg \x3d {\x27lang\x27: \x27en\x27};\x3c/script\x3e'}, 'hasCustomJumpLinkMessage': false, 'jumpLinkMessage': 'Read more', 'pageType': 'index', 'pageName': '', 'pageTitle': 'Python Software Foundation News'}}, {'name': 'features', 'data': {'sharing_get_link_dialog': 'true', 'sharing_native': 'false'}}, {'name': 'messages', 'data': {'edit': 'Edit', 'linkCopiedToClipboard': 'Link copied to clipboard!', 'ok': 'Ok', 'postLink': 'Post Link'}}, {'name': 'template', 'data': {'name': 'Simple', 'localizedName': 'Simple', 'isResponsive': false, 'isAlternateRendering': false, 'isCustom': false, 'variant': 'simplysimple', 'variantId': 'simplysimple'}}, {'name': 'view', 'data': {'classic': {'name': 'classic', 'url': '?view\x3dclassic'}, 'flipcard': {'name': 'flipcard', 'url': '?view\x3dflipcard'}, 'magazine': {'name': 'magazine', 'url': '?view\x3dmagazine'}, 'mosaic': {'name': 'mosaic', 'url': '?view\x3dmosaic'}, 'sidebar': {'name': 'sidebar', 'url': '?view\x3dsidebar'}, 'snapshot': {'name': 'snapshot', 'url': '?view\x3dsnapshot'}, 'timeslide': {'name': 'timeslide', 'url': '?view\x3dtimeslide'}, 'isMobile': false, 'title': 'Python Software Foundation News', 'description': '&#160;&#160;News from the Python Software Foundation', 'url': 'http://pyfound.blogspot.com/', 'type': 'feed', 'isSingleItem': false, 'isMultipleItems': true, 'isError': false, 'isPage': false, 'isPost': false, 'isHomepage': true, 'isArchive': false, 'isLabelSearch': false}}]);
_WidgetManager._RegisterWidget('_NavbarView', new _WidgetInfo('Navbar1', 'navbar', document.getElementById('Navbar1'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_HeaderView', new _WidgetInfo('Header1', 'header', document.getElementById('Header1'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_BlogView', new _WidgetInfo('Blog1', 'main', document.getElementById('Blog1'), {'cmtInteractionsEnabled': false, 'lightboxEnabled': true, 'lightboxModuleUrl': 'https://www.blogger.com/static/v1/jsbin/696337176-lbx.js', 'lightboxCssUrl': 'https://www.blogger.com/static/v1/v-css/368954415-lightbox_bundle.css'}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_TextView', new _WidgetInfo('Text1', 'sidebar-right-1', document.getElementById('Text1'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_LinkListView', new _WidgetInfo('LinkList1', 'sidebar-right-1', document.getElementById('LinkList1'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_HTMLView', new _WidgetInfo('HTML1', 'sidebar-right-1', document.getElementById('HTML1'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_BlogArchiveView', new _WidgetInfo('BlogArchive1', 'sidebar-right-1', document.getElementById('BlogArchive1'), {'languageDirection': 'ltr', 'loadingMessage': 'Loading\x26hellip;'}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_AttributionView', new _WidgetInfo('Attribution1', 'footer-3', document.getElementById('Attribution1'), {}, 'displayModeFull'));




Skip to main content
















The PyCon Blog








Subscribe



Subscribe to this blog


Follow by Email




















Search








Search This Blog








































Posts





    .big-post-image-top {background-image:url(https\:\/\/3.bp.blogspot.com\/-rJc7MWs1Iaw\/XLC61HhNktI\/AAAAAAAAALE\/r7xt9dx52pAUwJd-Usiug6C6DNPDWdj5QCEwYBhgL\/s320\/Time.jpeg);}
    
@media (max-width: 480px) { .big-post-image-top {background-image:url(https\:\/\/3.bp.blogspot.com\/-rJc7MWs1Iaw\/XLC61HhNktI\/AAAAAAAAALE\/r7xt9dx52pAUwJd-Usiug6C6DNPDWdj5QCEwYBhgL\/w480-h320-p-k-no-nu\/Time.jpeg);}}
@media (max-width: 640px) and (min-width: 481px) { .big-post-image-top {background-image:url(https\:\/\/3.bp.blogspot.com\/-rJc7MWs1Iaw\/XLC61HhNktI\/AAAAAAAAALE\/r7xt9dx52pAUwJd-Usiug6C6DNPDWdj5QCEwYBhgL\/w640-h426-p-k-no-nu\/Time.jpeg);}}
@media (max-width: 800px) and (min-width: 641px) { .big-post-image-top {background-image:url(https\:\/\/3.bp.blogspot.com\/-rJc7MWs1Iaw\/XLC61HhNktI\/AAAAAAAAALE\/r7xt9dx52pAUwJd-Usiug6C6DNPDWdj5QCEwYBhgL\/w800-h533-p-k-no-nu\/Time.jpeg);}}
/* Last tag covers anything over one higher than the previous max-size cap. */
@media (min-width: 801px) { .big-post-image-top {background-image:url(https\:\/\/3.bp.blogspot.com\/-rJc7MWs1Iaw\/XLC61HhNktI\/AAAAAAAAALE\/r7xt9dx52pAUwJd-Usiug6C6DNPDWdj5QCEwYBhgL\/w1200-h800-p-k-no-nu\/Time.jpeg);}}
  




PyCon 2019 close to sell out!




Posted by




Jackie Augustine







April 12, 2019








We are all very excited that, once again, PyCon will sell out.  Time is running out so act fast if you are planning to attend, there are 60 tickets left as of April 12th at 11:00am central time.Things to remember:Hotels:PyCon Hotel Blocks are sold out, we suggest using online hotel booking sites to search for the best options near the Huntington Convention CenterHotel changes and cancellations should be made by contacting the hotels directly.  Hotel cancellations should be made directly with the individual properties 48 hours prior to arrival to avoid a one night cancellation chargeDietary Restrictions:If you indicated 'dietary allergy' when registering and have not provided specifics, please email pycon-reg@python.org with your dietary restrictions.Registration Cancellation Deadline:April 19th is the final date to submit an email requesting a conference registration cancellation for the $50.00 ($25.00 for students) cancellation fee.April 20th and after there will be no refund…










Share








Get link







Facebook







Twitter







Pinterest







Email







Other Apps








Post a Comment






Read more









Recent posts








PyCon 2019 Dietary Information







Posted by




Jackie Augustine







March 27, 2019









We are excited to be finalizing plans for PyCon 2019.  In our continued efforts to provide you as much information ahead of the conference as possible, we would like to inform you of the planned meals. We are excited to share with you some new features, please visit the website using the button below.Introducing the new menu page on the PyCon website!This page lists all menu items being offered for each meal. As we get closer to the conference we will try to list more detailed ingredients, allowing you to be informed prior to each day. Tutorial Days, May 1st and 2nd Lunch: will be buffet style providing VGN(Vegan), VEG(Vegetarian), and AVG(Avoid Gluten) options.Kosher and Allergy Needs: Location details will be posted on the webpage when available.Conference Days, May 3rd and May 4th Breakfast: buffet style, providing VGN(Vegan), VEG(Vegetarian), and AVG(Avoid Gluten) option. Lunch: we are excited to be offering gourmet box lunches, with many delicious meals to choose from each day.  E…










Share








Get link







Facebook







Twitter







Pinterest







Email







Other Apps








Post a Comment






Read more











                    @media (min-width: 1168px) {
                      #snippet_thumbnail_id_5594733467685618369 {
                        background-image: url(https\:\/\/1.bp.blogspot.com\/-C9H-18UXtWE\/XIFRvbYM1rI\/AAAAAAAAAHc\/VLo9zyRCbDsI_JsXeBP9vpzli5xzid2TQCLcBGAs\/w256-h256-p-k-no-nu\/quote-for-volunteering-motivational-quotes-volunteers-inspirational-importance-and-sayings-of-katniss.jpg);
                      }
                    }
                    @media (min-width: 969px) and (max-width: 1167px) {
                      #snippet_thumbnail_id_5594733467685618369 {
                        background-image: url(https\:\/\/1.bp.blogspot.com\/-C9H-18UXtWE\/XIFRvbYM1rI\/AAAAAAAAAHc\/VLo9zyRCbDsI_JsXeBP9vpzli5xzid2TQCLcBGAs\/w1167-h778-p-k-no-nu\/quote-for-volunteering-motivational-quotes-volunteers-inspirational-importance-and-sayings-of-katniss.jpg);
                      }
                    }
                    @media (min-width: 601px) and (max-width: 968px) {
                      #snippet_thumbnail_id_5594733467685618369 {
                        background-image: url(https\:\/\/1.bp.blogspot.com\/-C9H-18UXtWE\/XIFRvbYM1rI\/AAAAAAAAAHc\/VLo9zyRCbDsI_JsXeBP9vpzli5xzid2TQCLcBGAs\/w968-h645-p-k-no-nu\/quote-for-volunteering-motivational-quotes-volunteers-inspirational-importance-and-sayings-of-katniss.jpg);
                      }
                    }
                    @media (max-width: 600px) {
                      #snippet_thumbnail_id_5594733467685618369 {
                        background-image: url(https\:\/\/1.bp.blogspot.com\/-C9H-18UXtWE\/XIFRvbYM1rI\/AAAAAAAAAHc\/VLo9zyRCbDsI_JsXeBP9vpzli5xzid2TQCLcBGAs\/w600-h400-p-k-no-nu\/quote-for-volunteering-motivational-quotes-volunteers-inspirational-importance-and-sayings-of-katniss.jpg);
                      }
                    }
                  





Call for Volunteers!







Posted by




Jackie Augustine







March 07, 2019









Volunteers are what makes PyCon such a successful event.  There are over 400 volunteer hours for over 15 different events that need to be filled.  This means there are options to fit everyone's interests.Session Staff - an important piece in keeping things running smoothly.Green Room Staff - assist speakers in making sure they are ready to present.Registration Desk - a great way to meet attendees and be their first contact at the conference.Swag Bag - there are lots of people needed to help with Swag Bag stuffing and this is a fun event!Tutorial hosts - need to be onsite May 1st and May 2nd.Language Summit Greeters - need to be onsite May 1st.Young Coders Set-up and AssistanceHatchery sessionsPyLadies Auction - be sure you have a ticket to attend.5K Fun Run - for all you early risers!Note: All volunteers need to be registered for the conference. Please help and sign up here as a volunteer!










Share








Get link







Facebook







Twitter







Pinterest







Email







Other Apps








Post a Comment






Read more













PyCon 2019 Talks, Charlas, Posters, and Education Summit Schedules







Posted by




Ernest W. Durbin III







March 05, 2019









With great excitement, we're happy to announce the much anticipated (and admittedly delayed) lineups for PyCon 2019's Talks, Charlas, Posters Session, and Education Summit.2019 Talks and Charlas Schedule2019 Posters Lineup2019 Education Summit Schedule 
This is an excellent moment to recognize the volunteer teams that organize the calls for proposal, review all of the submissions, and construct a schedule! Their hard work provides the foundation for a vibrant conference with something for everyone. 
PyCon Program Committee
Chair: Jason Myers 
Co-Chairs: Lorena Mesa & Jackie Kazil 
And the 34 volunteer reviewers!
PyCon Charlas Team 
Chair: Maricela Sánchez 
Co-Chairs: Mario Corchero and Naomi Ceder 
PyCon Posters Committee
Chair: Rebecca Bilbro 
Co-Chairs: Kristen McIntyre, Nathan Danielsen, and Natalie Serebryakova 
Education Summit Committee
Chair: Meenal Pant
Co-Chairs: Jessica Ingrasselino, Chalmer Lowe, Elizabeth Wickes, and Jeff Elkner 










Share








Get link







Facebook







Twitter







Pinterest







Email







Other Apps








Post a Comment






Read more











                    @media (min-width: 1168px) {
                      #snippet_thumbnail_id_1214818877763293229 {
                        background-image: url(https\:\/\/lh5.googleusercontent.com\/CpiW8VR-GqYDoVMwOK2GqkwMI4YJJBnefFY66Ou9IJVEjUG4pPfe4MHLH3KRe5rLn6t4ftj2RI09aD3f0o6HK0MDdHrBeGZAdqE01N31LNA1NP4Lxr42Zd_r5Qb70ML6RT3JzddO=w256-h256-p-k-no-nu);
                      }
                    }
                    @media (min-width: 969px) and (max-width: 1167px) {
                      #snippet_thumbnail_id_1214818877763293229 {
                        background-image: url(https\:\/\/lh5.googleusercontent.com\/CpiW8VR-GqYDoVMwOK2GqkwMI4YJJBnefFY66Ou9IJVEjUG4pPfe4MHLH3KRe5rLn6t4ftj2RI09aD3f0o6HK0MDdHrBeGZAdqE01N31LNA1NP4Lxr42Zd_r5Qb70ML6RT3JzddO=w1167-h778-p-k-no-nu);
                      }
                    }
                    @media (min-width: 601px) and (max-width: 968px) {
                      #snippet_thumbnail_id_1214818877763293229 {
                        background-image: url(https\:\/\/lh5.googleusercontent.com\/CpiW8VR-GqYDoVMwOK2GqkwMI4YJJBnefFY66Ou9IJVEjUG4pPfe4MHLH3KRe5rLn6t4ftj2RI09aD3f0o6HK0MDdHrBeGZAdqE01N31LNA1NP4Lxr42Zd_r5Qb70ML6RT3JzddO=w968-h645-p-k-no-nu);
                      }
                    }
                    @media (max-width: 600px) {
                      #snippet_thumbnail_id_1214818877763293229 {
                        background-image: url(https\:\/\/lh5.googleusercontent.com\/CpiW8VR-GqYDoVMwOK2GqkwMI4YJJBnefFY66Ou9IJVEjUG4pPfe4MHLH3KRe5rLn6t4ftj2RI09aD3f0o6HK0MDdHrBeGZAdqE01N31LNA1NP4Lxr42Zd_r5Qb70ML6RT3JzddO=w600-h400-p-k-no-nu);
                      }
                    }
                  





PyCon 2019 Tutorial Schedule!







Posted by




Jackie Augustine







February 18, 2019









The highly anticipated PyCon 2019 tutorial schedule is now available!The tutorial schedule for Wednesday May 1, 2019 and Thursday May 2, 2019 can be found here.Registration for tutorials is open! For those who have already registered for the conference and are returning to add tutorials, login to the PyCon dashboard and go to the registration page.  There will be an indication that ‘You are registered for PyCon 2019’,  just click ‘Add Options/Tutorials'   Don’t forget to reserve your hotel room!  Please take advantage of the negotiated rates we have with the surrounding hotels by booking your reservation through the PyCon 2019 hotel reservation system.        










Share








Get link







Facebook







Twitter







Pinterest







Email







Other Apps








Post a Comment






Read more









More posts






















Archive















April 20191


March 20193


February 20193


January 20192


December 20182


November 20181


October 20183


September 20181


August 20181


June 20181






April 20183


February 20181


January 20181


December 20171


November 20173


October 20172


September 20172


May 20174


April 20173


March 20171


February 20172


January 20171


December 20162


November 20163


October 20161


June 20161


May 20164


April 20164


March 20165


February 20164


January 20162


December 20152


November 20153


October 20151


September 20154


June 20151


May 20152


April 20153


March 20157


February 20155


January 20154


December 20146


October 20141


September 20144


August 20142


July 20143


June 20144


May 20141


April 20146


March 20146


February 201412


January 20148


December 20134


November 20131


October 20134


September 20134


August 20135


July 20132


June 20133


May 20132


April 20133


March 201315


February 201312


January 201318


December 201213


November 20125


October 20122


September 201213


August 201210


July 20127


June 201210


May 20126


April 20121


March 201211


February 201225


January 201214


December 20116


November 20112


October 20117


September 20119


August 201113


July 20115


June 20119


May 20114


April 20111


March 201110


February 201121


January 201114


December 20102


September 20102


August 20102


July 20106


June 20103


April 20103


March 20101


February 20107


January 20107


December 20097


November 20095


October 20097


September 20098


August 20092


July 20094


June 20092


May 20094


April 20093


March 20099


February 20098


January 20093


October 20083


September 20082


August 20081


June 20081


May 20081


April 200825


March 200812


February 20089


January 20085


December 20071


November 20075


October 20072


September 20073


August 20072


July 20071


April 20072


March 20074


February 200718


January 200721


December 20064


November 20066


October 20066


February 20061


January 20061


April 20051


March 200543



Show more
Show less









Labels












2018
5k
apology
Argentina
caktus
Canada
cfp
charity
childcare
cleveland




code of conduct
confoo.ca
dinner
duckling
earlybird
education
education summit
europython
EuroSciPy
expo hall
financial aid
financialaid
Finland
France
funrun
german
german pycon. PyCon DE
guidebook
hatchery
hotel
http://www.blogger.com/img/blank.gif
interview
job fair
Johannesburg
keynotes
kiwipycon
latin america
launch
lightning talks
media statement
Montreal
open
open spaces
outreach
p
passport
podcast
portland
poster session
posters
proposals
pyarkansas
pycon
PyCon AU
PyCon Australia
PyCon Canada
PyCon DE
pycon-apac
pycon-au
pycon-jp
pycon-nz
Pycon-Tech
pycon-us
PyCon08
pycon09
pycon2010
pycon2011
pycon2012
pycon2013
pycon2014
pycon2015
pyconde
pyconde2012
pyconfi
pyconza
pyladies
PyTexas
Python
raspberry pi
reception
registration
reservations
rupy
schedule
Science
scipy
shuttle bus
soldout
South Africa
Spanish
sponsors
sponsorship
sprint
sprints
startup row
students
summit
survey
talks
talksiwanttosee
tutorials
volunteers
youngcoder


Show more
Show less





PyCon Blog
This is the blog of PyCon US, with guest contributions from Python conferences everywhere!
Visit our official web site.



PyCon in the World




PyCon in the United States
EuroPython in Europe
EuroSciPy in Europe
PyCon Asia Pacific in Singapore
PyCon AR in Argentina
Python Brasil in Brazil
Python DE in Germany
PyCon FR in France
PyCon India
PyCon Italia in Italy
PyCon Japan
Kiwi PyCon in New Zealand
PyCon PL in Poland
PyCon RU in Russia
PyCon UK in the United Kingdom
SciPy (US)
SciPy (India)
PyCon Australia in Australia
Python FI in Finland
Python IE in Ireland
Python UA in Ukraine
PyOhio in the United States
PyTexas in the United States
PyArkansas in the United States
PyCon CA in Canada 
PyCon TW in Taiwan 
PyCon ES in Spain 
PyCon PH in the Philippines 




Tweets by @pycon
!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+"://platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");












Powered by Blogger


Copyright © 2009–2017 Python Software Foundation






window['__wavt'] = 'AOuZoY7Ov6PKnZ20lgGfGFUcpWQKuqpiFA:1555186987918';_WidgetManager._Init('//www.blogger.com/rearrange?blogID\x3d11638628','//pycon.blogspot.com/','11638628');
_WidgetManager._SetDataContext([{'name': 'blog', 'data': {'blogId': '11638628', 'title': 'The PyCon Blog', 'url': 'https://pycon.blogspot.com/', 'canonicalUrl': 'https://pycon.blogspot.com/', 'homepageUrl': 'https://pycon.blogspot.com/', 'searchUrl': 'https://pycon.blogspot.com/search', 'canonicalHomepageUrl': 'https://pycon.blogspot.com/', 'blogspotFaviconUrl': 'https://pycon.blogspot.com/favicon.ico', 'bloggerUrl': 'https://www.blogger.com', 'hasCustomDomain': false, 'httpsEnabled': true, 'enabledCommentProfileImages': true, 'gPlusViewType': 'FILTERED_POSTMOD', 'adultContent': false, 'analyticsAccountNumber': '', 'encoding': 'UTF-8', 'locale': 'en', 'localeUnderscoreDelimited': 'en', 'languageDirection': 'ltr', 'isPrivate': false, 'isMobile': false, 'isMobileRequest': false, 'mobileClass': '', 'isPrivateBlog': false, 'feedLinks': '\x3clink rel\x3d\x22alternate\x22 type\x3d\x22application/atom+xml\x22 title\x3d\x22The PyCon Blog - Atom\x22 href\x3d\x22https://pycon.blogspot.com/feeds/posts/default\x22 /\x3e\n\x3clink rel\x3d\x22alternate\x22 type\x3d\x22application/rss+xml\x22 title\x3d\x22The PyCon Blog - RSS\x22 href\x3d\x22https://pycon.blogspot.com/feeds/posts/default?alt\x3drss\x22 /\x3e\n\x3clink rel\x3d\x22service.post\x22 type\x3d\x22application/atom+xml\x22 title\x3d\x22The PyCon Blog - Atom\x22 href\x3d\x22https://www.blogger.com/feeds/11638628/posts/default\x22 /\x3e\n', 'meTag': '', 'adsenseHostId': 'ca-host-pub-1556223355139109', 'adsenseHasAds': false, 'view': '', 'dynamicViewsCommentsSrc': '//www.blogblog.com/dynamicviews/4224c15c4e7c9321/js/comments.js', 'dynamicViewsScriptSrc': '//www.blogblog.com/dynamicviews/5d3f379b4eb56506', 'plusOneApiSrc': 'https://apis.google.com/js/plusone.js', 'disableGComments': true, 'sharing': {'platforms': [{'name': 'Get link', 'key': 'link', 'shareMessage': 'Get link', 'target': ''}, {'name': 'Facebook', 'key': 'facebook', 'shareMessage': 'Share to Facebook', 'target': 'facebook'}, {'name': 'BlogThis!', 'key': 'blogThis', 'shareMessage': 'BlogThis!', 'target': 'blog'}, {'name': 'Twitter', 'key': 'twitter', 'shareMessage': 'Share to Twitter', 'target': 'twitter'}, {'name': 'Pinterest', 'key': 'pinterest', 'shareMessage': 'Share to Pinterest', 'target': 'pinterest'}, {'name': 'Email', 'key': 'email', 'shareMessage': 'Email', 'target': 'email'}], 'disableGooglePlus': true, 'googlePlusShareButtonWidth': 300, 'googlePlusBootstrap': '\x3cscript type\x3d\x22text/javascript\x22\x3ewindow.___gcfg \x3d {\x27lang\x27: \x27en\x27};\x3c/script\x3e'}, 'hasCustomJumpLinkMessage': false, 'jumpLinkMessage': 'Read more', 'pageType': 'index', 'pageName': '', 'pageTitle': 'The PyCon Blog'}}, {'name': 'features', 'data': {'sharing_get_link_dialog': 'true', 'sharing_native': 'false'}}, {'name': 'messages', 'data': {'edit': 'Edit', 'linkCopiedToClipboard': 'Link copied to clipboard!', 'ok': 'Ok', 'postLink': 'Post Link'}}, {'name': 'template', 'data': {'name': 'Notable', 'localizedName': 'Notable', 'isResponsive': true, 'isAlternateRendering': false, 'isCustom': false, 'variant': 'rockpool_light', 'variantId': 'rockpool_light'}}, {'name': 'view', 'data': {'classic': {'name': 'classic', 'url': '?view\x3dclassic'}, 'flipcard': {'name': 'flipcard', 'url': '?view\x3dflipcard'}, 'magazine': {'name': 'magazine', 'url': '?view\x3dmagazine'}, 'mosaic': {'name': 'mosaic', 'url': '?view\x3dmosaic'}, 'sidebar': {'name': 'sidebar', 'url': '?view\x3dsidebar'}, 'snapshot': {'name': 'snapshot', 'url': '?view\x3dsnapshot'}, 'timeslide': {'name': 'timeslide', 'url': '?view\x3dtimeslide'}, 'isMobile': false, 'title': 'The PyCon Blog', 'description': '', 'url': 'https://pycon.blogspot.com/', 'type': 'feed', 'isSingleItem': false, 'isMultipleItems': true, 'isError': false, 'isPage': false, 'isPost': false, 'isHomepage': true, 'isArchive': false, 'isLabelSearch': false}}, {'name': 'widgets', 'data': [{'title': 'The PyCon Blog (Header)', 'type': 'Header', 'sectionId': 'header', 'id': 'Header1'}, {'title': 'Follow by Email', 'type': 'FollowByEmail', 'sectionId': 'subscription', 'id': 'FollowByEmail1'}, {'title': 'Search This Blog', 'type': 'BlogSearch', 'sectionId': 'search_top', 'id': 'BlogSearch1'}, {'title': '', 'type': 'FeaturedPost', 'sectionId': 'page_body', 'id': 'FeaturedPost1', 'postId': '3217540630938476854'}, {'title': 'Blog Posts', 'type': 'Blog', 'sectionId': 'page_body', 'id': 'Blog1', 'posts': [{'id': '3217540630938476854', 'title': 'PyCon 2019 close to sell out!', 'featuredImage': 'https://3.bp.blogspot.com/-rJc7MWs1Iaw/XLC61HhNktI/AAAAAAAAALE/r7xt9dx52pAUwJd-Usiug6C6DNPDWdj5QCEwYBhgL/s320/Time.jpeg', 'showInlineAds': false}, {'id': '7432172371964896847', 'title': 'PyCon 2019 Dietary Information', 'showInlineAds': false}, {'id': '5594733467685618369', 'title': 'Call for Volunteers!', 'featuredImage': 'https://1.bp.blogspot.com/-C9H-18UXtWE/XIFRvbYM1rI/AAAAAAAAAHc/VLo9zyRCbDsI_JsXeBP9vpzli5xzid2TQCLcBGAs/s320/quote-for-volunteering-motivational-quotes-volunteers-inspirational-importance-and-sayings-of-katniss.jpg', 'showInlineAds': false}, {'id': '6412808581059893729', 'title': 'PyCon 2019 Talks, Charlas, Posters, and Education Summit Schedules', 'showInlineAds': false}, {'id': '1214818877763293229', 'title': 'PyCon 2019 Tutorial Schedule!', 'featuredImage': 'https://lh5.googleusercontent.com/CpiW8VR-GqYDoVMwOK2GqkwMI4YJJBnefFY66Ou9IJVEjUG4pPfe4MHLH3KRe5rLn6t4ftj2RI09aD3f0o6HK0MDdHrBeGZAdqE01N31LNA1NP4Lxr42Zd_r5Qb70ML6RT3JzddO', 'showInlineAds': false}], 'headerByline': {'regionName': 'header1', 'items': [{'name': 'author', 'label': 'Posted by'}, {'name': 'timestamp', 'label': ''}]}, 'footerBylines': [{'regionName': 'footer1', 'items': [{'name': 'share', 'label': ''}, {'name': 'comments', 'label': 'comments'}, {'name': 'labels', 'label': 'Labels:'}, {'name': 'icons', 'label': ''}]}, {'regionName': 'footer3', 'items': [{'name': 'location', 'label': 'Location:'}]}], 'allBylineItems': [{'name': 'author', 'label': 'Posted by'}, {'name': 'timestamp', 'label': ''}, {'name': 'share', 'label': ''}, {'name': 'comments', 'label': 'comments'}, {'name': 'labels', 'label': 'Labels:'}, {'name': 'icons', 'label': ''}, {'name': 'location', 'label': 'Location:'}]}, {'title': '', 'type': 'PopularPosts', 'sectionId': 'page_body', 'id': 'PopularPosts1', 'posts': [{'title': 'PyCon 2020-2021 Location', 'id': 5026308631955716403}, {'title': 'PyCon 2019 close to sell out!', 'id': 3217540630938476854}, {'title': 'PyCon 2019 Dietary Information', 'id': 7432172371964896847}]}, {'type': 'BlogArchive', 'sectionId': 'sidebar', 'id': 'BlogArchive1'}, {'title': 'Labels', 'type': 'Label', 'sectionId': 'sidebar', 'id': 'Label1'}, {'title': '', 'type': 'HTML', 'sectionId': 'sidebar', 'id': 'HTML2'}, {'title': 'PyCon in the World', 'type': 'HTML', 'sectionId': 'sidebar', 'id': 'HTML3'}, {'title': '', 'type': 'HTML', 'sectionId': 'sidebar', 'id': 'HTML1'}, {'type': 'Attribution', 'sectionId': 'footer', 'id': 'Attribution1'}]}]);
_WidgetManager._RegisterWidget('_HeaderView', new _WidgetInfo('Header1', 'header', document.getElementById('Header1'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_FollowByEmailView', new _WidgetInfo('FollowByEmail1', 'subscription', document.getElementById('FollowByEmail1'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_BlogSearchView', new _WidgetInfo('BlogSearch1', 'search_top', document.getElementById('BlogSearch1'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_FeaturedPostView', new _WidgetInfo('FeaturedPost1', 'page_body', document.getElementById('FeaturedPost1'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_BlogView', new _WidgetInfo('Blog1', 'page_body', document.getElementById('Blog1'), {'cmtInteractionsEnabled': false, 'lightboxEnabled': true, 'lightboxModuleUrl': 'https://www.blogger.com/static/v1/jsbin/696337176-lbx.js', 'lightboxCssUrl': 'https://www.blogger.com/static/v1/v-css/368954415-lightbox_bundle.css'}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_PopularPostsView', new _WidgetInfo('PopularPosts1', 'page_body', document.getElementById('PopularPosts1'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_BlogArchiveView', new _WidgetInfo('BlogArchive1', 'sidebar', document.getElementById('BlogArchive1'), {'languageDirection': 'ltr', 'loadingMessage': 'Loading\x26hellip;'}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_LabelView', new _WidgetInfo('Label1', 'sidebar', document.getElementById('Label1'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_HTMLView', new _WidgetInfo('HTML2', 'sidebar', document.getElementById('HTML2'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_HTMLView', new _WidgetInfo('HTML3', 'sidebar', document.getElementById('HTML3'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_HTMLView', new _WidgetInfo('HTML1', 'sidebar', document.getElementById('HTML1'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_AttributionView', new _WidgetInfo('Attribution1', 'footer', document.getElementById('Attribution1'), {}, 'displayModeFull'));




Navigation


index

modules |

next |

previous |

Python »

en
3.7.3
Documentation  »
        
The Python Tutorial »









$('.inline-search').show(0);
         |
    







3. An Informal Introduction to Python¶
In the following examples, input and output are distinguished by the presence or
absence of prompts (>>> and …): to repeat the example, you must type
everything after the prompt, when the prompt appears; lines that do not begin
with a prompt are output from the interpreter. Note that a secondary prompt on a
line by itself in an example means you must type a blank line; this is used to
end a multi-line command.
Many of the examples in this manual, even those entered at the interactive
prompt, include comments.  Comments in Python start with the hash character,
#, and extend to the end of the physical line.  A comment may appear at the
start of a line or following whitespace or code, but not within a string
literal.  A hash character within a string literal is just a hash character.
Since comments are to clarify code and are not interpreted by Python, they may
be omitted when typing in examples.
Some examples:
# this is the first comment
spam = 1  # and this is the second comment
          # ... and now a third!
text = "# This is not a comment because it's inside quotes."



3.1. Using Python as a Calculator¶
Let’s try some simple Python commands.  Start the interpreter and wait for the
primary prompt, >>>.  (It shouldn’t take long.)

3.1.1. Numbers¶
The interpreter acts as a simple calculator: you can type an expression at it
and it will write the value.  Expression syntax is straightforward: the
operators +, -, * and / work just like in most other languages
(for example, Pascal or C); parentheses (()) can be used for grouping.
For example:
>>> 2 + 2
4
>>> 50 - 5*6
20
>>> (50 - 5*6) / 4
5.0
>>> 8 / 5  # division always returns a floating point number
1.6


The integer numbers (e.g. 2, 4, 20) have type int,
the ones with a fractional part (e.g. 5.0, 1.6) have type
float.  We will see more about numeric types later in the tutorial.
Division (/) always returns a float.  To do floor division and
get an integer result (discarding any fractional result) you can use the //
operator; to calculate the remainder you can use %:
>>> 17 / 3  # classic division returns a float
5.666666666666667
>>>
>>> 17 // 3  # floor division discards the fractional part
5
>>> 17 % 3  # the % operator returns the remainder of the division
2
>>> 5 * 3 + 2  # result * divisor + remainder
17


With Python, it is possible to use the ** operator to calculate powers [1]:
>>> 5 ** 2  # 5 squared
25
>>> 2 ** 7  # 2 to the power of 7
128


The equal sign (=) is used to assign a value to a variable. Afterwards, no
result is displayed before the next interactive prompt:
>>> width = 20
>>> height = 5 * 9
>>> width * height
900


If a variable is not “defined” (assigned a value), trying to use it will
give you an error:
>>> n  # try to access an undefined variable
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'n' is not defined


There is full support for floating point; operators with mixed type operands
convert the integer operand to floating point:
>>> 4 * 3.75 - 1
14.0


In interactive mode, the last printed expression is assigned to the variable
_.  This means that when you are using Python as a desk calculator, it is
somewhat easier to continue calculations, for example:
>>> tax = 12.5 / 100
>>> price = 100.50
>>> price * tax
12.5625
>>> price + _
113.0625
>>> round(_, 2)
113.06


This variable should be treated as read-only by the user.  Don’t explicitly
assign a value to it — you would create an independent local variable with the
same name masking the built-in variable with its magic behavior.
In addition to int and float, Python supports other types of
numbers, such as Decimal and Fraction.
Python also has built-in support for complex numbers,
and uses the j or J suffix to indicate the imaginary part
(e.g. 3+5j).


3.1.2. Strings¶
Besides numbers, Python can also manipulate strings, which can be expressed
in several ways.  They can be enclosed in single quotes ('...') or
double quotes ("...") with the same result [2].  \ can be used
to escape quotes:
>>> 'spam eggs'  # single quotes
'spam eggs'
>>> 'doesn\'t'  # use \' to escape the single quote...
"doesn't"
>>> "doesn't"  # ...or use double quotes instead
"doesn't"
>>> '"Yes," they said.'
'"Yes," they said.'
>>> "\"Yes,\" they said."
'"Yes," they said.'
>>> '"Isn\'t," they said.'
'"Isn\'t," they said.'


In the interactive interpreter, the output string is enclosed in quotes and
special characters are escaped with backslashes.  While this might sometimes
look different from the input (the enclosing quotes could change), the two
strings are equivalent.  The string is enclosed in double quotes if
the string contains a single quote and no double quotes, otherwise it is
enclosed in single quotes.  The print() function produces a more
readable output, by omitting the enclosing quotes and by printing escaped
and special characters:
>>> '"Isn\'t," they said.'
'"Isn\'t," they said.'
>>> print('"Isn\'t," they said.')
"Isn't," they said.
>>> s = 'First line.\nSecond line.'  # \n means newline
>>> s  # without print(), \n is included in the output
'First line.\nSecond line.'
>>> print(s)  # with print(), \n produces a new line
First line.
Second line.


If you don’t want characters prefaced by \ to be interpreted as
special characters, you can use raw strings by adding an r before
the first quote:
>>> print('C:\some\name')  # here \n means newline!
C:\some
ame
>>> print(r'C:\some\name')  # note the r before the quote
C:\some\name


String literals can span multiple lines.  One way is using triple-quotes:
"""...""" or '''...'''.  End of lines are automatically
included in the string, but it’s possible to prevent this by adding a \ at
the end of the line.  The following example:
print("""\
Usage: thingy [OPTIONS]
     -h                        Display this usage message
     -H hostname               Hostname to connect to
""")


produces the following output (note that the initial newline is not included):
Usage: thingy [OPTIONS]
     -h                        Display this usage message
     -H hostname               Hostname to connect to


Strings can be concatenated (glued together) with the + operator, and
repeated with *:
>>> # 3 times 'un', followed by 'ium'
>>> 3 * 'un' + 'ium'
'unununium'


Two or more string literals (i.e. the ones enclosed between quotes) next
to each other are automatically concatenated.
>>> 'Py' 'thon'
'Python'


This feature is particularly useful when you want to break long strings:
>>> text = ('Put several strings within parentheses '
...         'to have them joined together.')
>>> text
'Put several strings within parentheses to have them joined together.'


This only works with two literals though, not with variables or expressions:
>>> prefix = 'Py'
>>> prefix 'thon'  # can't concatenate a variable and a string literal
  File "<stdin>", line 1
    prefix 'thon'
                ^
SyntaxError: invalid syntax
>>> ('un' * 3) 'ium'
  File "<stdin>", line 1
    ('un' * 3) 'ium'
                   ^
SyntaxError: invalid syntax


If you want to concatenate variables or a variable and a literal, use +:
>>> prefix + 'thon'
'Python'


Strings can be indexed (subscripted), with the first character having index 0.
There is no separate character type; a character is simply a string of size
one:
>>> word = 'Python'
>>> word[0]  # character in position 0
'P'
>>> word[5]  # character in position 5
'n'


Indices may also be negative numbers, to start counting from the right:
>>> word[-1]  # last character
'n'
>>> word[-2]  # second-last character
'o'
>>> word[-6]
'P'


Note that since -0 is the same as 0, negative indices start from -1.
In addition to indexing, slicing is also supported.  While indexing is used
to obtain individual characters, slicing allows you to obtain substring:
>>> word[0:2]  # characters from position 0 (included) to 2 (excluded)
'Py'
>>> word[2:5]  # characters from position 2 (included) to 5 (excluded)
'tho'


Note how the start is always included, and the end always excluded.  This
makes sure that s[:i] + s[i:] is always equal to s:
>>> word[:2] + word[2:]
'Python'
>>> word[:4] + word[4:]
'Python'


Slice indices have useful defaults; an omitted first index defaults to zero, an
omitted second index defaults to the size of the string being sliced.
>>> word[:2]   # character from the beginning to position 2 (excluded)
'Py'
>>> word[4:]   # characters from position 4 (included) to the end
'on'
>>> word[-2:]  # characters from the second-last (included) to the end
'on'


One way to remember how slices work is to think of the indices as pointing
between characters, with the left edge of the first character numbered 0.
Then the right edge of the last character of a string of n characters has
index n, for example:
 +---+---+---+---+---+---+
 | P | y | t | h | o | n |
 +---+---+---+---+---+---+
 0   1   2   3   4   5   6
-6  -5  -4  -3  -2  -1


The first row of numbers gives the position of the indices 0…6 in the string;
the second row gives the corresponding negative indices. The slice from i to
j consists of all characters between the edges labeled i and j,
respectively.
For non-negative indices, the length of a slice is the difference of the
indices, if both are within bounds.  For example, the length of word[1:3] is
2.
Attempting to use an index that is too large will result in an error:
>>> word[42]  # the word only has 6 characters
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
IndexError: string index out of range


However, out of range slice indexes are handled gracefully when used for
slicing:
>>> word[4:42]
'on'
>>> word[42:]
''


Python strings cannot be changed — they are immutable.
Therefore, assigning to an indexed position in the string results in an error:
>>> word[0] = 'J'
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'str' object does not support item assignment
>>> word[2:] = 'py'
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'str' object does not support item assignment


If you need a different string, you should create a new one:
>>> 'J' + word[1:]
'Jython'
>>> word[:2] + 'py'
'Pypy'


The built-in function len() returns the length of a string:
>>> s = 'supercalifragilisticexpialidocious'
>>> len(s)
34



See also

Text Sequence Type — str
Strings are examples of sequence types, and support the common
operations supported by such types.
String Methods
Strings support a large number of methods for
basic transformations and searching.
Formatted string literals
String literals that have embedded expressions.
Format String Syntax
Information about string formatting with str.format().
printf-style String Formatting
The old formatting operations invoked when strings are
the left operand of the % operator are described in more detail here.




3.1.3. Lists¶
Python knows a number of compound data types, used to group together other
values.  The most versatile is the list, which can be written as a list of
comma-separated values (items) between square brackets.  Lists might contain
items of different types, but usually the items all have the same type.
>>> squares = [1, 4, 9, 16, 25]
>>> squares
[1, 4, 9, 16, 25]


Like strings (and all other built-in sequence type), lists can be
indexed and sliced:
>>> squares[0]  # indexing returns the item
1
>>> squares[-1]
25
>>> squares[-3:]  # slicing returns a new list
[9, 16, 25]


All slice operations return a new list containing the requested elements.  This
means that the following slice returns a new (shallow) copy of the list:
>>> squares[:]
[1, 4, 9, 16, 25]


Lists also support operations like concatenation:
>>> squares + [36, 49, 64, 81, 100]
[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]


Unlike strings, which are immutable, lists are a mutable
type, i.e. it is possible to change their content:
>>> cubes = [1, 8, 27, 65, 125]  # something's wrong here
>>> 4 ** 3  # the cube of 4 is 64, not 65!
64
>>> cubes[3] = 64  # replace the wrong value
>>> cubes
[1, 8, 27, 64, 125]


You can also add new items at the end of the list, by using
the append() method (we will see more about methods later):
>>> cubes.append(216)  # add the cube of 6
>>> cubes.append(7 ** 3)  # and the cube of 7
>>> cubes
[1, 8, 27, 64, 125, 216, 343]


Assignment to slices is also possible, and this can even change the size of the
list or clear it entirely:
>>> letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g']
>>> letters
['a', 'b', 'c', 'd', 'e', 'f', 'g']
>>> # replace some values
>>> letters[2:5] = ['C', 'D', 'E']
>>> letters
['a', 'b', 'C', 'D', 'E', 'f', 'g']
>>> # now remove them
>>> letters[2:5] = []
>>> letters
['a', 'b', 'f', 'g']
>>> # clear the list by replacing all the elements with an empty list
>>> letters[:] = []
>>> letters
[]


The built-in function len() also applies to lists:
>>> letters = ['a', 'b', 'c', 'd']
>>> len(letters)
4


It is possible to nest lists (create lists containing other lists), for
example:
>>> a = ['a', 'b', 'c']
>>> n = [1, 2, 3]
>>> x = [a, n]
>>> x
[['a', 'b', 'c'], [1, 2, 3]]
>>> x[0]
['a', 'b', 'c']
>>> x[0][1]
'b'





3.2. First Steps Towards Programming¶
Of course, we can use Python for more complicated tasks than adding two and two
together.  For instance, we can write an initial sub-sequence of the
Fibonacci series
as follows:
>>> # Fibonacci series:
... # the sum of two elements defines the next
... a, b = 0, 1
>>> while a < 10:
...     print(a)
...     a, b = b, a+b
...
0
1
1
2
3
5
8


This example introduces several new features.

The first line contains a multiple assignment: the variables a and b
simultaneously get the new values 0 and 1.  On the last line this is used again,
demonstrating that the expressions on the right-hand side are all evaluated
first before any of the assignments take place.  The right-hand side expressions
are evaluated  from the left to the right.

The while loop executes as long as the condition (here: a < 10)
remains true.  In Python, like in C, any non-zero integer value is true; zero is
false.  The condition may also be a string or list value, in fact any sequence;
anything with a non-zero length is true, empty sequences are false.  The test
used in the example is a simple comparison.  The standard comparison operators
are written the same as in C: < (less than), > (greater than), ==
(equal to), <= (less than or equal to), >= (greater than or equal to)
and != (not equal to).

The body of the loop is indented: indentation is Python’s way of grouping
statements.  At the interactive prompt, you have to type a tab or space(s) for
each indented line.  In practice you will prepare more complicated input
for Python with a text editor; all decent text editors have an auto-indent
facility.  When a compound statement is entered interactively, it must be
followed by a blank line to indicate completion (since the parser cannot
guess when you have typed the last line).  Note that each line within a basic
block must be indented by the same amount.

The print() function writes the value of the argument(s) it is given.
It differs from just writing the expression you want to write (as we did
earlier in the calculator examples) in the way it handles multiple arguments,
floating point quantities, and strings.  Strings are printed without quotes,
and a space is inserted between items, so you can format things nicely, like
this:
>>> i = 256*256
>>> print('The value of i is', i)
The value of i is 65536


The keyword argument end can be used to avoid the newline after the output,
or end the output with a different string:
>>> a, b = 0, 1
>>> while a < 1000:
...     print(a, end=',')
...     a, b = b, a+b
...
0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,




Footnotes



[1]Since ** has higher precedence than -, -3**2 will be
interpreted as -(3**2) and thus result in -9.  To avoid this
and get 9, you can use (-3)**2.





[2]Unlike other languages, special characters such as \n have the
same meaning with both single ('...') and double ("...") quotes.
The only difference between the two is that within single quotes you don’t
need to escape " (but you have to escape \') and vice versa.









Table of Contents

3. An Informal Introduction to Python
3.1. Using Python as a Calculator
3.1.1. Numbers
3.1.2. Strings
3.1.3. Lists


3.2. First Steps Towards Programming



Previous topic
2. Using the Python Interpreter
Next topic
4. More Control Flow Tools

This Page

Report a Bug

Show Source
        








Navigation


index

modules |

next |

previous |

Python »

en
3.7.3
Documentation  »
        
The Python Tutorial »









$('.inline-search').show(0);
         |
    



    © Copyright 2001-2019, Python Software Foundation.
    
    The Python Software Foundation is a non-profit corporation.
    Please donate.

    Last updated on Apr 15, 2019.
    Found a bug?
    
    Created using Sphinx 1.8.4.
    



    function setAttributeOnload(object, attribute, val) {
      if(window.addEventListener) {
        window.addEventListener('load',
          function(){ object[attribute] = val; }, false);
      } else {
        window.attachEvent('onload', function(){ object[attribute] = val; });
      }
    }
  



      gapi.load("gapi.iframes:gapi.iframes.style.bubble", function() {
        if (gapi.iframes && gapi.iframes.getContext) {
          gapi.iframes.getContext().openChild({
              url: 'https://www.blogger.com/navbar.g?targetBlogID\x3d3941553907430899163\x26blogName\x3dPython+Insider\x26publishMode\x3dPUBLISH_MODE_BLOGSPOT\x26navbarType\x3dBLUE\x26layoutType\x3dLAYOUTS\x26searchRoot\x3dhttps://pythoninsider.blogspot.com/search\x26blogLocale\x3den\x26v\x3d2\x26homepageUrl\x3dhttps://pythoninsider.blogspot.com/\x26vt\x3d-980863490298690034',
              where: document.getElementById("navbar-iframe-container"),
              id: "navbar-iframe"
          });
        }
      });
    
(function() {
var script = document.createElement('script');
script.type = 'text/javascript';
script.src = '//pagead2.googlesyndication.com/pagead/js/google_top_exp.js';
var head = document.getElementsByTagName('head')[0];
if (head) {
head.appendChild(script);
}})();










Python core development news and information.









Tuesday, March 26, 2019





Python 3.8.0a3 is now available for testing





Go get it here:https://www.python.org/downloads/release/python-380a3/The most visible change so far is probably the implementation of PEP 572: Assignment Expressions.  For a detailed list of changes, see:https://docs.python.org/3.8/whatsnew/changelog.htmlPython 3.8.0a3 is the third of four planned alpha releases of Python 3.8, the next feature release of Python.  During the alpha phase, Python 3.8
 remains under heavy development: additional features will be added and 
existing features may be modified or deleted.  Please keep in mind that 
this is a preview release and its use is not recommended for production 
environments.  The last alpha release, Python 3.8.0a4, is planned for 2019-04-29.Thanks
 to all of the many volunteers who help make Python development and 
these releases possible!  Please consider supporting our efforts by 
volunteering yourself or through organization contributions to the Python Software Foundation. 




Posted by
ambv


at
5:18 AM






Email ThisBlogThis!Share to TwitterShare to FacebookShare to Pinterest













Monday, March 25, 2019





Python 3.7.3 is now available





Python 3.7.3 is now available. 3.7.3 is the next maintenance release of Python 3.7, the latest feature release of Python.  You can find the release files, a link to the changelog, and more information here:

    https://www.python.org/downloads/release/python-373/



See the What’s New In Python 3.7 document for more information about the many new features and optimizations included in the 3.7 series.  Detailed information about the changes made in 3.7.3 can be found in its change log.



Thanks to all of the many volunteers who help make Python Development and these releases possible!  Please consider supporting our efforts by volunteering yourself or through organization contributions to the Python Software Foundation.















Posted by
Ned Deily


at
7:51 PM






Email ThisBlogThis!Share to TwitterShare to FacebookShare to Pinterest



Labels:
releases










Monday, March 18, 2019





Python 3.4.10 is now available





Python 3.4.10 is now available.  You can download it here.

Python 3.4.10 is the final release in the Python 3.4 series.  As of this release, the 3.4 branch has been retired, no further changes to 3.4 will be accepted, and no new releases will be made.  This is standard Python policy; Python releases get five years of support and are then retired.

If you're still using Python 3.4, you should consider upgrading to the current version--3.7.2 as of this writing.  Newer versions of Python have many new features, performance improvements, and bug fixes, which should all serve to enhance your Python programming experience.

We in the Python core development community thank you for your interest in 3.4, and we wish you all the best!




Posted by
Larry Hastings


at
4:36 PM






Email ThisBlogThis!Share to TwitterShare to FacebookShare to Pinterest















Python 3.5.7 is now available





Python 3.5.7 is now available.  You can download Python 3.5.7 here.




Posted by
Larry Hastings


at
4:35 PM






Email ThisBlogThis!Share to TwitterShare to FacebookShare to Pinterest













Tuesday, March 12, 2019





Python 3.7.3rc1 is now available for testing





Python 3.7.3rc1 is now available for testing. 3.7.3rc1 is the release preview of the next maintenance release of Python 3.7, the latest feature release of Python. Assuming no critical problems are found prior to 2019-03-25, no code changes are planned between now and the final release. This release candidate is intended to give you the opportunity to test the new security and bug fixes in 3.7.3. We strongly encourage you to test your projects and report issues found to bugs.python.org as soon as possible. Please keep in mind that this is a preview release and, thus, its use is not recommended for production environments.

You can find the release files, a link to the changelog, and more information here:

    https://www.python.org/downloads/release/python-373rc1/









Posted by
Ned Deily


at
7:23 PM






Email ThisBlogThis!Share to TwitterShare to FacebookShare to Pinterest



Labels:
releases










Monday, March 4, 2019





Python 3.5.7rc1 and Python 3.4.10rc1 are now available





Python 3.5.7rc1 and Python 3.4.10rc1 are now available.
You can download Python 3.5.7rc1 here, and you can download Python 3.4.10rc1 here.




Posted by
Larry Hastings


at
4:27 AM






Email ThisBlogThis!Share to TwitterShare to FacebookShare to Pinterest













Sunday, March 3, 2019





Python 2.7.16 released





A bug fix release in the 2.7 series, 2.7.16, is now available for download.




Posted by
Benjamin


at
10:24 PM






Email ThisBlogThis!Share to TwitterShare to FacebookShare to Pinterest















Older Posts

Home




Subscribe to:
Posts (Atom)




                var disqus_shortname = 'pythoninsider';
                var disqus_blogger_current_url = "https://pythoninsider.blogspot.com/";
                if (!disqus_blogger_current_url.length) {
                    disqus_blogger_current_url = "https://pythoninsider.blogspot.com/";
                }
                var disqus_blogger_homepage_url = "https://pythoninsider.blogspot.com/";
                var disqus_blogger_canonical_homepage_url = "https://pythoninsider.blogspot.com/";
            

                    .post-comment-link { visibility: hidden; }
                

                (function() {
                    var bloggerjs = document.createElement('script');
                    bloggerjs.type = 'text/javascript';
                    bloggerjs.async = true;
                    bloggerjs.src = 'http://'+disqus_shortname+'.disqus.com/blogger_index.js';
                    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(bloggerjs);
                })();
                






Subscribe

Subscribe to Python Insider via RSS, Email, or Twitter











Related Links


python.org
Python-Dev mailing list
Python Developer's Guide












Translations


Chinese (Simplified)
Chinese (Traditional)
French
German
Japanese
Korean
Portuguese
Romanian
Russian
Spanish












Python-Dev Blogs









Eli Bendersky




SQL inner and outer joins



6 days ago











PyPy Status Blog




An RPython JIT for LPegs



1 week ago











Pumpichank




Creating Python Snaps



4 years ago











Tim Golden




London Python Dojo December 2014



4 years ago











R. David Murray




Asyncio Implementation Overview



4 years ago











The Voidspace Techie Blog




unittest.mock and mock 1.0 alpha 1



7 years ago











Tarek Ziadé




More privacy please



7 years ago











Deep Thoughts by Raymond Hettinger




Python’s super() considered super!



7 years ago











Brett Cannon


















Jesse Noller


















Boredom & Laziness


















Brian Curtin


















Senthil Kumaran

























Blog Archive








        ▼ 
      



2019

(10)





        ▼ 
      



March

(7)

Python 3.8.0a3 is now available for testing
Python 3.7.3 is now available
Python 3.4.10 is now available
Python 3.5.7 is now available
Python 3.7.3rc1 is now available for testing
Python 3.5.7rc1 and Python 3.4.10rc1 are now avail...
Python 2.7.16 released








        ► 
      



February

(3)









        ► 
      



2018

(24)





        ► 
      



December

(2)







        ► 
      



October

(2)







        ► 
      



September

(1)







        ► 
      



August

(1)







        ► 
      



June

(2)







        ► 
      



May

(3)







        ► 
      



April

(3)







        ► 
      



March

(5)







        ► 
      



February

(2)







        ► 
      



January

(3)









        ► 
      



2017

(17)





        ► 
      



December

(2)







        ► 
      



October

(2)







        ► 
      



September

(3)







        ► 
      



August

(2)







        ► 
      



July

(3)







        ► 
      



June

(1)







        ► 
      



March

(2)







        ► 
      



January

(2)









        ► 
      



2016

(18)





        ► 
      



December

(5)







        ► 
      



November

(1)







        ► 
      



October

(2)







        ► 
      



September

(2)







        ► 
      



August

(1)







        ► 
      



July

(1)







        ► 
      



June

(5)







        ► 
      



May

(1)









        ► 
      



2015

(14)





        ► 
      



December

(2)







        ► 
      



November

(1)







        ► 
      



September

(3)







        ► 
      



August

(1)







        ► 
      



July

(1)







        ► 
      



June

(1)







        ► 
      



May

(2)







        ► 
      



March

(2)







        ► 
      



January

(1)









        ► 
      



2014

(8)





        ► 
      



December

(1)







        ► 
      



November

(1)







        ► 
      



May

(1)







        ► 
      



March

(3)







        ► 
      



February

(2)









        ► 
      



2013

(5)





        ► 
      



November

(2)







        ► 
      



October

(1)







        ► 
      



March

(1)







        ► 
      



February

(1)









        ► 
      



2012

(9)





        ► 
      



December

(1)







        ► 
      



November

(1)







        ► 
      



October

(2)







        ► 
      



August

(1)







        ► 
      



June

(2)







        ► 
      



May

(1)







        ► 
      



March

(1)









        ► 
      



2011

(25)





        ► 
      



August

(2)







        ► 
      



July

(3)







        ► 
      



June

(1)







        ► 
      



May

(7)







        ► 
      



April

(7)







        ► 
      



March

(5)

















Contributors


A.M. Kuchling
Anthony Scopatz
Antoine P.
Benjamin
Brian Curtin
Davidmh
Donald Stufft
Doug Hellmann
Ernest W. Durbin III
Ezio Melotti
Georg Brandl
Jesse
Kelsey Hightower
Larry Hastings
Mathieu Leduc-Hamel
Michael Markert
Mike Driscoll
Ned Deily
Paul Moore
Philip Jenvey
Unknown
Unknown
Unknown
Unknown
ambv
haypo
tp
Éric Araujo












Copyright

Python Insider by the Python Core Developers is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.Based on a work at blog.python.org.














Powered by Blogger.














 




window['__wavt'] = 'AOuZoY79PjTzujkzRh4vAe-6UJu-inzZPg:1555346316079';_WidgetManager._Init('//www.blogger.com/rearrange?blogID\x3d3941553907430899163','//pythoninsider.blogspot.com/','3941553907430899163');
_WidgetManager._SetDataContext([{'name': 'blog', 'data': {'blogId': '3941553907430899163', 'title': 'Python Insider', 'url': 'https://pythoninsider.blogspot.com/', 'canonicalUrl': 'https://pythoninsider.blogspot.com/', 'homepageUrl': 'https://pythoninsider.blogspot.com/', 'searchUrl': 'https://pythoninsider.blogspot.com/search', 'canonicalHomepageUrl': 'https://pythoninsider.blogspot.com/', 'blogspotFaviconUrl': 'https://pythoninsider.blogspot.com/favicon.ico', 'bloggerUrl': 'https://www.blogger.com', 'hasCustomDomain': false, 'httpsEnabled': true, 'enabledCommentProfileImages': true, 'gPlusViewType': 'FILTERED_POSTMOD', 'adultContent': false, 'analyticsAccountNumber': '', 'encoding': 'UTF-8', 'locale': 'en', 'localeUnderscoreDelimited': 'en', 'languageDirection': 'ltr', 'isPrivate': false, 'isMobile': false, 'isMobileRequest': false, 'mobileClass': '', 'isPrivateBlog': false, 'feedLinks': '\x3clink rel\x3d\x22alternate\x22 type\x3d\x22application/atom+xml\x22 title\x3d\x22Python Insider - Atom\x22 href\x3d\x22https://pythoninsider.blogspot.com/feeds/posts/default\x22 /\x3e\n\x3clink rel\x3d\x22alternate\x22 type\x3d\x22application/rss+xml\x22 title\x3d\x22Python Insider - RSS\x22 href\x3d\x22https://pythoninsider.blogspot.com/feeds/posts/default?alt\x3drss\x22 /\x3e\n\x3clink rel\x3d\x22service.post\x22 type\x3d\x22application/atom+xml\x22 title\x3d\x22Python Insider - Atom\x22 href\x3d\x22https://www.blogger.com/feeds/3941553907430899163/posts/default\x22 /\x3e\n', 'meTag': '', 'adsenseHostId': 'ca-host-pub-1556223355139109', 'adsenseHasAds': false, 'ieCssRetrofitLinks': '\x3c!--[if IE]\x3e\x3cscript type\x3d\x22text/javascript\x22 src\x3d\x22https://www.blogger.com/static/v1/jsbin/1953397912-ieretrofit.js\x22\x3e\x3c/script\x3e\n\x3c![endif]--\x3e', 'view': '', 'dynamicViewsCommentsSrc': '//www.blogblog.com/dynamicviews/4224c15c4e7c9321/js/comments.js', 'dynamicViewsScriptSrc': '//www.blogblog.com/dynamicviews/5d3f379b4eb56506', 'plusOneApiSrc': 'https://apis.google.com/js/plusone.js', 'disableGComments': true, 'sharing': {'platforms': [{'name': 'Get link', 'key': 'link', 'shareMessage': 'Get link', 'target': ''}, {'name': 'Facebook', 'key': 'facebook', 'shareMessage': 'Share to Facebook', 'target': 'facebook'}, {'name': 'BlogThis!', 'key': 'blogThis', 'shareMessage': 'BlogThis!', 'target': 'blog'}, {'name': 'Twitter', 'key': 'twitter', 'shareMessage': 'Share to Twitter', 'target': 'twitter'}, {'name': 'Pinterest', 'key': 'pinterest', 'shareMessage': 'Share to Pinterest', 'target': 'pinterest'}, {'name': 'Email', 'key': 'email', 'shareMessage': 'Email', 'target': 'email'}], 'disableGooglePlus': true, 'googlePlusShareButtonWidth': 300, 'googlePlusBootstrap': '\x3cscript type\x3d\x22text/javascript\x22\x3ewindow.___gcfg \x3d {\x27lang\x27: \x27en\x27};\x3c/script\x3e'}, 'hasCustomJumpLinkMessage': false, 'jumpLinkMessage': 'Read more', 'pageType': 'index', 'pageName': '', 'pageTitle': 'Python Insider'}}, {'name': 'features', 'data': {'sharing_get_link_dialog': 'true', 'sharing_native': 'false'}}, {'name': 'messages', 'data': {'edit': 'Edit', 'linkCopiedToClipboard': 'Link copied to clipboard!', 'ok': 'Ok', 'postLink': 'Post Link'}}, {'name': 'template', 'data': {'name': 'custom', 'localizedName': 'Custom', 'isResponsive': false, 'isAlternateRendering': false, 'isCustom': true}}, {'name': 'view', 'data': {'classic': {'name': 'classic', 'url': '?view\x3dclassic'}, 'flipcard': {'name': 'flipcard', 'url': '?view\x3dflipcard'}, 'magazine': {'name': 'magazine', 'url': '?view\x3dmagazine'}, 'mosaic': {'name': 'mosaic', 'url': '?view\x3dmosaic'}, 'sidebar': {'name': 'sidebar', 'url': '?view\x3dsidebar'}, 'snapshot': {'name': 'snapshot', 'url': '?view\x3dsnapshot'}, 'timeslide': {'name': 'timeslide', 'url': '?view\x3dtimeslide'}, 'isMobile': false, 'title': 'Python Insider', 'description': 'Python core development news and information.', 'url': 'https://pythoninsider.blogspot.com/', 'type': 'feed', 'isSingleItem': false, 'isMultipleItems': true, 'isError': false, 'isPage': false, 'isPost': false, 'isHomepage': true, 'isArchive': false, 'isLabelSearch': false}}]);
_WidgetManager._RegisterWidget('_NavbarView', new _WidgetInfo('Navbar1', 'navbar', document.getElementById('Navbar1'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_HeaderView', new _WidgetInfo('Header1', 'header', document.getElementById('Header1'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_BlogView', new _WidgetInfo('Blog1', 'main', document.getElementById('Blog1'), {'cmtInteractionsEnabled': false, 'lightboxEnabled': true, 'lightboxModuleUrl': 'https://www.blogger.com/static/v1/jsbin/696337176-lbx.js', 'lightboxCssUrl': 'https://www.blogger.com/static/v1/v-css/368954415-lightbox_bundle.css'}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_HTMLView', new _WidgetInfo('HTML2', 'main', document.getElementById('HTML2'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_HTMLView', new _WidgetInfo('HTML1', 'sidebar-right-1', document.getElementById('HTML1'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_LinkListView', new _WidgetInfo('LinkList1', 'sidebar-right-1', document.getElementById('LinkList1'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_LinkListView', new _WidgetInfo('LinkList2', 'sidebar-right-1', document.getElementById('LinkList2'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_BlogListView', new _WidgetInfo('BlogList1', 'sidebar-right-1', document.getElementById('BlogList1'), {'numItemsToShow': 0, 'totalItems': 13}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_BlogArchiveView', new _WidgetInfo('BlogArchive1', 'sidebar-right-1', document.getElementById('BlogArchive1'), {'languageDirection': 'ltr', 'loadingMessage': 'Loading\x26hellip;'}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_ProfileView', new _WidgetInfo('Profile1', 'sidebar-right-1', document.getElementById('Profile1'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_HTMLView', new _WidgetInfo('HTML3', 'sidebar-right-1', document.getElementById('HTML3'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_AttributionView', new _WidgetInfo('Attribution1', 'attribution', document.getElementById('Attribution1'), {}, 'displayModeFull'));




    function setAttributeOnload(object, attribute, val) {
      if(window.addEventListener) {
        window.addEventListener('load',
          function(){ object[attribute] = val; }, false);
      } else {
        window.attachEvent('onload', function(){ object[attribute] = val; });
      }
    }
  



      gapi.load("gapi.iframes:gapi.iframes.style.bubble", function() {
        if (gapi.iframes && gapi.iframes.getContext) {
          gapi.iframes.getContext().openChild({
              url: 'https://www.blogger.com/navbar.g?targetBlogID\x3d8520\x26blogName\x3dPython+Software+Foundation+News\x26publishMode\x3dPUBLISH_MODE_BLOGSPOT\x26navbarType\x3dLIGHT\x26layoutType\x3dLAYOUTS\x26searchRoot\x3dhttps://pyfound.blogspot.com/search\x26blogLocale\x3den\x26v\x3d2\x26homepageUrl\x3dhttp://pyfound.blogspot.com/\x26targetPostID\x3d8081495031711533988\x26blogPostOrPageUrl\x3dhttp://pyfound.blogspot.com/2019/04/update-on-python-in-education-proposal.html\x26vt\x3d-287854312894691908',
              where: document.getElementById("navbar-iframe-container"),
              id: "navbar-iframe"
          });
        }
      });
    
(function() {
var script = document.createElement('script');
script.type = 'text/javascript';
script.src = '//pagead2.googlesyndication.com/pagead/js/google_top_exp.js';
var head = document.getElementsByTagName('head')[0];
if (head) {
head.appendChild(script);
}})();




























































  News from the Python Software Foundation

























































































Thursday, April 04, 2019







Update on the Python in Education Proposal Phase





In January when we launched the Python in Education project, we were a bit too ambitious with our timeline. Due to other commitments, we were not able to stick to the original time frame.

Here is the revised timeline:


April 4 - May 9: Request for Proposals phase

May 10 - May 31: Review process

June 1: Notify the accepted proposals

June-August of 2019: Accepted proposal work begins





We'd also like to take this opportunity to inform everyone interested in submitting a proposal that we selected three categories we'd like to see proposals on. Additionally, we'd like to share the evaluation rubric we will use when reviewing each proposal. 



Proposal categories

After reviewing all of the ideas we received in the first phase of this project, we have narrowed the scope of the proposals to:


resources (curriculums, evaluations, studies, multidisciplinary projects)
localization (translations, global currency, global timestamps, etc)
mobile (development on mobile devices)


We ask that if you are considering submitting a proposal that it fall into one of these broad categories.



Evaluation rubric








Every proposal we receive will be evaluated against this rubric. We are looking for proposals that adhere to the PSF's code of conduct, align with the PSF's mission, have international reach, are feasible, and pertain to underrepresented topics.



If anyone has any questions, please contact us at edu-committee@python.org. 










Posted by



Ewa Jodlowska




at

4/04/2019 03:08:00 PM







































Older Post

Home


















The mission of the Python Software Foundation is to promote, protect, and advance the Python programming language, and to support and facilitate the growth of a diverse and international community of Python programmers.













Python Software Foundation
Grants Program
Membership
Awards
Meeting Minutes














Tweets by @ThePSF
!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+"://platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");












Blog Archive








        ▼ 
      



2019

(11)





        ▼ 
      



April

(1)

Update on the Python in Education Proposal Phase








        ► 
      



March

(2)







        ► 
      



February

(5)







        ► 
      



January

(3)









        ► 
      



2018

(31)





        ► 
      



December

(5)







        ► 
      



November

(1)







        ► 
      



October

(4)







        ► 
      



September

(1)







        ► 
      



August

(2)







        ► 
      



July

(3)







        ► 
      



June

(3)







        ► 
      



May

(5)







        ► 
      



April

(2)







        ► 
      



March

(2)







        ► 
      



February

(1)







        ► 
      



January

(2)









        ► 
      



2017

(32)





        ► 
      



December

(3)







        ► 
      



November

(2)







        ► 
      



October

(4)







        ► 
      



September

(6)







        ► 
      



August

(2)







        ► 
      



July

(2)







        ► 
      



May

(2)







        ► 
      



April

(3)







        ► 
      



March

(2)







        ► 
      



February

(2)







        ► 
      



January

(4)









        ► 
      



2016

(27)





        ► 
      



December

(2)







        ► 
      



October

(2)







        ► 
      



August

(4)







        ► 
      



July

(1)







        ► 
      



June

(3)







        ► 
      



May

(6)







        ► 
      



April

(4)







        ► 
      



March

(2)







        ► 
      



January

(3)









        ► 
      



2015

(67)





        ► 
      



December

(2)







        ► 
      



November

(4)







        ► 
      



October

(4)







        ► 
      



September

(1)







        ► 
      



August

(2)







        ► 
      



July

(4)







        ► 
      



June

(6)







        ► 
      



May

(4)







        ► 
      



April

(13)







        ► 
      



March

(14)







        ► 
      



February

(9)







        ► 
      



January

(4)









        ► 
      



2014

(14)





        ► 
      



October

(1)







        ► 
      



September

(1)







        ► 
      



August

(2)







        ► 
      



July

(1)







        ► 
      



May

(1)







        ► 
      



April

(1)







        ► 
      



March

(2)







        ► 
      



February

(3)







        ► 
      



January

(2)









        ► 
      



2013

(18)





        ► 
      



November

(1)







        ► 
      



September

(2)







        ► 
      



August

(1)







        ► 
      



July

(1)







        ► 
      



June

(1)







        ► 
      



April

(1)







        ► 
      



March

(5)







        ► 
      



February

(3)







        ► 
      



January

(3)









        ► 
      



2012

(21)





        ► 
      



December

(3)







        ► 
      



November

(2)







        ► 
      



October

(2)







        ► 
      



September

(1)







        ► 
      



August

(1)







        ► 
      



July

(1)







        ► 
      



June

(2)







        ► 
      



May

(4)







        ► 
      



April

(1)







        ► 
      



March

(1)







        ► 
      



January

(3)









        ► 
      



2011

(55)





        ► 
      



December

(2)







        ► 
      



November

(1)







        ► 
      



October

(7)







        ► 
      



September

(5)







        ► 
      



August

(2)







        ► 
      



July

(1)







        ► 
      



June

(3)







        ► 
      



May

(8)







        ► 
      



April

(8)







        ► 
      



March

(13)







        ► 
      



February

(2)







        ► 
      



January

(3)









        ► 
      



2010

(35)





        ► 
      



December

(4)







        ► 
      



November

(1)







        ► 
      



October

(3)







        ► 
      



September

(2)







        ► 
      



August

(1)







        ► 
      



July

(8)







        ► 
      



June

(6)







        ► 
      



May

(2)







        ► 
      



April

(4)







        ► 
      



March

(2)







        ► 
      



January

(2)









        ► 
      



2009

(21)





        ► 
      



December

(1)







        ► 
      



October

(1)







        ► 
      



September

(6)







        ► 
      



August

(4)







        ► 
      



July

(4)







        ► 
      



June

(1)







        ► 
      



May

(2)







        ► 
      



April

(1)







        ► 
      



February

(1)









        ► 
      



2008

(23)





        ► 
      



December

(1)







        ► 
      



November

(1)







        ► 
      



October

(1)







        ► 
      



August

(3)







        ► 
      



July

(1)







        ► 
      



May

(3)







        ► 
      



April

(1)







        ► 
      



March

(5)







        ► 
      



February

(4)







        ► 
      



January

(3)









        ► 
      



2007

(26)





        ► 
      



December

(3)







        ► 
      



November

(2)







        ► 
      



October

(6)







        ► 
      



September

(1)







        ► 
      



August

(1)







        ► 
      



July

(1)







        ► 
      



June

(2)







        ► 
      



May

(1)







        ► 
      



April

(1)







        ► 
      



March

(2)







        ► 
      



February

(3)







        ► 
      



January

(3)









        ► 
      



2006

(39)





        ► 
      



December

(3)







        ► 
      



November

(4)







        ► 
      



October

(5)







        ► 
      



September

(4)







        ► 
      



August

(4)







        ► 
      



July

(3)







        ► 
      



May

(7)







        ► 
      



April

(6)







        ► 
      



March

(3)






































































Simple theme. Powered by Blogger.





























    window.setTimeout(function() {
        document.body.className = document.body.className.replace('loading', '');
      }, 10);
  


window['__wavt'] = 'AOuZoY7K750NbdMajj_oJEj4S1thYw9m_g:1555314794762';_WidgetManager._Init('//www.blogger.com/rearrange?blogID\x3d8520','//pyfound.blogspot.com/2019/04/update-on-python-in-education-proposal.html','8520');
_WidgetManager._SetDataContext([{'name': 'blog', 'data': {'blogId': '8520', 'title': '\x3ca href\x3d\x22http://python.org/psf/\x22\x3ePython Software Foundation\x3c/a\x3e News', 'url': 'http://pyfound.blogspot.com/2019/04/update-on-python-in-education-proposal.html', 'canonicalUrl': 'http://pyfound.blogspot.com/2019/04/update-on-python-in-education-proposal.html', 'homepageUrl': 'http://pyfound.blogspot.com/', 'searchUrl': 'http://pyfound.blogspot.com/search', 'canonicalHomepageUrl': 'http://pyfound.blogspot.com/', 'blogspotFaviconUrl': 'http://pyfound.blogspot.com/favicon.ico', 'bloggerUrl': 'https://www.blogger.com', 'hasCustomDomain': false, 'httpsEnabled': true, 'enabledCommentProfileImages': true, 'gPlusViewType': 'FILTERED_POSTMOD', 'adultContent': false, 'analyticsAccountNumber': '', 'encoding': 'UTF-8', 'locale': 'en', 'localeUnderscoreDelimited': 'en', 'languageDirection': 'ltr', 'isPrivate': false, 'isMobile': false, 'isMobileRequest': false, 'mobileClass': '', 'isPrivateBlog': false, 'feedLinks': '\x3clink rel\x3d\x22alternate\x22 type\x3d\x22application/atom+xml\x22 title\x3d\x22Python Software Foundation News - Atom\x22 href\x3d\x22http://pyfound.blogspot.com/feeds/posts/default\x22 /\x3e\n\x3clink rel\x3d\x22alternate\x22 type\x3d\x22application/rss+xml\x22 title\x3d\x22Python Software Foundation News - RSS\x22 href\x3d\x22http://pyfound.blogspot.com/feeds/posts/default?alt\x3drss\x22 /\x3e\n\x3clink rel\x3d\x22service.post\x22 type\x3d\x22application/atom+xml\x22 title\x3d\x22Python Software Foundation News - Atom\x22 href\x3d\x22https://www.blogger.com/feeds/8520/posts/default\x22 /\x3e\n\n\x3clink rel\x3d\x22alternate\x22 type\x3d\x22application/atom+xml\x22 title\x3d\x22Python Software Foundation News - Atom\x22 href\x3d\x22http://pyfound.blogspot.com/feeds/8081495031711533988/comments/default\x22 /\x3e\n', 'meTag': '', 'adsenseHostId': 'ca-host-pub-1556223355139109', 'adsenseHasAds': false, 'ieCssRetrofitLinks': '\x3c!--[if IE]\x3e\x3cscript type\x3d\x22text/javascript\x22 src\x3d\x22https://www.blogger.com/static/v1/jsbin/1953397912-ieretrofit.js\x22\x3e\x3c/script\x3e\n\x3c![endif]--\x3e', 'view': '', 'dynamicViewsCommentsSrc': '//www.blogblog.com/dynamicviews/4224c15c4e7c9321/js/comments.js', 'dynamicViewsScriptSrc': '//www.blogblog.com/dynamicviews/5d3f379b4eb56506', 'plusOneApiSrc': 'https://apis.google.com/js/plusone.js', 'disableGComments': true, 'sharing': {'platforms': [{'name': 'Get link', 'key': 'link', 'shareMessage': 'Get link', 'target': ''}, {'name': 'Facebook', 'key': 'facebook', 'shareMessage': 'Share to Facebook', 'target': 'facebook'}, {'name': 'BlogThis!', 'key': 'blogThis', 'shareMessage': 'BlogThis!', 'target': 'blog'}, {'name': 'Twitter', 'key': 'twitter', 'shareMessage': 'Share to Twitter', 'target': 'twitter'}, {'name': 'Pinterest', 'key': 'pinterest', 'shareMessage': 'Share to Pinterest', 'target': 'pinterest'}, {'name': 'Email', 'key': 'email', 'shareMessage': 'Email', 'target': 'email'}], 'disableGooglePlus': true, 'googlePlusShareButtonWidth': 300, 'googlePlusBootstrap': '\x3cscript type\x3d\x22text/javascript\x22\x3ewindow.___gcfg \x3d {\x27lang\x27: \x27en\x27};\x3c/script\x3e'}, 'hasCustomJumpLinkMessage': false, 'jumpLinkMessage': 'Read more', 'pageType': 'item', 'postId': '8081495031711533988', 'pageName': 'Update on the Python in Education Proposal Phase', 'pageTitle': 'Python Software Foundation News: Update on the Python in Education Proposal Phase'}}, {'name': 'features', 'data': {'sharing_get_link_dialog': 'true', 'sharing_native': 'false'}}, {'name': 'messages', 'data': {'edit': 'Edit', 'linkCopiedToClipboard': 'Link copied to clipboard!', 'ok': 'Ok', 'postLink': 'Post Link'}}, {'name': 'template', 'data': {'name': 'Simple', 'localizedName': 'Simple', 'isResponsive': false, 'isAlternateRendering': false, 'isCustom': false, 'variant': 'simplysimple', 'variantId': 'simplysimple'}}, {'name': 'view', 'data': {'classic': {'name': 'classic', 'url': '?view\x3dclassic'}, 'flipcard': {'name': 'flipcard', 'url': '?view\x3dflipcard'}, 'magazine': {'name': 'magazine', 'url': '?view\x3dmagazine'}, 'mosaic': {'name': 'mosaic', 'url': '?view\x3dmosaic'}, 'sidebar': {'name': 'sidebar', 'url': '?view\x3dsidebar'}, 'snapshot': {'name': 'snapshot', 'url': '?view\x3dsnapshot'}, 'timeslide': {'name': 'timeslide', 'url': '?view\x3dtimeslide'}, 'isMobile': false, 'title': 'Update on the Python in Education Proposal Phase', 'description': 'In January when we launched the Python in Education project , we were a bit too ambitious with our timeline. Due to other commitments, we we...', 'url': 'http://pyfound.blogspot.com/2019/04/update-on-python-in-education-proposal.html', 'type': 'item', 'isSingleItem': true, 'isMultipleItems': false, 'isError': false, 'isPage': false, 'isPost': true, 'isHomepage': false, 'isArchive': false, 'isLabelSearch': false, 'postId': 8081495031711533988}}]);
_WidgetManager._RegisterWidget('_NavbarView', new _WidgetInfo('Navbar1', 'navbar', document.getElementById('Navbar1'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_HeaderView', new _WidgetInfo('Header1', 'header', document.getElementById('Header1'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_BlogView', new _WidgetInfo('Blog1', 'main', document.getElementById('Blog1'), {'cmtInteractionsEnabled': false, 'lightboxEnabled': true, 'lightboxModuleUrl': 'https://www.blogger.com/static/v1/jsbin/696337176-lbx.js', 'lightboxCssUrl': 'https://www.blogger.com/static/v1/v-css/368954415-lightbox_bundle.css'}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_TextView', new _WidgetInfo('Text1', 'sidebar-right-1', document.getElementById('Text1'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_LinkListView', new _WidgetInfo('LinkList1', 'sidebar-right-1', document.getElementById('LinkList1'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_HTMLView', new _WidgetInfo('HTML1', 'sidebar-right-1', document.getElementById('HTML1'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_BlogArchiveView', new _WidgetInfo('BlogArchive1', 'sidebar-right-1', document.getElementById('BlogArchive1'), {'languageDirection': 'ltr', 'loadingMessage': 'Loading\x26hellip;'}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_AttributionView', new _WidgetInfo('Attribution1', 'footer-3', document.getElementById('Attribution1'), {}, 'displayModeFull'));




    function setAttributeOnload(object, attribute, val) {
      if(window.addEventListener) {
        window.addEventListener('load',
          function(){ object[attribute] = val; }, false);
      } else {
        window.attachEvent('onload', function(){ object[attribute] = val; });
      }
    }
  



      gapi.load("gapi.iframes:gapi.iframes.style.bubble", function() {
        if (gapi.iframes && gapi.iframes.getContext) {
          gapi.iframes.getContext().openChild({
              url: 'https://www.blogger.com/navbar.g?targetBlogID\x3d8520\x26blogName\x3dPython+Software+Foundation+News\x26publishMode\x3dPUBLISH_MODE_BLOGSPOT\x26navbarType\x3dLIGHT\x26layoutType\x3dLAYOUTS\x26searchRoot\x3dhttps://pyfound.blogspot.com/search\x26blogLocale\x3den\x26v\x3d2\x26homepageUrl\x3dhttp://pyfound.blogspot.com/\x26targetPostID\x3d2562968958598269587\x26blogPostOrPageUrl\x3dhttp://pyfound.blogspot.com/2019/03/puppy-presents-its-1st-annual-benefit_27.html\x26vt\x3d-3077669128482070760',
              where: document.getElementById("navbar-iframe-container"),
              id: "navbar-iframe"
          });
        }
      });
    
(function() {
var script = document.createElement('script');
script.type = 'text/javascript';
script.src = '//pagead2.googlesyndication.com/pagead/js/google_top_exp.js';
var head = document.getElementsByTagName('head')[0];
if (head) {
head.appendChild(script);
}})();




























































  News from the Python Software Foundation

























































































Wednesday, March 27, 2019








PuPPy Presents its 1st Annual Benefit featuring Guido van Rossum







p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; line-height: 19.0px; font: 16.0px 'Times New Roman'; color: #000000; -webkit-text-stroke: #000000}
p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; line-height: 14.0px; font: 12.0px Times; color: #000000; -webkit-text-stroke: #000000; min-height: 14.0px}
p.p3 {margin: 0.0px 0.0px 5.3px 0.0px; line-height: 22.0px; font: 18.7px 'Times New Roman'; color: #000000; -webkit-text-stroke: #000000}
p.p4 {margin: 0.0px 0.0px 2.6px 0.0px; line-height: 19.0px; font: 16.0px 'Times New Roman'; color: #000000; -webkit-text-stroke: #000000}
p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; line-height: 19.0px; font: 16.0px 'Times New Roman'; color: #1155cc; -webkit-text-stroke: #1155cc}
p.p6 {margin: 0.0px 0.0px 5.3px 0.0px; line-height: 22.0px; font: 14.0px Times; color: #000000; -webkit-text-stroke: #000000; min-height: 18.0px}
span.s1 {font-kerning: none}
span.s2 {text-decoration: underline ; font-kerning: none; color: #1155cc; -webkit-text-stroke: 0px #1155cc}
span.s3 {text-decoration: underline ; font-kerning: none}




PuPPy Presents its 1st Annual Benefit



A historic discussion of programming language creators about

the past and future of language design.









April 2, 2019, 5:30 - 9:30 PM

The Collective Seattle

400 Dexter Ave N.

Seattle, WA 98109





Featuring Language Creators

James Gosling - Java

Anders Hejlsberg - Turbo Pascal, C#, TypeScript

Guido van Rossum - Python

Larry Wall - Perl




Summary



PuPPy, Seattle's Puget Sound Programming Python user group, presents its 1st annual charity event. The event will feature the creators of C#, Java, Perl, Python, and TypeScript in a conversation about programming language design. 



The charity event brings together this unique group of computer science pioneers, unlike any event held before. These great minds come together for what will surely be a fantastic night of discussion, as the panel delves into the past and future of programming language creation. The event will attract innovators and engineers from Seattle, the nation’s fastest growing technology hub.



The event is a benefit for CSforALL, a non-profit organization that represents more than 500 members who are educators, content providers, funders and researchers who share a vision for all students in the U.S. to learn computer science. CSforALL provides leadership and guidance that helps the K-12 education community implement computer science initiatives, draw from best practices and connect with national organizations to expand access to all students in the U.S.



The event follows in the spirit and culture of PuPPy, the producers of this benefit, as an inclusive community. The very first PuPPy meeting 54 months ago was a mini-conference that featured discussions on allyship and helping more women join the ranks of software professionals. 



Event tickets and further details are available at: http://bdfl-gift.pspython.com.





Speakers



Cyrus Habib - Washington State Lieutenant Governor - Opening remarks

Cyrus Habib was elected Washington State’s 16th Lieutenant Governor in November 2016 at the age of 35. He had previously been elected to the State House of Representatives in 2012 and the State Senate in 2014, where he was Democratic Whip and a member of the Democratic leadership team. As Lt. Governor, he is President of the State Senate, serves as Acting Governor whenever Governor Inslee leaves the state, and oversees an agency whose key issues include economic development, trade, and higher education.

A three-time cancer survivor, Lt. Governor Habib has been fully blind since age eight. His parents immigrated to the U.S. from Iran before he was born, and he is the first and only Iranian-American to hold statewide elected office in the United States.



Carol Willing - Moderator

Carol Willing serves as a Steering Council member for Project Jupyter. She received the 2017 ACM Software System Award for Jupyter's development. She is also a member of the inaugural Python Steering Council, a Python Software Foundation Fellow and former Director; a core developer on CPython, Jupyter, nteract, AnitaB.org’s open source projects, and PyLadies; a co-organizer of PyLadies San Diego and San Diego Python User Group; an independent developer of hardware and software. Weaving her love of art, music, and nature with wearable soft circuits, she is developing an open hardware project to assist an in-home caregiver with gentle, compassionate support of a loved one with Alzheimer’s.



James Gosling - Java

James A. Gosling, O.C., Ph.D. (born May 19, 1955, near Calgary, Alberta, Canada) is a famous software developer, best known as the father of the Java programming language.



In 1977, James Gosling received a B.Sc in Computer Science from the University of Calgary. In 1983, he earned a Ph.D. in Computer Science from Carnegie Mellon University, and his doctoral thesis was titled "The Algebraic Manipulation of Constraints". While working towards his doctorate, he wrote a version of emacs (gosmacs), and before joining Sun Microsystems he built a multi-processor version of Unix[1] while at Carnegie Mellon University, as well as several compilers and mail systems. Since 1984, Gosling has been with Sun Microsystems.



He is generally credited as the inventor of the Java programming language in 1991. He did the original design of Java and implemented its original compiler and virtual machine. For this achievement, he was elected to the United States National Academy of Engineering. He has also made major contributions to several other software systems, such as NeWS and Gosling Emacs. He also co-wrote the "bundle" program, a utility thoroughly detailed in Brian Kernighan and Rob Pike's book, "The Unix Programming Environment".



Anders Hejlsberg - Turbo Pascal, C#, TypeScript

Anders Hejlsberg is a Microsoft Technical Fellow and has been designing and implementing programming languages and development tools for over 35 years. Anders is the lead architect of the TypeScript open-source project and the original designer of the C# programming language. Before joining Microsoft in 1996, Anders was a Principal Engineer at Borland International. As one of the first employees of Borland, he was the original author of Turbo Pascal and later worked as the Chief Architect of the Delphi product line. Anders studied Engineering at the Technical University of Denmark.



Guido van Rossum - Python

Guido van Rossum is the creator of Python, one of the major programming languages on and off the web. Recently Guido retired as Benevolent Dictator For Life (“BDFL”) of Python, a title seemingly stolen from a Monty Python skit. Details of his decision were featured in an Economist article. Guido thankfully has joined the Python Steering Council. This five-person group will give guidance to the future roadmap of the Python programming language.



Van Rossum moved from the Netherlands to the USA, in 1995. He met his wife after his move. Until July 2003 they lived in the northern Virginia suburbs of Washington, DC with their son Orlijn, who was born in 2001. They then moved to Silicon Valley where Guido worked for a variety of companies including Google in the past and currently at Dropbox (spending 50% of his time on Python!).



Larry Wall - Perl

Larry Wall was educated at various places including the Cornish School of Music, the Seattle Youth Symphony, Seattle Pacific University, Multnomah School of the Bible, SIL International, U.C. Berkeley, and UCLA. Though trained primarily in music, chemistry, and linguistics, Larry has been working with computers for the last 40 years or so. He is most famous for writing rn, patch, and the Perl programming language, but prefers to think of himself as a cultural hacker whose vocation in life is to bring a bit of joy into the dreary existence of programmers. For various definitions of “work for”, Larry has worked for Seattle Pacific, MusiComedy Northwest, System Development Corporation, Burroughs, Unisys, the NSA, Telos, ConTel, GTE, JPL, NetLabs, Seagate, Tim O’Reilly, the Perl Foundation, Broadcom, and himself. He is currently serving as Artist in Residence for Craigslist.



About CSforAll


https://www.csforall.org/media-faq/




CSforALL, shorthand for “Computer Science for All,” is the central hub for the K-12 national computer science education movement. CSforALL is the community organizer of school districts, nonprofits, government agencies and corporations that share the goal of rigorous, inclusive and sustainable CS education in the U.S.



About PuPPy


https://www.pspython.com/app/




PuPPy is a fun and friendly user group dedicated to proliferating a diverse and talented Python community in the Puget Sound region. We are devoted to exploring Python-based programming knowledge, embracing new and experienced members from all walks of life, and helping those members to achieve their professional goals.





Event Leadership





Ruthe Farmer – Event Chair - Chief Evangelist for CSforALL

Carol Willing – Moderator -- Steering Council member and developer for Project Jupyter and Python

Lorena Mesa – Vice Chair -- GitHub Data Engineer - Software Intelligence Systems | PyLadies Chicago Organizer | Python Software Foundation Director

Eloisa Tran -- Fundraising Chair -- Founder of the Women in Data Science WiDS, Data Scientist for City of Bellevue






Posted by



Lorena Mesa




at

3/27/2019 10:00:00 AM







































Newer Post


Older Post

Home


















The mission of the Python Software Foundation is to promote, protect, and advance the Python programming language, and to support and facilitate the growth of a diverse and international community of Python programmers.













Python Software Foundation
Grants Program
Membership
Awards
Meeting Minutes














Tweets by @ThePSF
!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+"://platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");












Blog Archive








        ▼ 
      



2019

(11)





        ► 
      



April

(1)







        ▼ 
      



March

(2)

PuPPy Presents its 1st Annual Benefit featuring Gu...
Commencing Security, Accessibility, and Internatio...








        ► 
      



February

(5)







        ► 
      



January

(3)









        ► 
      



2018

(31)





        ► 
      



December

(5)







        ► 
      



November

(1)







        ► 
      



October

(4)







        ► 
      



September

(1)







        ► 
      



August

(2)







        ► 
      



July

(3)







        ► 
      



June

(3)







        ► 
      



May

(5)







        ► 
      



April

(2)







        ► 
      



March

(2)







        ► 
      



February

(1)







        ► 
      



January

(2)









        ► 
      



2017

(32)





        ► 
      



December

(3)







        ► 
      



November

(2)







        ► 
      



October

(4)







        ► 
      



September

(6)







        ► 
      



August

(2)







        ► 
      



July

(2)







        ► 
      



May

(2)







        ► 
      



April

(3)







        ► 
      



March

(2)







        ► 
      



February

(2)







        ► 
      



January

(4)









        ► 
      



2016

(27)





        ► 
      



December

(2)







        ► 
      



October

(2)







        ► 
      



August

(4)







        ► 
      



July

(1)







        ► 
      



June

(3)







        ► 
      



May

(6)







        ► 
      



April

(4)







        ► 
      



March

(2)







        ► 
      



January

(3)









        ► 
      



2015

(67)





        ► 
      



December

(2)







        ► 
      



November

(4)







        ► 
      



October

(4)







        ► 
      



September

(1)







        ► 
      



August

(2)







        ► 
      



July

(4)







        ► 
      



June

(6)







        ► 
      



May

(4)







        ► 
      



April

(13)







        ► 
      



March

(14)







        ► 
      



February

(9)







        ► 
      



January

(4)









        ► 
      



2014

(14)





        ► 
      



October

(1)







        ► 
      



September

(1)







        ► 
      



August

(2)







        ► 
      



July

(1)







        ► 
      



May

(1)







        ► 
      



April

(1)







        ► 
      



March

(2)







        ► 
      



February

(3)







        ► 
      



January

(2)









        ► 
      



2013

(18)





        ► 
      



November

(1)







        ► 
      



September

(2)







        ► 
      



August

(1)







        ► 
      



July

(1)







        ► 
      



June

(1)







        ► 
      



April

(1)







        ► 
      



March

(5)







        ► 
      



February

(3)







        ► 
      



January

(3)









        ► 
      



2012

(21)





        ► 
      



December

(3)







        ► 
      



November

(2)







        ► 
      



October

(2)







        ► 
      



September

(1)







        ► 
      



August

(1)







        ► 
      



July

(1)







        ► 
      



June

(2)







        ► 
      



May

(4)







        ► 
      



April

(1)







        ► 
      



March

(1)







        ► 
      



January

(3)









        ► 
      



2011

(55)





        ► 
      



December

(2)







        ► 
      



November

(1)







        ► 
      



October

(7)







        ► 
      



September

(5)







        ► 
      



August

(2)







        ► 
      



July

(1)







        ► 
      



June

(3)







        ► 
      



May

(8)







        ► 
      



April

(8)







        ► 
      



March

(13)







        ► 
      



February

(2)







        ► 
      



January

(3)









        ► 
      



2010

(35)





        ► 
      



December

(4)







        ► 
      



November

(1)







        ► 
      



October

(3)







        ► 
      



September

(2)







        ► 
      



August

(1)







        ► 
      



July

(8)







        ► 
      



June

(6)







        ► 
      



May

(2)







        ► 
      



April

(4)







        ► 
      



March

(2)







        ► 
      



January

(2)









        ► 
      



2009

(21)





        ► 
      



December

(1)







        ► 
      



October

(1)







        ► 
      



September

(6)







        ► 
      



August

(4)







        ► 
      



July

(4)







        ► 
      



June

(1)







        ► 
      



May

(2)







        ► 
      



April

(1)







        ► 
      



February

(1)









        ► 
      



2008

(23)





        ► 
      



December

(1)







        ► 
      



November

(1)







        ► 
      



October

(1)







        ► 
      



August

(3)







        ► 
      



July

(1)







        ► 
      



May

(3)







        ► 
      



April

(1)







        ► 
      



March

(5)







        ► 
      



February

(4)







        ► 
      



January

(3)









        ► 
      



2007

(26)





        ► 
      



December

(3)







        ► 
      



November

(2)







        ► 
      



October

(6)







        ► 
      



September

(1)







        ► 
      



August

(1)







        ► 
      



July

(1)







        ► 
      



June

(2)







        ► 
      



May

(1)







        ► 
      



April

(1)







        ► 
      



March

(2)







        ► 
      



February

(3)







        ► 
      



January

(3)









        ► 
      



2006

(39)





        ► 
      



December

(3)







        ► 
      



November

(4)







        ► 
      



October

(5)







        ► 
      



September

(4)







        ► 
      



August

(4)







        ► 
      



July

(3)







        ► 
      



May

(7)







        ► 
      



April

(6)







        ► 
      



March

(3)






































































Simple theme. Powered by Blogger.





























    window.setTimeout(function() {
        document.body.className = document.body.className.replace('loading', '');
      }, 10);
  


window['__wavt'] = 'AOuZoY76G-WicZRk7bRzdGnr8GjRX6ri_w:1555314795887';_WidgetManager._Init('//www.blogger.com/rearrange?blogID\x3d8520','//pyfound.blogspot.com/2019/03/puppy-presents-its-1st-annual-benefit_27.html','8520');
_WidgetManager._SetDataContext([{'name': 'blog', 'data': {'blogId': '8520', 'title': '\x3ca href\x3d\x22http://python.org/psf/\x22\x3ePython Software Foundation\x3c/a\x3e News', 'url': 'http://pyfound.blogspot.com/2019/03/puppy-presents-its-1st-annual-benefit_27.html', 'canonicalUrl': 'http://pyfound.blogspot.com/2019/03/puppy-presents-its-1st-annual-benefit_27.html', 'homepageUrl': 'http://pyfound.blogspot.com/', 'searchUrl': 'http://pyfound.blogspot.com/search', 'canonicalHomepageUrl': 'http://pyfound.blogspot.com/', 'blogspotFaviconUrl': 'http://pyfound.blogspot.com/favicon.ico', 'bloggerUrl': 'https://www.blogger.com', 'hasCustomDomain': false, 'httpsEnabled': true, 'enabledCommentProfileImages': true, 'gPlusViewType': 'FILTERED_POSTMOD', 'adultContent': false, 'analyticsAccountNumber': '', 'encoding': 'UTF-8', 'locale': 'en', 'localeUnderscoreDelimited': 'en', 'languageDirection': 'ltr', 'isPrivate': false, 'isMobile': false, 'isMobileRequest': false, 'mobileClass': '', 'isPrivateBlog': false, 'feedLinks': '\x3clink rel\x3d\x22alternate\x22 type\x3d\x22application/atom+xml\x22 title\x3d\x22Python Software Foundation News - Atom\x22 href\x3d\x22http://pyfound.blogspot.com/feeds/posts/default\x22 /\x3e\n\x3clink rel\x3d\x22alternate\x22 type\x3d\x22application/rss+xml\x22 title\x3d\x22Python Software Foundation News - RSS\x22 href\x3d\x22http://pyfound.blogspot.com/feeds/posts/default?alt\x3drss\x22 /\x3e\n\x3clink rel\x3d\x22service.post\x22 type\x3d\x22application/atom+xml\x22 title\x3d\x22Python Software Foundation News - Atom\x22 href\x3d\x22https://www.blogger.com/feeds/8520/posts/default\x22 /\x3e\n\n\x3clink rel\x3d\x22alternate\x22 type\x3d\x22application/atom+xml\x22 title\x3d\x22Python Software Foundation News - Atom\x22 href\x3d\x22http://pyfound.blogspot.com/feeds/2562968958598269587/comments/default\x22 /\x3e\n', 'meTag': '', 'adsenseHostId': 'ca-host-pub-1556223355139109', 'adsenseHasAds': false, 'ieCssRetrofitLinks': '\x3c!--[if IE]\x3e\x3cscript type\x3d\x22text/javascript\x22 src\x3d\x22https://www.blogger.com/static/v1/jsbin/1953397912-ieretrofit.js\x22\x3e\x3c/script\x3e\n\x3c![endif]--\x3e', 'view': '', 'dynamicViewsCommentsSrc': '//www.blogblog.com/dynamicviews/4224c15c4e7c9321/js/comments.js', 'dynamicViewsScriptSrc': '//www.blogblog.com/dynamicviews/5d3f379b4eb56506', 'plusOneApiSrc': 'https://apis.google.com/js/plusone.js', 'disableGComments': true, 'sharing': {'platforms': [{'name': 'Get link', 'key': 'link', 'shareMessage': 'Get link', 'target': ''}, {'name': 'Facebook', 'key': 'facebook', 'shareMessage': 'Share to Facebook', 'target': 'facebook'}, {'name': 'BlogThis!', 'key': 'blogThis', 'shareMessage': 'BlogThis!', 'target': 'blog'}, {'name': 'Twitter', 'key': 'twitter', 'shareMessage': 'Share to Twitter', 'target': 'twitter'}, {'name': 'Pinterest', 'key': 'pinterest', 'shareMessage': 'Share to Pinterest', 'target': 'pinterest'}, {'name': 'Email', 'key': 'email', 'shareMessage': 'Email', 'target': 'email'}], 'disableGooglePlus': true, 'googlePlusShareButtonWidth': 300, 'googlePlusBootstrap': '\x3cscript type\x3d\x22text/javascript\x22\x3ewindow.___gcfg \x3d {\x27lang\x27: \x27en\x27};\x3c/script\x3e'}, 'hasCustomJumpLinkMessage': false, 'jumpLinkMessage': 'Read more', 'pageType': 'item', 'postId': '2562968958598269587', 'postImageThumbnailUrl': 'https://4.bp.blogspot.com/-e6zsWUTw48o/XJqabIoCPRI/AAAAAAAAilE/bfFlqmu8NzIQi4r8M__xFqEWJgzxWYCWwCLcBGAs/s72-c/CSforALL-logo.png', 'postImageUrl': 'https://4.bp.blogspot.com/-e6zsWUTw48o/XJqabIoCPRI/AAAAAAAAilE/bfFlqmu8NzIQi4r8M__xFqEWJgzxWYCWwCLcBGAs/s320/CSforALL-logo.png', 'pageName': 'PuPPy Presents its 1st Annual Benefit featuring Guido van Rossum', 'pageTitle': 'Python Software Foundation News: PuPPy Presents its 1st Annual Benefit featuring Guido van Rossum'}}, {'name': 'features', 'data': {'sharing_get_link_dialog': 'true', 'sharing_native': 'false'}}, {'name': 'messages', 'data': {'edit': 'Edit', 'linkCopiedToClipboard': 'Link copied to clipboard!', 'ok': 'Ok', 'postLink': 'Post Link'}}, {'name': 'template', 'data': {'name': 'Simple', 'localizedName': 'Simple', 'isResponsive': false, 'isAlternateRendering': false, 'isCustom': false, 'variant': 'simplysimple', 'variantId': 'simplysimple'}}, {'name': 'view', 'data': {'classic': {'name': 'classic', 'url': '?view\x3dclassic'}, 'flipcard': {'name': 'flipcard', 'url': '?view\x3dflipcard'}, 'magazine': {'name': 'magazine', 'url': '?view\x3dmagazine'}, 'mosaic': {'name': 'mosaic', 'url': '?view\x3dmosaic'}, 'sidebar': {'name': 'sidebar', 'url': '?view\x3dsidebar'}, 'snapshot': {'name': 'snapshot', 'url': '?view\x3dsnapshot'}, 'timeslide': {'name': 'timeslide', 'url': '?view\x3dtimeslide'}, 'isMobile': false, 'title': 'PuPPy Presents its 1st Annual Benefit featuring Guido van Rossum', 'description': '           PuPPy Presents its 1st Annual Benefit     A historic discussion of programming language creators about   the past and future of l...', 'featuredImage': 'https://4.bp.blogspot.com/-e6zsWUTw48o/XJqabIoCPRI/AAAAAAAAilE/bfFlqmu8NzIQi4r8M__xFqEWJgzxWYCWwCLcBGAs/s320/CSforALL-logo.png', 'url': 'http://pyfound.blogspot.com/2019/03/puppy-presents-its-1st-annual-benefit_27.html', 'type': 'item', 'isSingleItem': true, 'isMultipleItems': false, 'isError': false, 'isPage': false, 'isPost': true, 'isHomepage': false, 'isArchive': false, 'isLabelSearch': false, 'postId': 2562968958598269587}}]);
_WidgetManager._RegisterWidget('_NavbarView', new _WidgetInfo('Navbar1', 'navbar', document.getElementById('Navbar1'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_HeaderView', new _WidgetInfo('Header1', 'header', document.getElementById('Header1'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_BlogView', new _WidgetInfo('Blog1', 'main', document.getElementById('Blog1'), {'cmtInteractionsEnabled': false, 'lightboxEnabled': true, 'lightboxModuleUrl': 'https://www.blogger.com/static/v1/jsbin/696337176-lbx.js', 'lightboxCssUrl': 'https://www.blogger.com/static/v1/v-css/368954415-lightbox_bundle.css'}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_TextView', new _WidgetInfo('Text1', 'sidebar-right-1', document.getElementById('Text1'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_LinkListView', new _WidgetInfo('LinkList1', 'sidebar-right-1', document.getElementById('LinkList1'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_HTMLView', new _WidgetInfo('HTML1', 'sidebar-right-1', document.getElementById('HTML1'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_BlogArchiveView', new _WidgetInfo('BlogArchive1', 'sidebar-right-1', document.getElementById('BlogArchive1'), {'languageDirection': 'ltr', 'loadingMessage': 'Loading\x26hellip;'}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_AttributionView', new _WidgetInfo('Attribution1', 'footer-3', document.getElementById('Attribution1'), {}, 'displayModeFull'));




    function setAttributeOnload(object, attribute, val) {
      if(window.addEventListener) {
        window.addEventListener('load',
          function(){ object[attribute] = val; }, false);
      } else {
        window.attachEvent('onload', function(){ object[attribute] = val; });
      }
    }
  



      gapi.load("gapi.iframes:gapi.iframes.style.bubble", function() {
        if (gapi.iframes && gapi.iframes.getContext) {
          gapi.iframes.getContext().openChild({
              url: 'https://www.blogger.com/navbar.g?targetBlogID\x3d3941553907430899163\x26blogName\x3dPython+Insider\x26publishMode\x3dPUBLISH_MODE_BLOGSPOT\x26navbarType\x3dBLUE\x26layoutType\x3dLAYOUTS\x26searchRoot\x3dhttps://pythoninsider.blogspot.com/search\x26blogLocale\x3den\x26v\x3d2\x26homepageUrl\x3dhttps://pythoninsider.blogspot.com/\x26targetPostID\x3d8131686730619075207\x26blogPostOrPageUrl\x3dhttps://pythoninsider.blogspot.com/2019/03/go-get-it-here-httpswww.html\x26vt\x3d3491241835158008316',
              where: document.getElementById("navbar-iframe-container"),
              id: "navbar-iframe"
          });
        }
      });
    
(function() {
var script = document.createElement('script');
script.type = 'text/javascript';
script.src = '//pagead2.googlesyndication.com/pagead/js/google_top_exp.js';
var head = document.getElementsByTagName('head')[0];
if (head) {
head.appendChild(script);
}})();










Python core development news and information.









Tuesday, March 26, 2019





Python 3.8.0a3 is now available for testing





Go get it here:https://www.python.org/downloads/release/python-380a3/The most visible change so far is probably the implementation of PEP 572: Assignment Expressions.  For a detailed list of changes, see:https://docs.python.org/3.8/whatsnew/changelog.htmlPython 3.8.0a3 is the third of four planned alpha releases of Python 3.8, the next feature release of Python.  During the alpha phase, Python 3.8
 remains under heavy development: additional features will be added and 
existing features may be modified or deleted.  Please keep in mind that 
this is a preview release and its use is not recommended for production 
environments.  The last alpha release, Python 3.8.0a4, is planned for 2019-04-29.Thanks
 to all of the many volunteers who help make Python development and 
these releases possible!  Please consider supporting our efforts by 
volunteering yourself or through organization contributions to the Python Software Foundation. 




Posted by
ambv


at
5:18 AM






Email ThisBlogThis!Share to TwitterShare to FacebookShare to Pinterest






















Older Post

Home






                var disqus_shortname = 'pythoninsider';
                var disqus_blogger_current_url = "https://pythoninsider.blogspot.com/2019/03/go-get-it-here-httpswww.html";
                if (!disqus_blogger_current_url.length) {
                    disqus_blogger_current_url = "https://pythoninsider.blogspot.com/2019/03/go-get-it-here-httpswww.html";
                }
                var disqus_blogger_homepage_url = "https://pythoninsider.blogspot.com/";
                var disqus_blogger_canonical_homepage_url = "https://pythoninsider.blogspot.com/";
            

                    #comments {display:none;}
                

                    (function() {
                        var bloggerjs = document.createElement('script');
                        bloggerjs.type = 'text/javascript';
                        bloggerjs.async = true;
                        bloggerjs.src = 'http://'+disqus_shortname+'.disqus.com/blogger_item.js';
                        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(bloggerjs);
                    })();
                

                    .post-comment-link { visibility: hidden; }
                

                (function() {
                    var bloggerjs = document.createElement('script');
                    bloggerjs.type = 'text/javascript';
                    bloggerjs.async = true;
                    bloggerjs.src = 'http://'+disqus_shortname+'.disqus.com/blogger_index.js';
                    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(bloggerjs);
                })();
                






Subscribe

Subscribe to Python Insider via RSS, Email, or Twitter











Related Links


python.org
Python-Dev mailing list
Python Developer's Guide












Translations


Chinese (Simplified)
Chinese (Traditional)
French
German
Japanese
Korean
Portuguese
Romanian
Russian
Spanish












Python-Dev Blogs









Eli Bendersky




SQL inner and outer joins



6 days ago











PyPy Status Blog




An RPython JIT for LPegs



1 week ago











Pumpichank




Creating Python Snaps



4 years ago











Tim Golden




London Python Dojo December 2014



4 years ago











R. David Murray




Asyncio Implementation Overview



4 years ago











The Voidspace Techie Blog




unittest.mock and mock 1.0 alpha 1



7 years ago











Tarek Ziadé




More privacy please



7 years ago











Deep Thoughts by Raymond Hettinger




Python’s super() considered super!



7 years ago











Brett Cannon


















Jesse Noller


















Boredom & Laziness


















Brian Curtin


















Senthil Kumaran

























Blog Archive








        ▼ 
      



2019

(10)





        ▼ 
      



March

(7)

Python 3.8.0a3 is now available for testing
Python 3.7.3 is now available
Python 3.4.10 is now available
Python 3.5.7 is now available
Python 3.7.3rc1 is now available for testing
Python 3.5.7rc1 and Python 3.4.10rc1 are now avail...
Python 2.7.16 released








        ► 
      



February

(3)









        ► 
      



2018

(24)





        ► 
      



December

(2)







        ► 
      



October

(2)







        ► 
      



September

(1)







        ► 
      



August

(1)







        ► 
      



June

(2)







        ► 
      



May

(3)







        ► 
      



April

(3)







        ► 
      



March

(5)







        ► 
      



February

(2)







        ► 
      



January

(3)









        ► 
      



2017

(17)





        ► 
      



December

(2)







        ► 
      



October

(2)







        ► 
      



September

(3)







        ► 
      



August

(2)







        ► 
      



July

(3)







        ► 
      



June

(1)







        ► 
      



March

(2)







        ► 
      



January

(2)









        ► 
      



2016

(18)





        ► 
      



December

(5)







        ► 
      



November

(1)







        ► 
      



October

(2)







        ► 
      



September

(2)







        ► 
      



August

(1)







        ► 
      



July

(1)







        ► 
      



June

(5)







        ► 
      



May

(1)









        ► 
      



2015

(14)





        ► 
      



December

(2)







        ► 
      



November

(1)







        ► 
      



September

(3)







        ► 
      



August

(1)







        ► 
      



July

(1)







        ► 
      



June

(1)







        ► 
      



May

(2)







        ► 
      



March

(2)







        ► 
      



January

(1)









        ► 
      



2014

(8)





        ► 
      



December

(1)







        ► 
      



November

(1)







        ► 
      



May

(1)







        ► 
      



March

(3)







        ► 
      



February

(2)









        ► 
      



2013

(5)





        ► 
      



November

(2)







        ► 
      



October

(1)







        ► 
      



March

(1)







        ► 
      



February

(1)









        ► 
      



2012

(9)





        ► 
      



December

(1)







        ► 
      



November

(1)







        ► 
      



October

(2)







        ► 
      



August

(1)







        ► 
      



June

(2)







        ► 
      



May

(1)







        ► 
      



March

(1)









        ► 
      



2011

(25)





        ► 
      



August

(2)







        ► 
      



July

(3)







        ► 
      



June

(1)







        ► 
      



May

(7)







        ► 
      



April

(7)







        ► 
      



March

(5)

















Contributors


A.M. Kuchling
Anthony Scopatz
Antoine P.
Benjamin
Brian Curtin
Davidmh
Donald Stufft
Doug Hellmann
Ernest W. Durbin III
Ezio Melotti
Georg Brandl
Jesse
Kelsey Hightower
Larry Hastings
Mathieu Leduc-Hamel
Michael Markert
Mike Driscoll
Ned Deily
Paul Moore
Philip Jenvey
Unknown
Unknown
Unknown
Unknown
ambv
haypo
tp
Éric Araujo












Copyright

Python Insider by the Python Core Developers is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.Based on a work at blog.python.org.














Powered by Blogger.














 




window['__wavt'] = 'AOuZoY4zH3gycccLMwqKkd47gAdGSYWtzQ:1555346508348';_WidgetManager._Init('//www.blogger.com/rearrange?blogID\x3d3941553907430899163','//pythoninsider.blogspot.com/2019/03/go-get-it-here-httpswww.html','3941553907430899163');
_WidgetManager._SetDataContext([{'name': 'blog', 'data': {'blogId': '3941553907430899163', 'title': 'Python Insider', 'url': 'https://pythoninsider.blogspot.com/2019/03/go-get-it-here-httpswww.html', 'canonicalUrl': 'https://pythoninsider.blogspot.com/2019/03/go-get-it-here-httpswww.html', 'homepageUrl': 'https://pythoninsider.blogspot.com/', 'searchUrl': 'https://pythoninsider.blogspot.com/search', 'canonicalHomepageUrl': 'https://pythoninsider.blogspot.com/', 'blogspotFaviconUrl': 'https://pythoninsider.blogspot.com/favicon.ico', 'bloggerUrl': 'https://www.blogger.com', 'hasCustomDomain': false, 'httpsEnabled': true, 'enabledCommentProfileImages': true, 'gPlusViewType': 'FILTERED_POSTMOD', 'adultContent': false, 'analyticsAccountNumber': '', 'encoding': 'UTF-8', 'locale': 'en', 'localeUnderscoreDelimited': 'en', 'languageDirection': 'ltr', 'isPrivate': false, 'isMobile': false, 'isMobileRequest': false, 'mobileClass': '', 'isPrivateBlog': false, 'feedLinks': '\x3clink rel\x3d\x22alternate\x22 type\x3d\x22application/atom+xml\x22 title\x3d\x22Python Insider - Atom\x22 href\x3d\x22https://pythoninsider.blogspot.com/feeds/posts/default\x22 /\x3e\n\x3clink rel\x3d\x22alternate\x22 type\x3d\x22application/rss+xml\x22 title\x3d\x22Python Insider - RSS\x22 href\x3d\x22https://pythoninsider.blogspot.com/feeds/posts/default?alt\x3drss\x22 /\x3e\n\x3clink rel\x3d\x22service.post\x22 type\x3d\x22application/atom+xml\x22 title\x3d\x22Python Insider - Atom\x22 href\x3d\x22https://www.blogger.com/feeds/3941553907430899163/posts/default\x22 /\x3e\n\n\x3clink rel\x3d\x22alternate\x22 type\x3d\x22application/atom+xml\x22 title\x3d\x22Python Insider - Atom\x22 href\x3d\x22https://pythoninsider.blogspot.com/feeds/8131686730619075207/comments/default\x22 /\x3e\n', 'meTag': '', 'adsenseHostId': 'ca-host-pub-1556223355139109', 'adsenseHasAds': false, 'ieCssRetrofitLinks': '\x3c!--[if IE]\x3e\x3cscript type\x3d\x22text/javascript\x22 src\x3d\x22https://www.blogger.com/static/v1/jsbin/1953397912-ieretrofit.js\x22\x3e\x3c/script\x3e\n\x3c![endif]--\x3e', 'view': '', 'dynamicViewsCommentsSrc': '//www.blogblog.com/dynamicviews/4224c15c4e7c9321/js/comments.js', 'dynamicViewsScriptSrc': '//www.blogblog.com/dynamicviews/5d3f379b4eb56506', 'plusOneApiSrc': 'https://apis.google.com/js/plusone.js', 'disableGComments': true, 'sharing': {'platforms': [{'name': 'Get link', 'key': 'link', 'shareMessage': 'Get link', 'target': ''}, {'name': 'Facebook', 'key': 'facebook', 'shareMessage': 'Share to Facebook', 'target': 'facebook'}, {'name': 'BlogThis!', 'key': 'blogThis', 'shareMessage': 'BlogThis!', 'target': 'blog'}, {'name': 'Twitter', 'key': 'twitter', 'shareMessage': 'Share to Twitter', 'target': 'twitter'}, {'name': 'Pinterest', 'key': 'pinterest', 'shareMessage': 'Share to Pinterest', 'target': 'pinterest'}, {'name': 'Email', 'key': 'email', 'shareMessage': 'Email', 'target': 'email'}], 'disableGooglePlus': true, 'googlePlusShareButtonWidth': 300, 'googlePlusBootstrap': '\x3cscript type\x3d\x22text/javascript\x22\x3ewindow.___gcfg \x3d {\x27lang\x27: \x27en\x27};\x3c/script\x3e'}, 'hasCustomJumpLinkMessage': false, 'jumpLinkMessage': 'Read more', 'pageType': 'item', 'postId': '8131686730619075207', 'pageName': 'Python 3.8.0a3 is now available for testing', 'pageTitle': 'Python Insider: Python 3.8.0a3 is now available for testing'}}, {'name': 'features', 'data': {'sharing_get_link_dialog': 'true', 'sharing_native': 'false'}}, {'name': 'messages', 'data': {'edit': 'Edit', 'linkCopiedToClipboard': 'Link copied to clipboard!', 'ok': 'Ok', 'postLink': 'Post Link'}}, {'name': 'template', 'data': {'name': 'custom', 'localizedName': 'Custom', 'isResponsive': false, 'isAlternateRendering': false, 'isCustom': true}}, {'name': 'view', 'data': {'classic': {'name': 'classic', 'url': '?view\x3dclassic'}, 'flipcard': {'name': 'flipcard', 'url': '?view\x3dflipcard'}, 'magazine': {'name': 'magazine', 'url': '?view\x3dmagazine'}, 'mosaic': {'name': 'mosaic', 'url': '?view\x3dmosaic'}, 'sidebar': {'name': 'sidebar', 'url': '?view\x3dsidebar'}, 'snapshot': {'name': 'snapshot', 'url': '?view\x3dsnapshot'}, 'timeslide': {'name': 'timeslide', 'url': '?view\x3dtimeslide'}, 'isMobile': false, 'title': 'Python 3.8.0a3 is now available for testing', 'description': 'Go get it here: https://www.python.org/downloads/release/python-380a3/ The most visible change so far is probably the implementation of PEP ...', 'url': 'https://pythoninsider.blogspot.com/2019/03/go-get-it-here-httpswww.html', 'type': 'item', 'isSingleItem': true, 'isMultipleItems': false, 'isError': false, 'isPage': false, 'isPost': true, 'isHomepage': false, 'isArchive': false, 'isLabelSearch': false, 'postId': 8131686730619075207}}]);
_WidgetManager._RegisterWidget('_NavbarView', new _WidgetInfo('Navbar1', 'navbar', document.getElementById('Navbar1'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_HeaderView', new _WidgetInfo('Header1', 'header', document.getElementById('Header1'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_BlogView', new _WidgetInfo('Blog1', 'main', document.getElementById('Blog1'), {'cmtInteractionsEnabled': false, 'lightboxEnabled': true, 'lightboxModuleUrl': 'https://www.blogger.com/static/v1/jsbin/696337176-lbx.js', 'lightboxCssUrl': 'https://www.blogger.com/static/v1/v-css/368954415-lightbox_bundle.css'}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_HTMLView', new _WidgetInfo('HTML2', 'main', document.getElementById('HTML2'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_HTMLView', new _WidgetInfo('HTML1', 'sidebar-right-1', document.getElementById('HTML1'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_LinkListView', new _WidgetInfo('LinkList1', 'sidebar-right-1', document.getElementById('LinkList1'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_LinkListView', new _WidgetInfo('LinkList2', 'sidebar-right-1', document.getElementById('LinkList2'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_BlogListView', new _WidgetInfo('BlogList1', 'sidebar-right-1', document.getElementById('BlogList1'), {'numItemsToShow': 0, 'totalItems': 13}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_BlogArchiveView', new _WidgetInfo('BlogArchive1', 'sidebar-right-1', document.getElementById('BlogArchive1'), {'languageDirection': 'ltr', 'loadingMessage': 'Loading\x26hellip;'}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_ProfileView', new _WidgetInfo('Profile1', 'sidebar-right-1', document.getElementById('Profile1'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_HTMLView', new _WidgetInfo('HTML3', 'sidebar-right-1', document.getElementById('HTML3'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_AttributionView', new _WidgetInfo('Attribution1', 'attribution', document.getElementById('Attribution1'), {}, 'displayModeFull'));




    function setAttributeOnload(object, attribute, val) {
      if(window.addEventListener) {
        window.addEventListener('load',
          function(){ object[attribute] = val; }, false);
      } else {
        window.attachEvent('onload', function(){ object[attribute] = val; });
      }
    }
  



      gapi.load("gapi.iframes:gapi.iframes.style.bubble", function() {
        if (gapi.iframes && gapi.iframes.getContext) {
          gapi.iframes.getContext().openChild({
              url: 'https://www.blogger.com/navbar.g?targetBlogID\x3d3941553907430899163\x26blogName\x3dPython+Insider\x26publishMode\x3dPUBLISH_MODE_BLOGSPOT\x26navbarType\x3dBLUE\x26layoutType\x3dLAYOUTS\x26searchRoot\x3dhttps://pythoninsider.blogspot.com/search\x26blogLocale\x3den\x26v\x3d2\x26homepageUrl\x3dhttps://pythoninsider.blogspot.com/\x26targetPostID\x3d8131686730619075207\x26blogPostOrPageUrl\x3dhttps://pythoninsider.blogspot.com/2019/03/go-get-it-here-httpswww.html\x26vt\x3d3491241835158008316',
              where: document.getElementById("navbar-iframe-container"),
              id: "navbar-iframe"
          });
        }
      });
    
(function() {
var script = document.createElement('script');
script.type = 'text/javascript';
script.src = '//pagead2.googlesyndication.com/pagead/js/google_top_exp.js';
var head = document.getElementsByTagName('head')[0];
if (head) {
head.appendChild(script);
}})();










Python core development news and information.









Tuesday, March 26, 2019





Python 3.8.0a3 is now available for testing





Go get it here:https://www.python.org/downloads/release/python-380a3/The most visible change so far is probably the implementation of PEP 572: Assignment Expressions.  For a detailed list of changes, see:https://docs.python.org/3.8/whatsnew/changelog.htmlPython 3.8.0a3 is the third of four planned alpha releases of Python 3.8, the next feature release of Python.  During the alpha phase, Python 3.8
 remains under heavy development: additional features will be added and 
existing features may be modified or deleted.  Please keep in mind that 
this is a preview release and its use is not recommended for production 
environments.  The last alpha release, Python 3.8.0a4, is planned for 2019-04-29.Thanks
 to all of the many volunteers who help make Python development and 
these releases possible!  Please consider supporting our efforts by 
volunteering yourself or through organization contributions to the Python Software Foundation. 




Posted by
ambv


at
5:18 AM






Email ThisBlogThis!Share to TwitterShare to FacebookShare to Pinterest






















Older Post

Home






                var disqus_shortname = 'pythoninsider';
                var disqus_blogger_current_url = "https://pythoninsider.blogspot.com/2019/03/go-get-it-here-httpswww.html";
                if (!disqus_blogger_current_url.length) {
                    disqus_blogger_current_url = "https://pythoninsider.blogspot.com/2019/03/go-get-it-here-httpswww.html";
                }
                var disqus_blogger_homepage_url = "https://pythoninsider.blogspot.com/";
                var disqus_blogger_canonical_homepage_url = "https://pythoninsider.blogspot.com/";
            

                    #comments {display:none;}
                

                    (function() {
                        var bloggerjs = document.createElement('script');
                        bloggerjs.type = 'text/javascript';
                        bloggerjs.async = true;
                        bloggerjs.src = 'http://'+disqus_shortname+'.disqus.com/blogger_item.js';
                        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(bloggerjs);
                    })();
                

                    .post-comment-link { visibility: hidden; }
                

                (function() {
                    var bloggerjs = document.createElement('script');
                    bloggerjs.type = 'text/javascript';
                    bloggerjs.async = true;
                    bloggerjs.src = 'http://'+disqus_shortname+'.disqus.com/blogger_index.js';
                    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(bloggerjs);
                })();
                






Subscribe

Subscribe to Python Insider via RSS, Email, or Twitter











Related Links


python.org
Python-Dev mailing list
Python Developer's Guide












Translations


Chinese (Simplified)
Chinese (Traditional)
French
German
Japanese
Korean
Portuguese
Romanian
Russian
Spanish












Python-Dev Blogs









Eli Bendersky




SQL inner and outer joins



6 days ago











PyPy Status Blog




An RPython JIT for LPegs



1 week ago











Pumpichank




Creating Python Snaps



4 years ago











Tim Golden




London Python Dojo December 2014



4 years ago











R. David Murray




Asyncio Implementation Overview



4 years ago











The Voidspace Techie Blog




unittest.mock and mock 1.0 alpha 1



7 years ago











Tarek Ziadé




More privacy please



7 years ago











Deep Thoughts by Raymond Hettinger




Python’s super() considered super!



7 years ago











Brett Cannon


















Jesse Noller


















Boredom & Laziness


















Brian Curtin


















Senthil Kumaran

























Blog Archive








        ▼ 
      



2019

(10)





        ▼ 
      



March

(7)

Python 3.8.0a3 is now available for testing
Python 3.7.3 is now available
Python 3.4.10 is now available
Python 3.5.7 is now available
Python 3.7.3rc1 is now available for testing
Python 3.5.7rc1 and Python 3.4.10rc1 are now avail...
Python 2.7.16 released








        ► 
      



February

(3)









        ► 
      



2018

(24)





        ► 
      



December

(2)







        ► 
      



October

(2)







        ► 
      



September

(1)







        ► 
      



August

(1)







        ► 
      



June

(2)







        ► 
      



May

(3)







        ► 
      



April

(3)







        ► 
      



March

(5)







        ► 
      



February

(2)







        ► 
      



January

(3)









        ► 
      



2017

(17)





        ► 
      



December

(2)







        ► 
      



October

(2)







        ► 
      



September

(3)







        ► 
      



August

(2)







        ► 
      



July

(3)







        ► 
      



June

(1)







        ► 
      



March

(2)







        ► 
      



January

(2)









        ► 
      



2016

(18)





        ► 
      



December

(5)







        ► 
      



November

(1)







        ► 
      



October

(2)







        ► 
      



September

(2)







        ► 
      



August

(1)







        ► 
      



July

(1)







        ► 
      



June

(5)







        ► 
      



May

(1)









        ► 
      



2015

(14)





        ► 
      



December

(2)







        ► 
      



November

(1)







        ► 
      



September

(3)







        ► 
      



August

(1)







        ► 
      



July

(1)







        ► 
      



June

(1)







        ► 
      



May

(2)







        ► 
      



March

(2)







        ► 
      



January

(1)









        ► 
      



2014

(8)





        ► 
      



December

(1)







        ► 
      



November

(1)







        ► 
      



May

(1)







        ► 
      



March

(3)







        ► 
      



February

(2)









        ► 
      



2013

(5)





        ► 
      



November

(2)







        ► 
      



October

(1)







        ► 
      



March

(1)







        ► 
      



February

(1)









        ► 
      



2012

(9)





        ► 
      



December

(1)







        ► 
      



November

(1)







        ► 
      



October

(2)







        ► 
      



August

(1)







        ► 
      



June

(2)







        ► 
      



May

(1)







        ► 
      



March

(1)









        ► 
      



2011

(25)





        ► 
      



August

(2)







        ► 
      



July

(3)







        ► 
      



June

(1)







        ► 
      



May

(7)







        ► 
      



April

(7)







        ► 
      



March

(5)

















Contributors


A.M. Kuchling
Anthony Scopatz
Antoine P.
Benjamin
Brian Curtin
Davidmh
Donald Stufft
Doug Hellmann
Ernest W. Durbin III
Ezio Melotti
Georg Brandl
Jesse
Kelsey Hightower
Larry Hastings
Mathieu Leduc-Hamel
Michael Markert
Mike Driscoll
Ned Deily
Paul Moore
Philip Jenvey
Unknown
Unknown
Unknown
Unknown
ambv
haypo
tp
Éric Araujo












Copyright

Python Insider by the Python Core Developers is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.Based on a work at blog.python.org.














Powered by Blogger.














 




window['__wavt'] = 'AOuZoY4zH3gycccLMwqKkd47gAdGSYWtzQ:1555346508348';_WidgetManager._Init('//www.blogger.com/rearrange?blogID\x3d3941553907430899163','//pythoninsider.blogspot.com/2019/03/go-get-it-here-httpswww.html','3941553907430899163');
_WidgetManager._SetDataContext([{'name': 'blog', 'data': {'blogId': '3941553907430899163', 'title': 'Python Insider', 'url': 'https://pythoninsider.blogspot.com/2019/03/go-get-it-here-httpswww.html', 'canonicalUrl': 'https://pythoninsider.blogspot.com/2019/03/go-get-it-here-httpswww.html', 'homepageUrl': 'https://pythoninsider.blogspot.com/', 'searchUrl': 'https://pythoninsider.blogspot.com/search', 'canonicalHomepageUrl': 'https://pythoninsider.blogspot.com/', 'blogspotFaviconUrl': 'https://pythoninsider.blogspot.com/favicon.ico', 'bloggerUrl': 'https://www.blogger.com', 'hasCustomDomain': false, 'httpsEnabled': true, 'enabledCommentProfileImages': true, 'gPlusViewType': 'FILTERED_POSTMOD', 'adultContent': false, 'analyticsAccountNumber': '', 'encoding': 'UTF-8', 'locale': 'en', 'localeUnderscoreDelimited': 'en', 'languageDirection': 'ltr', 'isPrivate': false, 'isMobile': false, 'isMobileRequest': false, 'mobileClass': '', 'isPrivateBlog': false, 'feedLinks': '\x3clink rel\x3d\x22alternate\x22 type\x3d\x22application/atom+xml\x22 title\x3d\x22Python Insider - Atom\x22 href\x3d\x22https://pythoninsider.blogspot.com/feeds/posts/default\x22 /\x3e\n\x3clink rel\x3d\x22alternate\x22 type\x3d\x22application/rss+xml\x22 title\x3d\x22Python Insider - RSS\x22 href\x3d\x22https://pythoninsider.blogspot.com/feeds/posts/default?alt\x3drss\x22 /\x3e\n\x3clink rel\x3d\x22service.post\x22 type\x3d\x22application/atom+xml\x22 title\x3d\x22Python Insider - Atom\x22 href\x3d\x22https://www.blogger.com/feeds/3941553907430899163/posts/default\x22 /\x3e\n\n\x3clink rel\x3d\x22alternate\x22 type\x3d\x22application/atom+xml\x22 title\x3d\x22Python Insider - Atom\x22 href\x3d\x22https://pythoninsider.blogspot.com/feeds/8131686730619075207/comments/default\x22 /\x3e\n', 'meTag': '', 'adsenseHostId': 'ca-host-pub-1556223355139109', 'adsenseHasAds': false, 'ieCssRetrofitLinks': '\x3c!--[if IE]\x3e\x3cscript type\x3d\x22text/javascript\x22 src\x3d\x22https://www.blogger.com/static/v1/jsbin/1953397912-ieretrofit.js\x22\x3e\x3c/script\x3e\n\x3c![endif]--\x3e', 'view': '', 'dynamicViewsCommentsSrc': '//www.blogblog.com/dynamicviews/4224c15c4e7c9321/js/comments.js', 'dynamicViewsScriptSrc': '//www.blogblog.com/dynamicviews/5d3f379b4eb56506', 'plusOneApiSrc': 'https://apis.google.com/js/plusone.js', 'disableGComments': true, 'sharing': {'platforms': [{'name': 'Get link', 'key': 'link', 'shareMessage': 'Get link', 'target': ''}, {'name': 'Facebook', 'key': 'facebook', 'shareMessage': 'Share to Facebook', 'target': 'facebook'}, {'name': 'BlogThis!', 'key': 'blogThis', 'shareMessage': 'BlogThis!', 'target': 'blog'}, {'name': 'Twitter', 'key': 'twitter', 'shareMessage': 'Share to Twitter', 'target': 'twitter'}, {'name': 'Pinterest', 'key': 'pinterest', 'shareMessage': 'Share to Pinterest', 'target': 'pinterest'}, {'name': 'Email', 'key': 'email', 'shareMessage': 'Email', 'target': 'email'}], 'disableGooglePlus': true, 'googlePlusShareButtonWidth': 300, 'googlePlusBootstrap': '\x3cscript type\x3d\x22text/javascript\x22\x3ewindow.___gcfg \x3d {\x27lang\x27: \x27en\x27};\x3c/script\x3e'}, 'hasCustomJumpLinkMessage': false, 'jumpLinkMessage': 'Read more', 'pageType': 'item', 'postId': '8131686730619075207', 'pageName': 'Python 3.8.0a3 is now available for testing', 'pageTitle': 'Python Insider: Python 3.8.0a3 is now available for testing'}}, {'name': 'features', 'data': {'sharing_get_link_dialog': 'true', 'sharing_native': 'false'}}, {'name': 'messages', 'data': {'edit': 'Edit', 'linkCopiedToClipboard': 'Link copied to clipboard!', 'ok': 'Ok', 'postLink': 'Post Link'}}, {'name': 'template', 'data': {'name': 'custom', 'localizedName': 'Custom', 'isResponsive': false, 'isAlternateRendering': false, 'isCustom': true}}, {'name': 'view', 'data': {'classic': {'name': 'classic', 'url': '?view\x3dclassic'}, 'flipcard': {'name': 'flipcard', 'url': '?view\x3dflipcard'}, 'magazine': {'name': 'magazine', 'url': '?view\x3dmagazine'}, 'mosaic': {'name': 'mosaic', 'url': '?view\x3dmosaic'}, 'sidebar': {'name': 'sidebar', 'url': '?view\x3dsidebar'}, 'snapshot': {'name': 'snapshot', 'url': '?view\x3dsnapshot'}, 'timeslide': {'name': 'timeslide', 'url': '?view\x3dtimeslide'}, 'isMobile': false, 'title': 'Python 3.8.0a3 is now available for testing', 'description': 'Go get it here: https://www.python.org/downloads/release/python-380a3/ The most visible change so far is probably the implementation of PEP ...', 'url': 'https://pythoninsider.blogspot.com/2019/03/go-get-it-here-httpswww.html', 'type': 'item', 'isSingleItem': true, 'isMultipleItems': false, 'isError': false, 'isPage': false, 'isPost': true, 'isHomepage': false, 'isArchive': false, 'isLabelSearch': false, 'postId': 8131686730619075207}}]);
_WidgetManager._RegisterWidget('_NavbarView', new _WidgetInfo('Navbar1', 'navbar', document.getElementById('Navbar1'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_HeaderView', new _WidgetInfo('Header1', 'header', document.getElementById('Header1'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_BlogView', new _WidgetInfo('Blog1', 'main', document.getElementById('Blog1'), {'cmtInteractionsEnabled': false, 'lightboxEnabled': true, 'lightboxModuleUrl': 'https://www.blogger.com/static/v1/jsbin/696337176-lbx.js', 'lightboxCssUrl': 'https://www.blogger.com/static/v1/v-css/368954415-lightbox_bundle.css'}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_HTMLView', new _WidgetInfo('HTML2', 'main', document.getElementById('HTML2'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_HTMLView', new _WidgetInfo('HTML1', 'sidebar-right-1', document.getElementById('HTML1'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_LinkListView', new _WidgetInfo('LinkList1', 'sidebar-right-1', document.getElementById('LinkList1'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_LinkListView', new _WidgetInfo('LinkList2', 'sidebar-right-1', document.getElementById('LinkList2'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_BlogListView', new _WidgetInfo('BlogList1', 'sidebar-right-1', document.getElementById('BlogList1'), {'numItemsToShow': 0, 'totalItems': 13}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_BlogArchiveView', new _WidgetInfo('BlogArchive1', 'sidebar-right-1', document.getElementById('BlogArchive1'), {'languageDirection': 'ltr', 'loadingMessage': 'Loading\x26hellip;'}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_ProfileView', new _WidgetInfo('Profile1', 'sidebar-right-1', document.getElementById('Profile1'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_HTMLView', new _WidgetInfo('HTML3', 'sidebar-right-1', document.getElementById('HTML3'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_AttributionView', new _WidgetInfo('Attribution1', 'attribution', document.getElementById('Attribution1'), {}, 'displayModeFull'));





Django
The web framework for perfectionists with deadlines.



Overview


Download


Documentation


News


Community


Code


About


♥ Donate







Django

Django makes it easier to build better Web apps more quickly and with less code.


Get started with Django







Meet Django

          Django is a high-level Python Web framework that encourages rapid development and clean, pragmatic design.
          Built by experienced developers, it takes care of much of the hassle of Web development, so you can focus
          on writing your app without needing to reinvent the wheel. It’s free and open source.
        

 Ridiculously fast.

Django was designed to help developers take applications from concept to completion as quickly as possible.

 Reassuringly secure.

Django takes security seriously and helps developers avoid many common security mistakes.

 Exceedingly scalable.

Some of the busiest sites on the Web leverage Django’s ability to quickly and flexibly scale.


Learn more about Django


Stay in the loop
Subscribe to one of our mailing lists to stay up to date with everything in the Django community:


Using Django
Get help with Django and follow announcements.




Subscribe



      You can also subscribe by sending an email to
      
      django-users+subscribe@googlegroups.com and following the
      instructions that will be sent to you.
    


Contributing to Django
Contribute to the development of Django itself.




Subscribe



      Before asking a question about how to contribute, read
      
      Contributing to Django. Many frequently asked questions are answered there.
    


      You can also subscribe by sending an email to
      
      django-developers+subscribe@googlegroups.com and following the
      instructions that will be sent to you.
    



    We have a few other specialized lists (mentorship, i18n, ...). You can
    find more information about them in our
    
    mailing list documentation.
  


 Back to Top



          Download latest release: 2.2

Django documentation

Support Django!






          Docker donated to the Django Software Foundation to
          support Django development. Donate today!
        



Latest news



Django 2.2 released

Django 2.2 has been released!

    Posted by Carlton Gibson on April 1, 2019
  



Django bugfix release: 2.1.8

Today the Django project issued a bugfix release for the 2.1 release series.

    Posted by Carlton Gibson on April 1, 2019
  


More news
New to Django?

Installation guide
Write your first Django app

Getting started with Django
The power of Django

Object-relational mapper
Automatic admin interface
Robust template system
Quick internationalization

Explore more features
Get involved

#django IRC channel

            Chat with other Django users
          
Ticket system

            Report bugs and make feature requests
          

Inside the Django community
The Django Software Foundation

About the Foundation

          Our non-profit supports the project
        
Support Django

          Your contribution makes Django stronger
        
Contact the Django Software Foundation


More about the DSF





Django Links

Learn More

About Django
Getting Started with Django
Team Organization
Django Software Foundation
Code of Conduct
Diversity Statement



Get Involved

Join a Group
Contribute to Django
Submit a Bug
Report a Security Issue



Follow Us

GitHub
Twitter
News RSS
Django Users Mailing List







Django



Hosting by Rackspace

Design by Threespot & 

© 2005-2019
         Django Software
        Foundation and individual contributors. Django is a
        registered
        trademark of the Django Software Foundation.
      




    function extless(input) {
        return input.replace(/(.*)\.[^.]+$/, '$1');
    }
    var require = {
        shim: {
            'jquery': [],
            'jquery.inview': ["jquery"],
            'jquery.payment': ["jquery"],
            'jquery.flot': ["jquery"],
            'jquery.unveil': ["jquery"],
            'stripe': {
              exports: 'Stripe'
            }
        },
        paths: {
            "jquery": extless("https://static.djangoproject.com/js/lib/jquery/dist/jquery.min.87e69028f78d.js"),
            "jquery.inview": extless("https://static.djangoproject.com/js/lib/jquery.inview/jquery.inview.min.4edba1c65592.js"),
            "jquery.payment": extless("https://static.djangoproject.com/js/lib/jquery.payment/lib/jquery.payment.e99c05ca79ae.js"),
            "jquery.unveil": extless("https://static.djangoproject.com/js/lib/unveil/jquery.unveil.min.ac79eb277093.js"),
            "jquery.flot": extless("https://static.djangoproject.com/js/lib/jquery-flot/jquery.flot.min.9964206e9d7f.js"),
            "clipboard": extless("https://static.djangoproject.com/js/lib/clipboard/dist/clipboard.min.bd70fd596a23.js"),
            "mod/floating-warning": extless("https://static.djangoproject.com/js/mod/floating-warning.a21b2abd2884.js"),
            "mod/list-collapsing": extless("https://static.djangoproject.com/js/mod/list-collapsing.c1a08d3ef9e9.js"),
            "mod/list-feature": extless("https://static.djangoproject.com/js/mod/list-feature.73529480f25b.js"),
            "mod/mobile-menu": extless("https://static.djangoproject.com/js/mod/mobile-menu.841726ee903a.js"),
            "mod/version-switcher": extless("https://static.djangoproject.com/js/mod/version-switcher.c28bb83972bb.js"),
            "mod/search-key": extless("https://static.djangoproject.com/js/mod/search-key.f3c0a6fcfedd.js"),
            "mod/stripe-custom-checkout": extless("https://static.djangoproject.com/js/mod/stripe-custom-checkout.aac1352045b7.js"),
            "mod/stripe-change-card": extless("https://static.djangoproject.com/js/mod/stripe-change-card.682c710317a8.js"),
            "mod/console-tabs": extless("https://static.djangoproject.com/js/mod/console-tabs.70ce882faaf3.js"),
            "stripe-checkout": "https://checkout.stripe.com/checkout",
            "stripe": "https://js.stripe.com/v2/?"  // ? needed due to require.js
        }
    };
    










Toggle navigation








          Pylons Project
        




Home


Projects



              Community 


Support
How to Participate
How to Contribute
Code Style / Standards
Testing Guidelines
Code of Conduct
Sponsors




              About 


Pylons Project
Pylons Framework (deprecated)
Contact
Artwork
License















Pylons Project


              We build Web Technologies
              for the Python community
            










            Our Projects






AcidFS
Filesystem interaction using transactions with ACID semantics.

package •
                  source •
                  docs





Deform
An HTML form library.

package •
                  source •
                  docs





Pyramid
The Start Small, Finish Big, Stay Finished Web Framework.

package •
                  source •
                  docs •
                  website





SubstanceD
An application server based on Pyramid.

package •
                  source •
                  docs •
                  website





translationstring
An internationalization library.

package •
                  source •
                  docs





Waitress
WSGI server for Python 2/3 that runs on UNIX and Windows.

package •
                  source •
                  docs





Webob
WSGI request/response library.

package •
                  source •
                  docs •
                  website





WebTest
Test a WSGI application without starting up an HTTP server.

package •
                  source •
                  docs






More Projects








           
        

Pyramid

            The Start Small,
            Finish Big
            Stay Finished Web Framework
          

            Visit trypyramid.com to learn more about the Pyramid web framework, our most featured project.
          









            Pylons Project






            The Pylons Project is composed of a disparate group of project leaders with experience going back to the very start of Python web frameworks.
          

Collectively, we have experience and humility gained by making (and surviving) every stupid decision that could be imagined. We aim to bring fresh ideas to classic web development problems.
          



            Rather than focusing on a single web framework, the Pylons Project develops a collection of related technologies. The first package from the Pylons Project was the Pyramid web framework.
          

            Other packages have been added to the collection over time, including higher-level components and applications. The project has become an ecosystem of well-tested, well-documented components which interoperate easily.
          










Follow @PylonsProject



        © Copyright 2008-2018, Agendaless Consulting

Pylons Project | Build 2c66a07ad62e665995f4
      


          Sponsored by Linode














Bottle: Python Web Framework¶
Bottle is a fast, simple and lightweight WSGI micro web-framework for Python. It is distributed as a single file module and has no dependencies other than the Python Standard Library.

Routing: Requests to function-call mapping with support for clean and  dynamic URLs.
Templates: Fast and pythonic built-in template engine and support for mako, jinja2 and cheetah templates.
Utilities: Convenient access to form data, file uploads, cookies, headers and other HTTP-related metadata.
Server: Built-in HTTP development server and support for paste, fapws3, bjoern, gae, cherrypy or any other WSGI capable HTTP server.

Example: “Hello World” in a bottle
from bottle import route, run, template

@route('/hello/<name>')
def index(name):
    return template('<b>Hello {{name}}</b>!', name=name)

run(host='localhost', port=8080)


Run this script or paste it into a Python console, then point your browser to http://localhost:8080/hello/world. That’s it.
Download and Install
Install the latest stable release with pip install bottle or download bottle.py (unstable) into your project directory. There are no hard [1] dependencies other than the Python standard library. Bottle supports Python 2.7 and Python 3.

Deprecated since version 0.13: Support for Python 2.5 and 2.6 was dropped with this release.


User’s Guide¶
Start here if you want to learn how to use the bottle framework for web development. If you have any questions not answered here, feel free to ask the mailing list.


Tutorial
Installation
Quickstart: “Hello World”
Request Routing
Generating content
Request Data
Templates
Plugins
Development
Deployment
Glossary


Configuration (DRAFT)
Configuration Basics
Naming Convention
Loading Configuration from a File
Loading Configuration from a python module
Loading Configuration from a nested dict
Listening to configuration changes
Filters and other Meta Data
API Documentation


Request Routing
Rule Syntax
Wildcard Filters
Legacy Syntax
Explicit routing configuration


SimpleTemplate Engine
SimpleTemplate Syntax
Template Functions
SimpleTemplate API


Deployment
Server Options
Switching the Server Backend
Good old CGI


API Reference
Module Contents
The Bottle Class
The Request Object
The Response Object
Templates


List of available Plugins




Knowledge Base¶
A collection of articles, guides and HOWTOs.


Tutorial: Todo-List Application
Goals
Before We Start…
Using Bottle for a Web-Based ToDo List
Server Setup
Final Words
Complete Example Listing


Primer to Asynchronous Applications
The Limits of Synchronous WSGI
Greenlets to the rescue
Event Callbacks
Finally: WebSockets


Recipes
Keeping track of Sessions
Debugging with Style: Debugging Middleware
Unit-Testing Bottle Applications
Functional Testing Bottle Applications
Embedding other WSGI Apps
Ignore trailing slashes
Keep-alive requests
Gzip Compression in Bottle
Using the hooks plugin
Using Bottle with Heroku


Frequently Asked Questions
About Bottle
Common Problems and Pitfalls






Development and Contribution¶
These chapters are intended for developers interested in the bottle development and release workflow.


Release Notes and Changelog
Release 0.13
Release 0.12
Release 0.11
Release 0.10
Release 0.9
Release 0.8


Contributors
Developer Notes
Get involved
Get the Sources
Releases and Updates
Repository Structure
Submitting Patches
Building the Documentation
GIT Workflow Examples


Plugin Development Guide
How Plugins Work: The Basics
Plugin API
The Route Context
Runtime optimizations
Plugin Example: SQLitePlugin








License¶
Code and documentation are available according to the MIT License:
Copyright (c) 2009-2018, Marcel Hellkamp.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.


The Bottle logo however is NOT covered by that license. It is allowed to
use the logo as a link to the bottle homepage or in direct context with
the unmodified library. In all other cases please ask first.
Footnotes



[1]Usage of the template or server adapter classes requires the corresponding template or server modules.












   Bottle is a fast, simple and lightweight WSGI micro web-framework for Python.

Installation
Install Bottle with pip install bottle or download the source package at PyPI.
Releases
Warning: This is a preview for Bottle-0.13-dev, which is
    not released yet. Switch to the latest stable release?

Bottle dev (development)
Bottle 0.12 (stable)
Bottle 0.11 (old stable)

Download Docs
Download this documentation as PDF or HTML (zip) for offline use.
Resources

Twitter news
Development blog
GitHub repository
Mailing list archive
Freenode chat

Like it?












Hosted by:




Quick search







$('#searchbox').show(0);





    © Copyright 2009-2019, Marcel Hellkamp - Contact
    Last updated on Apr 15, 2019. Created using Sphinx 1.6.7.
    Powered by Bottle 0.13-dev
    

